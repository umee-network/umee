// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package peggy

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ValsetArgs is an auto generated low-level Go binding around an user-defined struct.
type ValsetArgs struct {
	Validators   []common.Address
	Powers       []*big.Int
	ValsetNonce  *big.Int
	RewardAmount *big.Int
	RewardToken  common.Address
}

// SolidityMetaData contains all meta data concerning the Solidity contract.
var SolidityMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_cosmosDenom\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"ERC20DeployedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"SendToCosmosEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_batchNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"TransactionBatchExecutedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newValsetNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"ValsetUpdatedEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cosmosDenom\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"deployERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnershipExpiryTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_peggyId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_powerThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwnershipExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"lastBatchNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnershipAfterExpiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToCosmos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"state_invalidationMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"state_lastBatchNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastEventNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastValsetCheckpoint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastValsetNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_peggyId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_powerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"valsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"structValsetArgs\",\"name\":\"_currentValset\",\"type\":\"tuple\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_destinations\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_batchNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_batchTimeout\",\"type\":\"uint256\"}],\"name\":\"submitBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"valsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"structValsetArgs\",\"name\":\"_newValset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"valsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"structValsetArgs\",\"name\":\"_currentValset\",\"type\":\"tuple\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"}],\"name\":\"updateValset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526000606b556000606c5534801561001a57600080fd5b506000606660006101000a81548160ff0219169083151502179055506001606781905550615d708061004d6000396000f3fe60806040523480156200001157600080fd5b5060043610620001605760003560e01c80638174741811620000c9578063c359a2121162000087578063c359a212146200034f578063df97174b146200036f578063e5a2b5d214620003a5578063f2b5330714620003c7578063f2fde38b14620003e9578063f795563714620004095762000160565b80638174741814620002bf5780638c64865f14620002df5780638da5cb5b14620002eb578063a5352f5b146200030d578063b56561fe146200032d5762000160565b80635afe97bb11620001235780635afe97bb14620001f55780635c975abb146200021757806369dd39081462000239578063715018a6146200025b57806373b2054714620002675780637dfb6f8614620002895762000160565b8063011b217414620001655780631ee7a108146200019b5780631ffbe7f914620001bd5780634a4e3bd514620001dd57806351858e2714620001e9575b600080fd5b6200018360048036038101906200017d9190620026e8565b62000429565b604051620001929190620037a4565b60405180910390f35b620001a562000472565b604051620001b49190620037a4565b60405180910390f35b620001db6004803603810190620001d5919062002714565b6200048d565b005b620001e7620005ea565b005b620001f362000679565b005b620001ff62000708565b6040516200020e9190620032cd565b60405180910390f35b620002216200071b565b604051620002309190620032cd565b60405180910390f35b6200024362000732565b604051620002529190620032ea565b60405180910390f35b6200026562000738565b005b62000271620007c7565b604051620002809190620037a4565b60405180910390f35b620002a76004803603810190620002a1919062002796565b620007cd565b604051620002b69190620037a4565b60405180910390f35b620002dd6004803603810190620002d791906200292a565b620007e5565b005b620002e962000d11565b005b620002f562000d69565b604051620003049190620031e7565b60405180910390f35b6200032b600480360381019062000325919062002ac9565b62000d93565b005b620003376200108e565b604051620003469190620037a4565b60405180910390f35b6200036d6004803603810190620003679190620027c2565b62001094565b005b6200038d6004803603810190620003879190620026e8565b620013b4565b6040516200039c9190620037a4565b60405180910390f35b620003af620013cc565b604051620003be9190620037a4565b60405180910390f35b620003d1620013d2565b604051620003e09190620032ea565b60405180910390f35b620004076004803603810190620004019190620026e8565b620013d8565b005b62000427600480360381019062000421919062002865565b6200158e565b005b6000606960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006301dfe20060345462000488919062003a8a565b905090565b620004976200071b565b15620004da576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004d1906200360c565b60405180910390fd5b6002606754141562000523576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200051a9062003782565b60405180910390fd5b60026067819055506200055a3330838673ffffffffffffffffffffffffffffffffffffffff1662001656909392919063ffffffff16565b6001606c546200056b919062003a8a565b606c81905550813373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fd7767894d73c589daeca9643f445f03d7be61aad2950c117e7cbff4176fca7e484606c54604051620005d59291906200382e565b60405180910390a46001606781905550505050565b620005f4620016e3565b73ffffffffffffffffffffffffffffffffffffffff166200061462000d69565b73ffffffffffffffffffffffffffffffffffffffff16146200066d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006649062003694565b60405180910390fd5b62000677620016eb565b565b62000683620016e3565b73ffffffffffffffffffffffffffffffffffffffff16620006a362000d69565b73ffffffffffffffffffffffffffffffffffffffff1614620006fc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006f39062003694565b60405180910390fd5b6200070662001796565b565b60006200071462000472565b4211905090565b6000606660009054906101000a900460ff16905090565b606d5481565b62000742620016e3565b73ffffffffffffffffffffffffffffffffffffffff166200076262000d69565b73ffffffffffffffffffffffffffffffffffffffff1614620007bb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007b29062003694565b60405180910390fd5b620007c562001842565b565b606c5481565b606a6020528060005260406000206000915090505481565b600260675414156200082e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008259062003782565b60405180910390fd5b6002606781905550620008406200071b565b1562000883576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200087a906200360c565b60405180910390fd5b82606960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541062000907576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008fe9062003562565b60405180910390fd5b8043106200094c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009439062003650565b60405180910390fd5b8960200151518a60000151511480156200096b575088518a6000015151145b80156200097d575087518a6000015151145b80156200098f575086518a6000015151145b620009d1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009c89062003760565b60405180910390fd5b606854620009e28b606d5462001903565b1462000a25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a1c906200351e565b60405180910390fd5b8451865114801562000a38575083518651145b62000a7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a7190620035a6565b60405180910390fd5b62000aed8a600001518b602001518b8b8b606d547f7472616e73616374696f6e4261746368000000000000000000000000000000008d8d8d8d8d8d60405160200162000ace98979695949392919062003392565b60405160208183030381529060405280519060200120606e5462001984565b82606960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600080600090505b875181101562000c595762000bf287828151811062000b81577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015189838151811062000bc3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518673ffffffffffffffffffffffffffffffffffffffff1662001bfb9092919063ffffffff16565b85818151811062000c2c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518262000c41919062003a8a565b9150808062000c509062003beb565b91505062000b39565b50600081111562000c925762000c9133828573ffffffffffffffffffffffffffffffffffffffff1662001bfb9092919063ffffffff16565b5b506001606c5462000ca4919062003a8a565b606c819055508173ffffffffffffffffffffffffffffffffffffffff16837f02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708606c5460405162000cf59190620037a4565b60405180910390a3600160678190555050505050505050505050565b62000d1b62000708565b62000d5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000d5490620036fa565b60405180910390fd5b62000d6762001842565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b62000d9d6200071b565b1562000de0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000dd7906200360c565b60405180910390fd5b836040015185604001511162000e2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e2490620036d8565b60405180910390fd5b8460200151518560000151511462000e7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e739062003672565b60405180910390fd5b83602001515184600001515114801562000e9b57508251846000015151145b801562000ead57508151846000015151145b801562000ebf57508051846000015151145b62000f01576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ef89062003760565b60405180910390fd5b60685462000f1285606d5462001903565b1462000f55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f4c906200351e565b60405180910390fd5b600062000f6586606d5462001903565b905062000f828560000151866020015186868686606e5462001984565b806068819055508560400151606b81905550600073ffffffffffffffffffffffffffffffffffffffff16866080015173ffffffffffffffffffffffffffffffffffffffff161415801562000fdb57506000866060015114155b15620010175762001016338760600151886080015173ffffffffffffffffffffffffffffffffffffffff1662001bfb9092919063ffffffff16565b5b6001606c5462001028919062003a8a565b606c8190555085604001517f76d08978c024a4bf8cbb30c67fd78fcaa1827cbc533e4e175f36d07e64ccf96a606c54886060015189608001518a600001518b602001516040516200107e9594939291906200385b565b60405180910390a2505050505050565b606b5481565b600060019054906101000a900460ff1680620010bb575060008054906101000a900460ff16155b620010fd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620010f4906200362e565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200114e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200115862001c85565b6200116262001d64565b81518484905014620011ab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620011a29062003760565b60405180910390fd5b6000805b83518110156200122f57838181518110620011f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518262001208919062003a8a565b91508682111562001219576200122f565b8080620012269062003beb565b915050620011af565b5085811162001275576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200126c90620036b6565b60405180910390fd5b6200127f62002239565b6040518060a00160405280878780806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018581526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152509050600062001310828a62001903565b905088606d8190555087606e81905550806068819055506001606c5462001338919062003a8a565b606c81905550606b547f76d08978c024a4bf8cbb30c67fd78fcaa1827cbc533e4e175f36d07e64ccf96a606c546000808b8b8b6040516200137f96959493929190620037c1565b60405180910390a25050508015620013ac5760008060016101000a81548160ff0219169083151502179055505b505050505050565b60696020528060005260406000206000915090505481565b606e5481565b60685481565b620013e2620016e3565b73ffffffffffffffffffffffffffffffffffffffff166200140262000d69565b73ffffffffffffffffffffffffffffffffffffffff16146200145b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620014529062003694565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620014ce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620014c59062003584565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000308686868686604051620015a4906200227e565b620015b59695949392919062003241565b604051809103906000f080158015620015d2573d6000803e3d6000fd5b5090506001606c54620015e6919062003a8a565b606c819055508073ffffffffffffffffffffffffffffffffffffffff167f82fe3a4fa49c6382d0c085746698ddbbafe6c2bf61285b19410644b5b26287c789898989898989606c546040516200164498979695949392919062003482565b60405180910390a25050505050505050565b620016dd846323b872dd60e01b8585856040516024016200167a9392919062003204565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505062001ef5565b50505050565b600033905090565b620016f56200071b565b62001737576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200172e9062003540565b60405180910390fd5b6000606660006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6200177d620016e3565b6040516200178c9190620031e7565b60405180910390a1565b620017a06200071b565b15620017e3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620017da906200360c565b60405180910390fd5b6001606660006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25862001829620016e3565b604051620018389190620031e7565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000807f636865636b706f696e740000000000000000000000000000000000000000000060001b90506000838286604001518760000151886020015189606001518a6080015160405160200162001961979695949392919062003307565b604051602081830303815290604052805190602001209050809250505092915050565b6000805b885181101562001bab576000878281518110620019ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff161462001b955762001af289828151811062001a1d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518589848151811062001a60577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015189858151811062001aa2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015189868151811062001ae4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015162001fc4565b62001b34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001b2b90620035c8565b60405180910390fd5b87818151811062001b6e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518262001b83919062003a8a565b91508282111562001b945762001bab565b5b808062001ba29062003beb565b91505062001988565b5081811162001bf1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001be890620036b6565b60405180910390fd5b5050505050505050565b62001c808363a9059cbb60e01b848460405160240162001c1d929190620032a0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505062001ef5565b505050565b600060019054906101000a900460ff168062001cac575060008054906101000a900460ff16155b62001cee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001ce5906200362e565b60405180910390fd5b60008060019054906101000a900460ff16159050801562001d3f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801562001d615760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168062001d8b575060008054906101000a900460ff16155b62001dcd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001dc4906200362e565b60405180910390fd5b60008060019054906101000a900460ff16159050801562001e1e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600062001e2a620016e3565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426034819055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350801562001ef25760008060016101000a81548160ff0219169083151502179055505b50565b600062001f59826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166200207e9092919063ffffffff16565b905060008151111562001fbf578080602001905181019062001f7c91906200276a565b62001fbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001fb5906200373e565b60405180910390fd5b5b505050565b6000808560405160200162001fda9190620031bd565b6040516020818303038152906040528051906020012090506001818686866040516000815260200160405260405162002017949392919062003435565b6020604051602081039080840390855afa1580156200203a573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161491505095945050505050565b60606200208f848460008562002098565b90509392505050565b606082471015620020e0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620020d790620035ea565b60405180910390fd5b620020eb85620021ba565b6200212d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162002124906200371c565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051620021589190620031a4565b60006040518083038185875af1925050503d806000811462002197576040519150601f19603f3d011682016040523d82523d6000602084013e6200219c565b606091505b5091509150620021ae828286620021cd565b92505050949350505050565b600080823b905060008111915050919050565b60608315620021df5782905062002232565b600083511115620021f35782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620022299190620034fa565b60405180910390fd5b9392505050565b6040518060a0016040528060608152602001606081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b611b5680620041e583390190565b6000620022a36200229d84620038ef565b620038c6565b90508083825260208201905082856020860282011115620022c357600080fd5b60005b85811015620022f75781620022dc888262002460565b845260208401935060208301925050600181019050620022c6565b5050509392505050565b60006200231862002312846200391e565b620038c6565b905080838252602082019050828560208602820111156200233857600080fd5b60005b858110156200236c57816200235188826200258f565b8452602084019350602083019250506001810190506200233b565b5050509392505050565b60006200238d62002387846200394d565b620038c6565b90508083825260208201905082856020860282011115620023ad57600080fd5b60005b85811015620023e15781620023c68882620026ba565b845260208401935060208301925050600181019050620023b0565b5050509392505050565b600062002402620023fc846200397c565b620038c6565b905080838252602082019050828560208602820111156200242257600080fd5b60005b858110156200245657816200243b8882620026d1565b84526020840193506020830192505060018101905062002425565b5050509392505050565b600081359050620024718162004162565b92915050565b60008083601f8401126200248a57600080fd5b8235905067ffffffffffffffff811115620024a457600080fd5b602083019150836020820283011115620024bd57600080fd5b9250929050565b600082601f830112620024d657600080fd5b8135620024e88482602086016200228c565b91505092915050565b600082601f8301126200250357600080fd5b81356200251584826020860162002301565b91505092915050565b600082601f8301126200253057600080fd5b81356200254284826020860162002376565b91505092915050565b600082601f8301126200255d57600080fd5b81356200256f848260208601620023eb565b91505092915050565b60008151905062002589816200417c565b92915050565b600081359050620025a08162004196565b92915050565b60008083601f840112620025b957600080fd5b8235905067ffffffffffffffff811115620025d357600080fd5b602083019150836001820283011115620025ec57600080fd5b9250929050565b600060a082840312156200260657600080fd5b6200261260a0620038c6565b9050600082013567ffffffffffffffff8111156200262f57600080fd5b6200263d84828501620024c4565b600083015250602082013567ffffffffffffffff8111156200265e57600080fd5b6200266c848285016200251e565b60208301525060406200268284828501620026ba565b60408301525060606200269884828501620026ba565b6060830152506080620026ae8482850162002460565b60808301525092915050565b600081359050620026cb81620041b0565b92915050565b600081359050620026e281620041ca565b92915050565b600060208284031215620026fb57600080fd5b60006200270b8482850162002460565b91505092915050565b6000806000606084860312156200272a57600080fd5b60006200273a8682870162002460565b93505060206200274d868287016200258f565b92505060406200276086828701620026ba565b9150509250925092565b6000602082840312156200277d57600080fd5b60006200278d8482850162002578565b91505092915050565b600060208284031215620027a957600080fd5b6000620027b9848285016200258f565b91505092915050565b600080600080600060808688031215620027db57600080fd5b6000620027eb888289016200258f565b9550506020620027fe88828901620026ba565b945050604086013567ffffffffffffffff8111156200281c57600080fd5b6200282a8882890162002477565b9350935050606086013567ffffffffffffffff8111156200284a57600080fd5b62002858888289016200251e565b9150509295509295909350565b60008060008060008060006080888a0312156200288157600080fd5b600088013567ffffffffffffffff8111156200289c57600080fd5b620028aa8a828b01620025a6565b9750975050602088013567ffffffffffffffff811115620028ca57600080fd5b620028d88a828b01620025a6565b9550955050604088013567ffffffffffffffff811115620028f857600080fd5b620029068a828b01620025a6565b935093505060606200291b8a828b01620026d1565b91505092959891949750929550565b6000806000806000806000806000806101408b8d0312156200294b57600080fd5b60008b013567ffffffffffffffff8111156200296657600080fd5b620029748d828e01620025f3565b9a505060208b013567ffffffffffffffff8111156200299257600080fd5b620029a08d828e016200254b565b99505060408b013567ffffffffffffffff811115620029be57600080fd5b620029cc8d828e01620024f1565b98505060608b013567ffffffffffffffff811115620029ea57600080fd5b620029f88d828e01620024f1565b97505060808b013567ffffffffffffffff81111562002a1657600080fd5b62002a248d828e016200251e565b96505060a08b013567ffffffffffffffff81111562002a4257600080fd5b62002a508d828e01620024c4565b95505060c08b013567ffffffffffffffff81111562002a6e57600080fd5b62002a7c8d828e016200251e565b94505060e062002a8f8d828e01620026ba565b93505061010062002aa38d828e0162002460565b92505061012062002ab78d828e01620026ba565b9150509295989b9194979a5092959850565b600080600080600060a0868803121562002ae257600080fd5b600086013567ffffffffffffffff81111562002afd57600080fd5b62002b0b88828901620025f3565b955050602086013567ffffffffffffffff81111562002b2957600080fd5b62002b3788828901620025f3565b945050604086013567ffffffffffffffff81111562002b5557600080fd5b62002b63888289016200254b565b935050606086013567ffffffffffffffff81111562002b8157600080fd5b62002b8f88828901620024f1565b925050608086013567ffffffffffffffff81111562002bad57600080fd5b62002bbb88828901620024f1565b9150509295509295909350565b600062002bd6838362002bfc565b60208301905092915050565b600062002bf0838362003171565b60208301905092915050565b62002c078162003ae7565b82525050565b62002c188162003ae7565b82525050565b600062002c2c838562003a28565b935062002c3982620039ab565b8060005b8581101562002c7a5762002c52828462003a71565b62002c5e888262002bc8565b975062002c6b8362003a01565b92505060018101905062002c3d565b5085925050509392505050565b600062002c9482620039d5565b62002ca0818562003a28565b935062002cad83620039b5565b8060005b8381101562002ce457815162002cc8888262002bc8565b975062002cd58362003a0e565b92505060018101905062002cb1565b5085935050505092915050565b600062002cfe82620039e0565b62002d0a818562003a39565b935062002d1783620039c5565b8060005b8381101562002d4e57815162002d32888262002be2565b975062002d3f8362003a1b565b92505060018101905062002d1b565b5085935050505092915050565b62002d668162003afb565b82525050565b62002d778162003b07565b82525050565b62002d9262002d8c8262003b07565b62003c39565b82525050565b600062002da582620039eb565b62002db1818562003a4a565b935062002dc381856020860162003b7f565b80840191505092915050565b62002dda8162003b48565b82525050565b62002deb8162003b5c565b82525050565b600062002dff838562003a55565b935062002e0e83858462003b70565b62002e198362003ca1565b840190509392505050565b600062002e3182620039f6565b62002e3d818562003a55565b935062002e4f81856020860162003b7f565b62002e5a8162003ca1565b840191505092915050565b600062002e74603f8362003a55565b915062002e818262003cb2565b604082019050919050565b600062002e9b60148362003a55565b915062002ea88262003d01565b602082019050919050565b600062002ec2601c8362003a66565b915062002ecf8262003d2a565b601c82019050919050565b600062002ee960368362003a55565b915062002ef68262003d53565b604082019050919050565b600062002f1060268362003a55565b915062002f1d8262003da2565b604082019050919050565b600062002f37601f8362003a55565b915062002f448262003df1565b602082019050919050565b600062002f5e60238362003a55565b915062002f6b8262003e1a565b604082019050919050565b600062002f8560268362003a55565b915062002f928262003e69565b604082019050919050565b600062002fac60108362003a55565b915062002fb98262003eb8565b602082019050919050565b600062002fd3602e8362003a55565b915062002fe08262003ee1565b604082019050919050565b600062002ffa603b8362003a55565b9150620030078262003f30565b604082019050919050565b600062003021601b8362003a55565b91506200302e8262003f7f565b602082019050919050565b60006200304860208362003a55565b9150620030558262003fa8565b602082019050919050565b60006200306f603c8362003a55565b91506200307c8262003fd1565b604082019050919050565b60006200309660378362003a55565b9150620030a38262004020565b604082019050919050565b6000620030bd60198362003a55565b9150620030ca826200406f565b602082019050919050565b6000620030e4601d8362003a55565b9150620030f18262004098565b602082019050919050565b60006200310b602a8362003a55565b91506200311882620040c1565b604082019050919050565b600062003132601f8362003a55565b91506200313f8262004110565b602082019050919050565b600062003159601f8362003a55565b9150620031668262004139565b602082019050919050565b6200317c8162003b31565b82525050565b6200318d8162003b31565b82525050565b6200319e8162003b3b565b82525050565b6000620031b2828462002d98565b915081905092915050565b6000620031ca8262002eb3565b9150620031d8828462002d7d565b60208201915081905092915050565b6000602082019050620031fe600083018462002c0d565b92915050565b60006060820190506200321b600083018662002c0d565b6200322a602083018562002c0d565b62003239604083018462003182565b949350505050565b600060808201905062003258600083018962002c0d565b81810360208301526200326d81878962002df1565b905081810360408301526200328481858762002df1565b905062003295606083018462003193565b979650505050505050565b6000604082019050620032b7600083018562002c0d565b620032c6602083018462003182565b9392505050565b6000602082019050620032e4600083018462002d5b565b92915050565b600060208201905062003301600083018462002d6c565b92915050565b600060e0820190506200331e600083018a62002d6c565b6200332d602083018962002d6c565b6200333c604083018862003182565b818103606083015262003350818762002c87565b9050818103608083015262003366818662002cf1565b90506200337760a083018562003182565b6200338660c083018462002c0d565b98975050505050505050565b600061010082019050620033aa600083018b62002d6c565b620033b9602083018a62002de0565b8181036040830152620033cd818962002cf1565b90508181036060830152620033e3818862002c87565b90508181036080830152620033f9818762002cf1565b90506200340a60a083018662003182565b6200341960c083018562002c0d565b6200342860e083018462003182565b9998505050505050505050565b60006080820190506200344c600083018762002d6c565b6200345b602083018662003193565b6200346a604083018562002d6c565b62003479606083018462002d6c565b95945050505050565b600060a08201905081810360008301526200349f818a8c62002df1565b90508181036020830152620034b681888a62002df1565b90508181036040830152620034cd81868862002df1565b9050620034de606083018562003193565b620034ed608083018462003182565b9998505050505050505050565b6000602082019050818103600083015262003516818462002e24565b905092915050565b60006020820190508181036000830152620035398162002e65565b9050919050565b600060208201905081810360008301526200355b8162002e8c565b9050919050565b600060208201905081810360008301526200357d8162002eda565b9050919050565b600060208201905081810360008301526200359f8162002f01565b9050919050565b60006020820190508181036000830152620035c18162002f28565b9050919050565b60006020820190508181036000830152620035e38162002f4f565b9050919050565b60006020820190508181036000830152620036058162002f76565b9050919050565b60006020820190508181036000830152620036278162002f9d565b9050919050565b60006020820190508181036000830152620036498162002fc4565b9050919050565b600060208201905081810360008301526200366b8162002feb565b9050919050565b600060208201905081810360008301526200368d8162003012565b9050919050565b60006020820190508181036000830152620036af8162003039565b9050919050565b60006020820190508181036000830152620036d18162003060565b9050919050565b60006020820190508181036000830152620036f38162003087565b9050919050565b600060208201905081810360008301526200371581620030ae565b9050919050565b600060208201905081810360008301526200373781620030d5565b9050919050565b600060208201905081810360008301526200375981620030fc565b9050919050565b600060208201905081810360008301526200377b8162003123565b9050919050565b600060208201905081810360008301526200379d816200314a565b9050919050565b6000602082019050620037bb600083018462003182565b92915050565b600060a082019050620037d8600083018962003182565b620037e7602083018862002dcf565b620037f6604083018762002c0d565b81810360608301526200380b81858762002c1e565b9050818103608083015262003821818462002cf1565b9050979650505050505050565b600060408201905062003845600083018562003182565b62003854602083018462003182565b9392505050565b600060a08201905062003872600083018862003182565b62003881602083018762003182565b62003890604083018662002c0d565b8181036060830152620038a4818562002c87565b90508181036080830152620038ba818462002cf1565b90509695505050505050565b6000620038d2620038e5565b9050620038e0828262003bb5565b919050565b6000604051905090565b600067ffffffffffffffff8211156200390d576200390c62003c72565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156200393c576200393b62003c72565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156200396b576200396a62003c72565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156200399a576200399962003c72565b5b602082029050602081019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600062003a82602084018462002460565b905092915050565b600062003a978262003b31565b915062003aa48362003b31565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562003adc5762003adb62003c43565b5b828201905092915050565b600062003af48262003b11565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600062003b558262003b31565b9050919050565b600062003b698262003b31565b9050919050565b82818337600083830152505050565b60005b8381101562003b9f57808201518184015260208101905062003b82565b8381111562003baf576000848401525b50505050565b62003bc08262003ca1565b810181811067ffffffffffffffff8211171562003be25762003be162003c72565b5b80604052505050565b600062003bf88262003b31565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562003c2e5762003c2d62003c43565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f537570706c6965642063757272656e742076616c696461746f727320616e642060008201527f706f7765727320646f206e6f74206d6174636820636865636b706f696e742e00602082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f4e6577206261746368206e6f6e6365206d75737420626520677265617465722060008201527f7468616e207468652063757272656e74206e6f6e636500000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4d616c666f726d6564206261746368206f66207472616e73616374696f6e7300600082015250565b7f56616c696461746f72207369676e617475726520646f6573206e6f74206d617460008201527f63682e0000000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f42617463682074696d656f7574206d757374206265206772656174657220746860008201527f616e207468652063757272656e7420626c6f636b206865696768740000000000602082015250565b7f4d616c666f726d6564206e65772076616c696461746f72207365740000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5375626d69747465642076616c696461746f7220736574207369676e6174757260008201527f657320646f206e6f74206861766520656e6f75676820706f7765722e00000000602082015250565b7f4e65772076616c736574206e6f6e6365206d757374206265206772656174657260008201527f207468616e207468652063757272656e74206e6f6e6365000000000000000000602082015250565b7f4f776e657273686970206e6f7420796574206578706972656400000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f4d616c666f726d65642063757272656e742076616c696461746f722073657400600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6200416d8162003ae7565b81146200417957600080fd5b50565b620041878162003afb565b81146200419357600080fd5b50565b620041a18162003b07565b8114620041ad57600080fd5b50565b620041bb8162003b31565b8114620041c757600080fd5b50565b620041d58162003b3b565b8114620041e157600080fd5b5056fe60a06040527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6005553480156200003557600080fd5b5060405162001b5638038062001b5683398181016040528101906200005b91906200037a565b82828160039080519060200190620000759291906200022a565b5080600490805190602001906200008e9291906200022a565b5050508060ff1660808160ff1660f81b81525050620000b684600554620000c060201b60201c565b5050505062000744565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000133576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200012a9062000450565b60405180910390fd5b62000147600083836200022560201b60201c565b80600260008282546200015b9190620004ff565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620001b29190620004ff565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162000219919062000472565b60405180910390a35050565b505050565b8280546200023890620005dd565b90600052602060002090601f0160209004810192826200025c5760008555620002a8565b82601f106200027757805160ff1916838001178555620002a8565b82800160010185558215620002a8579182015b82811115620002a75782518255916020019190600101906200028a565b5b509050620002b79190620002bb565b5090565b5b80821115620002d6576000816000905550600101620002bc565b5090565b6000620002f1620002eb84620004b8565b6200048f565b9050828152602081018484840111156200030a57600080fd5b62000317848285620005a7565b509392505050565b600081519050620003308162000710565b92915050565b600082601f8301126200034857600080fd5b81516200035a848260208601620002da565b91505092915050565b60008151905062000374816200072a565b92915050565b600080600080608085870312156200039157600080fd5b6000620003a1878288016200031f565b945050602085015167ffffffffffffffff811115620003bf57600080fd5b620003cd8782880162000336565b935050604085015167ffffffffffffffff811115620003eb57600080fd5b620003f98782880162000336565b92505060606200040c8782880162000363565b91505092959194509250565b600062000427601f83620004ee565b91506200043482620006e7565b602082019050919050565b6200044a8162000590565b82525050565b600060208201905081810360008301526200046b8162000418565b9050919050565b60006020820190506200048960008301846200043f565b92915050565b60006200049b620004ae565b9050620004a9828262000613565b919050565b6000604051905090565b600067ffffffffffffffff821115620004d657620004d5620006a7565b5b620004e182620006d6565b9050602081019050919050565b600082825260208201905092915050565b60006200050c8262000590565b9150620005198362000590565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000551576200055062000649565b5b828201905092915050565b6000620005698262000570565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015620005c7578082015181840152602081019050620005aa565b83811115620005d7576000848401525b50505050565b60006002820490506001821680620005f657607f821691505b602082108114156200060d576200060c62000678565b5b50919050565b6200061e82620006d6565b810181811067ffffffffffffffff8211171562000640576200063f620006a7565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6200071b816200055c565b81146200072757600080fd5b50565b62000735816200059a565b81146200074157600080fd5b50565b60805160f81c6113f362000763600039600061043501526113f36000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610e5f565b60405180910390f35b6100e660048036038101906100e19190610cad565b610308565b6040516100f39190610e44565b60405180910390f35b610104610326565b6040516101119190610f61565b60405180910390f35b610134600480360381019061012f9190610c5e565b610330565b6040516101419190610e44565b60405180910390f35b610152610431565b60405161015f9190610f7c565b60405180910390f35b610182600480360381019061017d9190610cad565b610459565b60405161018f9190610e44565b60405180910390f35b6101b260048036038101906101ad9190610bf9565b610505565b6040516101bf9190610f61565b60405180910390f35b6101d061054d565b6040516101dd9190610e5f565b60405180910390f35b61020060048036038101906101fb9190610cad565b6105df565b60405161020d9190610e44565b60405180910390f35b610230600480360381019061022b9190610cad565b6106d3565b60405161023d9190610e44565b60405180910390f35b610260600480360381019061025b9190610c22565b6106f1565b60405161026d9190610f61565b60405180910390f35b606060038054610285906110c5565b80601f01602080910402602001604051908101604052809291908181526020018280546102b1906110c5565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b600061031c610315610778565b8484610780565b6001905092915050565b6000600254905090565b600061033d84848461094b565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610388610778565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610408576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ff90610ee1565b60405180910390fd5b61042585610414610778565b85846104209190611009565b610780565b60019150509392505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006104fb610466610778565b848460016000610474610778565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104f69190610fb3565b610780565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461055c906110c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610588906110c5565b80156105d55780601f106105aa576101008083540402835291602001916105d5565b820191906000526020600020905b8154815290600101906020018083116105b857829003601f168201915b5050505050905090565b600080600160006105ee610778565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156106ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290610f41565b60405180910390fd5b6106c86106b6610778565b8585846106c39190611009565b610780565b600191505092915050565b60006106e76106e0610778565b848461094b565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e790610f21565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610860576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085790610ea1565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161093e9190610f61565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b290610f01565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2290610e81565b60405180910390fd5b610a36838383610bca565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610abc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab390610ec1565b60405180910390fd5b8181610ac89190611009565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b589190610fb3565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610bbc9190610f61565b60405180910390a350505050565b505050565b600081359050610bde8161138f565b92915050565b600081359050610bf3816113a6565b92915050565b600060208284031215610c0b57600080fd5b6000610c1984828501610bcf565b91505092915050565b60008060408385031215610c3557600080fd5b6000610c4385828601610bcf565b9250506020610c5485828601610bcf565b9150509250929050565b600080600060608486031215610c7357600080fd5b6000610c8186828701610bcf565b9350506020610c9286828701610bcf565b9250506040610ca386828701610be4565b9150509250925092565b60008060408385031215610cc057600080fd5b6000610cce85828601610bcf565b9250506020610cdf85828601610be4565b9150509250929050565b610cf28161104f565b82525050565b6000610d0382610f97565b610d0d8185610fa2565b9350610d1d818560208601611092565b610d2681611155565b840191505092915050565b6000610d3e602383610fa2565b9150610d4982611166565b604082019050919050565b6000610d61602283610fa2565b9150610d6c826111b5565b604082019050919050565b6000610d84602683610fa2565b9150610d8f82611204565b604082019050919050565b6000610da7602883610fa2565b9150610db282611253565b604082019050919050565b6000610dca602583610fa2565b9150610dd5826112a2565b604082019050919050565b6000610ded602483610fa2565b9150610df8826112f1565b604082019050919050565b6000610e10602583610fa2565b9150610e1b82611340565b604082019050919050565b610e2f8161107b565b82525050565b610e3e81611085565b82525050565b6000602082019050610e596000830184610ce9565b92915050565b60006020820190508181036000830152610e798184610cf8565b905092915050565b60006020820190508181036000830152610e9a81610d31565b9050919050565b60006020820190508181036000830152610eba81610d54565b9050919050565b60006020820190508181036000830152610eda81610d77565b9050919050565b60006020820190508181036000830152610efa81610d9a565b9050919050565b60006020820190508181036000830152610f1a81610dbd565b9050919050565b60006020820190508181036000830152610f3a81610de0565b9050919050565b60006020820190508181036000830152610f5a81610e03565b9050919050565b6000602082019050610f766000830184610e26565b92915050565b6000602082019050610f916000830184610e35565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610fbe8261107b565b9150610fc98361107b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ffe57610ffd6110f7565b5b828201905092915050565b60006110148261107b565b915061101f8361107b565b925082821015611032576110316110f7565b5b828203905092915050565b60006110488261105b565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156110b0578082015181840152602081019050611095565b838111156110bf576000848401525b50505050565b600060028204905060018216806110dd57607f821691505b602082108114156110f1576110f0611126565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6113988161103d565b81146113a357600080fd5b50565b6113af8161107b565b81146113ba57600080fd5b5056fea264697066735822122023a65c90ec9579d7f016330a2083ff6175b7bae9891733e84fd8fa31d00b444c64736f6c63430008040033a26469706673582212207becc043dfcfa6ac711827510d3368d6f3b2a634622aedb2d6d422bf46b1ff6464736f6c63430008040033",
}

// SolidityABI is the input ABI used to generate the binding from.
// Deprecated: Use SolidityMetaData.ABI instead.
var SolidityABI = SolidityMetaData.ABI

// SolidityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SolidityMetaData.Bin instead.
var SolidityBin = SolidityMetaData.Bin

// DeploySolidity deploys a new Ethereum contract, binding an instance of Solidity to it.
func DeploySolidity(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Solidity, error) {
	parsed, err := SolidityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SolidityBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Solidity{SolidityCaller: SolidityCaller{contract: contract}, SolidityTransactor: SolidityTransactor{contract: contract}, SolidityFilterer: SolidityFilterer{contract: contract}}, nil
}

// Solidity is an auto generated Go binding around an Ethereum contract.
type Solidity struct {
	SolidityCaller     // Read-only binding to the contract
	SolidityTransactor // Write-only binding to the contract
	SolidityFilterer   // Log filterer for contract events
}

// SolidityCaller is an auto generated read-only Go binding around an Ethereum contract.
type SolidityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SolidityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SolidityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SolidityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SolidityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SoliditySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SoliditySession struct {
	Contract     *Solidity         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SolidityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SolidityCallerSession struct {
	Contract *SolidityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// SolidityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SolidityTransactorSession struct {
	Contract     *SolidityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SolidityRaw is an auto generated low-level Go binding around an Ethereum contract.
type SolidityRaw struct {
	Contract *Solidity // Generic contract binding to access the raw methods on
}

// SolidityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SolidityCallerRaw struct {
	Contract *SolidityCaller // Generic read-only contract binding to access the raw methods on
}

// SolidityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SolidityTransactorRaw struct {
	Contract *SolidityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSolidity creates a new instance of Solidity, bound to a specific deployed contract.
func NewSolidity(address common.Address, backend bind.ContractBackend) (*Solidity, error) {
	contract, err := bindSolidity(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Solidity{SolidityCaller: SolidityCaller{contract: contract}, SolidityTransactor: SolidityTransactor{contract: contract}, SolidityFilterer: SolidityFilterer{contract: contract}}, nil
}

// NewSolidityCaller creates a new read-only instance of Solidity, bound to a specific deployed contract.
func NewSolidityCaller(address common.Address, caller bind.ContractCaller) (*SolidityCaller, error) {
	contract, err := bindSolidity(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SolidityCaller{contract: contract}, nil
}

// NewSolidityTransactor creates a new write-only instance of Solidity, bound to a specific deployed contract.
func NewSolidityTransactor(address common.Address, transactor bind.ContractTransactor) (*SolidityTransactor, error) {
	contract, err := bindSolidity(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SolidityTransactor{contract: contract}, nil
}

// NewSolidityFilterer creates a new log filterer instance of Solidity, bound to a specific deployed contract.
func NewSolidityFilterer(address common.Address, filterer bind.ContractFilterer) (*SolidityFilterer, error) {
	contract, err := bindSolidity(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SolidityFilterer{contract: contract}, nil
}

// bindSolidity binds a generic wrapper to an already deployed contract.
func bindSolidity(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SolidityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Solidity *SolidityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Solidity.Contract.SolidityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Solidity *SolidityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Solidity.Contract.SolidityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Solidity *SolidityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Solidity.Contract.SolidityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Solidity *SolidityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Solidity.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Solidity *SolidityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Solidity.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Solidity *SolidityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Solidity.Contract.contract.Transact(opts, method, params...)
}

// GetOwnershipExpiryTimestamp is a free data retrieval call binding the contract method 0x1ee7a108.
//
// Solidity: function getOwnershipExpiryTimestamp() view returns(uint256)
func (_Solidity *SolidityCaller) GetOwnershipExpiryTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Solidity.contract.Call(opts, &out, "getOwnershipExpiryTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetOwnershipExpiryTimestamp is a free data retrieval call binding the contract method 0x1ee7a108.
//
// Solidity: function getOwnershipExpiryTimestamp() view returns(uint256)
func (_Solidity *SoliditySession) GetOwnershipExpiryTimestamp() (*big.Int, error) {
	return _Solidity.Contract.GetOwnershipExpiryTimestamp(&_Solidity.CallOpts)
}

// GetOwnershipExpiryTimestamp is a free data retrieval call binding the contract method 0x1ee7a108.
//
// Solidity: function getOwnershipExpiryTimestamp() view returns(uint256)
func (_Solidity *SolidityCallerSession) GetOwnershipExpiryTimestamp() (*big.Int, error) {
	return _Solidity.Contract.GetOwnershipExpiryTimestamp(&_Solidity.CallOpts)
}

// IsOwnershipExpired is a free data retrieval call binding the contract method 0x5afe97bb.
//
// Solidity: function isOwnershipExpired() view returns(bool)
func (_Solidity *SolidityCaller) IsOwnershipExpired(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Solidity.contract.Call(opts, &out, "isOwnershipExpired")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOwnershipExpired is a free data retrieval call binding the contract method 0x5afe97bb.
//
// Solidity: function isOwnershipExpired() view returns(bool)
func (_Solidity *SoliditySession) IsOwnershipExpired() (bool, error) {
	return _Solidity.Contract.IsOwnershipExpired(&_Solidity.CallOpts)
}

// IsOwnershipExpired is a free data retrieval call binding the contract method 0x5afe97bb.
//
// Solidity: function isOwnershipExpired() view returns(bool)
func (_Solidity *SolidityCallerSession) IsOwnershipExpired() (bool, error) {
	return _Solidity.Contract.IsOwnershipExpired(&_Solidity.CallOpts)
}

// LastBatchNonce is a free data retrieval call binding the contract method 0x011b2174.
//
// Solidity: function lastBatchNonce(address _erc20Address) view returns(uint256)
func (_Solidity *SolidityCaller) LastBatchNonce(opts *bind.CallOpts, _erc20Address common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Solidity.contract.Call(opts, &out, "lastBatchNonce", _erc20Address)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastBatchNonce is a free data retrieval call binding the contract method 0x011b2174.
//
// Solidity: function lastBatchNonce(address _erc20Address) view returns(uint256)
func (_Solidity *SoliditySession) LastBatchNonce(_erc20Address common.Address) (*big.Int, error) {
	return _Solidity.Contract.LastBatchNonce(&_Solidity.CallOpts, _erc20Address)
}

// LastBatchNonce is a free data retrieval call binding the contract method 0x011b2174.
//
// Solidity: function lastBatchNonce(address _erc20Address) view returns(uint256)
func (_Solidity *SolidityCallerSession) LastBatchNonce(_erc20Address common.Address) (*big.Int, error) {
	return _Solidity.Contract.LastBatchNonce(&_Solidity.CallOpts, _erc20Address)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Solidity *SolidityCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Solidity.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Solidity *SoliditySession) Owner() (common.Address, error) {
	return _Solidity.Contract.Owner(&_Solidity.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Solidity *SolidityCallerSession) Owner() (common.Address, error) {
	return _Solidity.Contract.Owner(&_Solidity.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Solidity *SolidityCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Solidity.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Solidity *SoliditySession) Paused() (bool, error) {
	return _Solidity.Contract.Paused(&_Solidity.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Solidity *SolidityCallerSession) Paused() (bool, error) {
	return _Solidity.Contract.Paused(&_Solidity.CallOpts)
}

// StateInvalidationMapping is a free data retrieval call binding the contract method 0x7dfb6f86.
//
// Solidity: function state_invalidationMapping(bytes32 ) view returns(uint256)
func (_Solidity *SolidityCaller) StateInvalidationMapping(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Solidity.contract.Call(opts, &out, "state_invalidationMapping", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateInvalidationMapping is a free data retrieval call binding the contract method 0x7dfb6f86.
//
// Solidity: function state_invalidationMapping(bytes32 ) view returns(uint256)
func (_Solidity *SoliditySession) StateInvalidationMapping(arg0 [32]byte) (*big.Int, error) {
	return _Solidity.Contract.StateInvalidationMapping(&_Solidity.CallOpts, arg0)
}

// StateInvalidationMapping is a free data retrieval call binding the contract method 0x7dfb6f86.
//
// Solidity: function state_invalidationMapping(bytes32 ) view returns(uint256)
func (_Solidity *SolidityCallerSession) StateInvalidationMapping(arg0 [32]byte) (*big.Int, error) {
	return _Solidity.Contract.StateInvalidationMapping(&_Solidity.CallOpts, arg0)
}

// StateLastBatchNonces is a free data retrieval call binding the contract method 0xdf97174b.
//
// Solidity: function state_lastBatchNonces(address ) view returns(uint256)
func (_Solidity *SolidityCaller) StateLastBatchNonces(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Solidity.contract.Call(opts, &out, "state_lastBatchNonces", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateLastBatchNonces is a free data retrieval call binding the contract method 0xdf97174b.
//
// Solidity: function state_lastBatchNonces(address ) view returns(uint256)
func (_Solidity *SoliditySession) StateLastBatchNonces(arg0 common.Address) (*big.Int, error) {
	return _Solidity.Contract.StateLastBatchNonces(&_Solidity.CallOpts, arg0)
}

// StateLastBatchNonces is a free data retrieval call binding the contract method 0xdf97174b.
//
// Solidity: function state_lastBatchNonces(address ) view returns(uint256)
func (_Solidity *SolidityCallerSession) StateLastBatchNonces(arg0 common.Address) (*big.Int, error) {
	return _Solidity.Contract.StateLastBatchNonces(&_Solidity.CallOpts, arg0)
}

// StateLastEventNonce is a free data retrieval call binding the contract method 0x73b20547.
//
// Solidity: function state_lastEventNonce() view returns(uint256)
func (_Solidity *SolidityCaller) StateLastEventNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Solidity.contract.Call(opts, &out, "state_lastEventNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateLastEventNonce is a free data retrieval call binding the contract method 0x73b20547.
//
// Solidity: function state_lastEventNonce() view returns(uint256)
func (_Solidity *SoliditySession) StateLastEventNonce() (*big.Int, error) {
	return _Solidity.Contract.StateLastEventNonce(&_Solidity.CallOpts)
}

// StateLastEventNonce is a free data retrieval call binding the contract method 0x73b20547.
//
// Solidity: function state_lastEventNonce() view returns(uint256)
func (_Solidity *SolidityCallerSession) StateLastEventNonce() (*big.Int, error) {
	return _Solidity.Contract.StateLastEventNonce(&_Solidity.CallOpts)
}

// StateLastValsetCheckpoint is a free data retrieval call binding the contract method 0xf2b53307.
//
// Solidity: function state_lastValsetCheckpoint() view returns(bytes32)
func (_Solidity *SolidityCaller) StateLastValsetCheckpoint(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Solidity.contract.Call(opts, &out, "state_lastValsetCheckpoint")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StateLastValsetCheckpoint is a free data retrieval call binding the contract method 0xf2b53307.
//
// Solidity: function state_lastValsetCheckpoint() view returns(bytes32)
func (_Solidity *SoliditySession) StateLastValsetCheckpoint() ([32]byte, error) {
	return _Solidity.Contract.StateLastValsetCheckpoint(&_Solidity.CallOpts)
}

// StateLastValsetCheckpoint is a free data retrieval call binding the contract method 0xf2b53307.
//
// Solidity: function state_lastValsetCheckpoint() view returns(bytes32)
func (_Solidity *SolidityCallerSession) StateLastValsetCheckpoint() ([32]byte, error) {
	return _Solidity.Contract.StateLastValsetCheckpoint(&_Solidity.CallOpts)
}

// StateLastValsetNonce is a free data retrieval call binding the contract method 0xb56561fe.
//
// Solidity: function state_lastValsetNonce() view returns(uint256)
func (_Solidity *SolidityCaller) StateLastValsetNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Solidity.contract.Call(opts, &out, "state_lastValsetNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateLastValsetNonce is a free data retrieval call binding the contract method 0xb56561fe.
//
// Solidity: function state_lastValsetNonce() view returns(uint256)
func (_Solidity *SoliditySession) StateLastValsetNonce() (*big.Int, error) {
	return _Solidity.Contract.StateLastValsetNonce(&_Solidity.CallOpts)
}

// StateLastValsetNonce is a free data retrieval call binding the contract method 0xb56561fe.
//
// Solidity: function state_lastValsetNonce() view returns(uint256)
func (_Solidity *SolidityCallerSession) StateLastValsetNonce() (*big.Int, error) {
	return _Solidity.Contract.StateLastValsetNonce(&_Solidity.CallOpts)
}

// StatePeggyId is a free data retrieval call binding the contract method 0x69dd3908.
//
// Solidity: function state_peggyId() view returns(bytes32)
func (_Solidity *SolidityCaller) StatePeggyId(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Solidity.contract.Call(opts, &out, "state_peggyId")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StatePeggyId is a free data retrieval call binding the contract method 0x69dd3908.
//
// Solidity: function state_peggyId() view returns(bytes32)
func (_Solidity *SoliditySession) StatePeggyId() ([32]byte, error) {
	return _Solidity.Contract.StatePeggyId(&_Solidity.CallOpts)
}

// StatePeggyId is a free data retrieval call binding the contract method 0x69dd3908.
//
// Solidity: function state_peggyId() view returns(bytes32)
func (_Solidity *SolidityCallerSession) StatePeggyId() ([32]byte, error) {
	return _Solidity.Contract.StatePeggyId(&_Solidity.CallOpts)
}

// StatePowerThreshold is a free data retrieval call binding the contract method 0xe5a2b5d2.
//
// Solidity: function state_powerThreshold() view returns(uint256)
func (_Solidity *SolidityCaller) StatePowerThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Solidity.contract.Call(opts, &out, "state_powerThreshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StatePowerThreshold is a free data retrieval call binding the contract method 0xe5a2b5d2.
//
// Solidity: function state_powerThreshold() view returns(uint256)
func (_Solidity *SoliditySession) StatePowerThreshold() (*big.Int, error) {
	return _Solidity.Contract.StatePowerThreshold(&_Solidity.CallOpts)
}

// StatePowerThreshold is a free data retrieval call binding the contract method 0xe5a2b5d2.
//
// Solidity: function state_powerThreshold() view returns(uint256)
func (_Solidity *SolidityCallerSession) StatePowerThreshold() (*big.Int, error) {
	return _Solidity.Contract.StatePowerThreshold(&_Solidity.CallOpts)
}

// DeployERC20 is a paid mutator transaction binding the contract method 0xf7955637.
//
// Solidity: function deployERC20(string _cosmosDenom, string _name, string _symbol, uint8 _decimals) returns()
func (_Solidity *SolidityTransactor) DeployERC20(opts *bind.TransactOpts, _cosmosDenom string, _name string, _symbol string, _decimals uint8) (*types.Transaction, error) {
	return _Solidity.contract.Transact(opts, "deployERC20", _cosmosDenom, _name, _symbol, _decimals)
}

// DeployERC20 is a paid mutator transaction binding the contract method 0xf7955637.
//
// Solidity: function deployERC20(string _cosmosDenom, string _name, string _symbol, uint8 _decimals) returns()
func (_Solidity *SoliditySession) DeployERC20(_cosmosDenom string, _name string, _symbol string, _decimals uint8) (*types.Transaction, error) {
	return _Solidity.Contract.DeployERC20(&_Solidity.TransactOpts, _cosmosDenom, _name, _symbol, _decimals)
}

// DeployERC20 is a paid mutator transaction binding the contract method 0xf7955637.
//
// Solidity: function deployERC20(string _cosmosDenom, string _name, string _symbol, uint8 _decimals) returns()
func (_Solidity *SolidityTransactorSession) DeployERC20(_cosmosDenom string, _name string, _symbol string, _decimals uint8) (*types.Transaction, error) {
	return _Solidity.Contract.DeployERC20(&_Solidity.TransactOpts, _cosmosDenom, _name, _symbol, _decimals)
}

// EmergencyPause is a paid mutator transaction binding the contract method 0x51858e27.
//
// Solidity: function emergencyPause() returns()
func (_Solidity *SolidityTransactor) EmergencyPause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Solidity.contract.Transact(opts, "emergencyPause")
}

// EmergencyPause is a paid mutator transaction binding the contract method 0x51858e27.
//
// Solidity: function emergencyPause() returns()
func (_Solidity *SoliditySession) EmergencyPause() (*types.Transaction, error) {
	return _Solidity.Contract.EmergencyPause(&_Solidity.TransactOpts)
}

// EmergencyPause is a paid mutator transaction binding the contract method 0x51858e27.
//
// Solidity: function emergencyPause() returns()
func (_Solidity *SolidityTransactorSession) EmergencyPause() (*types.Transaction, error) {
	return _Solidity.Contract.EmergencyPause(&_Solidity.TransactOpts)
}

// EmergencyUnpause is a paid mutator transaction binding the contract method 0x4a4e3bd5.
//
// Solidity: function emergencyUnpause() returns()
func (_Solidity *SolidityTransactor) EmergencyUnpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Solidity.contract.Transact(opts, "emergencyUnpause")
}

// EmergencyUnpause is a paid mutator transaction binding the contract method 0x4a4e3bd5.
//
// Solidity: function emergencyUnpause() returns()
func (_Solidity *SoliditySession) EmergencyUnpause() (*types.Transaction, error) {
	return _Solidity.Contract.EmergencyUnpause(&_Solidity.TransactOpts)
}

// EmergencyUnpause is a paid mutator transaction binding the contract method 0x4a4e3bd5.
//
// Solidity: function emergencyUnpause() returns()
func (_Solidity *SolidityTransactorSession) EmergencyUnpause() (*types.Transaction, error) {
	return _Solidity.Contract.EmergencyUnpause(&_Solidity.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc359a212.
//
// Solidity: function initialize(bytes32 _peggyId, uint256 _powerThreshold, address[] _validators, uint256[] _powers) returns()
func (_Solidity *SolidityTransactor) Initialize(opts *bind.TransactOpts, _peggyId [32]byte, _powerThreshold *big.Int, _validators []common.Address, _powers []*big.Int) (*types.Transaction, error) {
	return _Solidity.contract.Transact(opts, "initialize", _peggyId, _powerThreshold, _validators, _powers)
}

// Initialize is a paid mutator transaction binding the contract method 0xc359a212.
//
// Solidity: function initialize(bytes32 _peggyId, uint256 _powerThreshold, address[] _validators, uint256[] _powers) returns()
func (_Solidity *SoliditySession) Initialize(_peggyId [32]byte, _powerThreshold *big.Int, _validators []common.Address, _powers []*big.Int) (*types.Transaction, error) {
	return _Solidity.Contract.Initialize(&_Solidity.TransactOpts, _peggyId, _powerThreshold, _validators, _powers)
}

// Initialize is a paid mutator transaction binding the contract method 0xc359a212.
//
// Solidity: function initialize(bytes32 _peggyId, uint256 _powerThreshold, address[] _validators, uint256[] _powers) returns()
func (_Solidity *SolidityTransactorSession) Initialize(_peggyId [32]byte, _powerThreshold *big.Int, _validators []common.Address, _powers []*big.Int) (*types.Transaction, error) {
	return _Solidity.Contract.Initialize(&_Solidity.TransactOpts, _peggyId, _powerThreshold, _validators, _powers)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Solidity *SolidityTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Solidity.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Solidity *SoliditySession) RenounceOwnership() (*types.Transaction, error) {
	return _Solidity.Contract.RenounceOwnership(&_Solidity.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Solidity *SolidityTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Solidity.Contract.RenounceOwnership(&_Solidity.TransactOpts)
}

// RenounceOwnershipAfterExpiry is a paid mutator transaction binding the contract method 0x8c64865f.
//
// Solidity: function renounceOwnershipAfterExpiry() returns()
func (_Solidity *SolidityTransactor) RenounceOwnershipAfterExpiry(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Solidity.contract.Transact(opts, "renounceOwnershipAfterExpiry")
}

// RenounceOwnershipAfterExpiry is a paid mutator transaction binding the contract method 0x8c64865f.
//
// Solidity: function renounceOwnershipAfterExpiry() returns()
func (_Solidity *SoliditySession) RenounceOwnershipAfterExpiry() (*types.Transaction, error) {
	return _Solidity.Contract.RenounceOwnershipAfterExpiry(&_Solidity.TransactOpts)
}

// RenounceOwnershipAfterExpiry is a paid mutator transaction binding the contract method 0x8c64865f.
//
// Solidity: function renounceOwnershipAfterExpiry() returns()
func (_Solidity *SolidityTransactorSession) RenounceOwnershipAfterExpiry() (*types.Transaction, error) {
	return _Solidity.Contract.RenounceOwnershipAfterExpiry(&_Solidity.TransactOpts)
}

// SendToCosmos is a paid mutator transaction binding the contract method 0x1ffbe7f9.
//
// Solidity: function sendToCosmos(address _tokenContract, bytes32 _destination, uint256 _amount) returns()
func (_Solidity *SolidityTransactor) SendToCosmos(opts *bind.TransactOpts, _tokenContract common.Address, _destination [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _Solidity.contract.Transact(opts, "sendToCosmos", _tokenContract, _destination, _amount)
}

// SendToCosmos is a paid mutator transaction binding the contract method 0x1ffbe7f9.
//
// Solidity: function sendToCosmos(address _tokenContract, bytes32 _destination, uint256 _amount) returns()
func (_Solidity *SoliditySession) SendToCosmos(_tokenContract common.Address, _destination [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _Solidity.Contract.SendToCosmos(&_Solidity.TransactOpts, _tokenContract, _destination, _amount)
}

// SendToCosmos is a paid mutator transaction binding the contract method 0x1ffbe7f9.
//
// Solidity: function sendToCosmos(address _tokenContract, bytes32 _destination, uint256 _amount) returns()
func (_Solidity *SolidityTransactorSession) SendToCosmos(_tokenContract common.Address, _destination [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _Solidity.Contract.SendToCosmos(&_Solidity.TransactOpts, _tokenContract, _destination, _amount)
}

// SubmitBatch is a paid mutator transaction binding the contract method 0x81747418.
//
// Solidity: function submitBatch((address[],uint256[],uint256,uint256,address) _currentValset, uint8[] _v, bytes32[] _r, bytes32[] _s, uint256[] _amounts, address[] _destinations, uint256[] _fees, uint256 _batchNonce, address _tokenContract, uint256 _batchTimeout) returns()
func (_Solidity *SolidityTransactor) SubmitBatch(opts *bind.TransactOpts, _currentValset ValsetArgs, _v []uint8, _r [][32]byte, _s [][32]byte, _amounts []*big.Int, _destinations []common.Address, _fees []*big.Int, _batchNonce *big.Int, _tokenContract common.Address, _batchTimeout *big.Int) (*types.Transaction, error) {
	return _Solidity.contract.Transact(opts, "submitBatch", _currentValset, _v, _r, _s, _amounts, _destinations, _fees, _batchNonce, _tokenContract, _batchTimeout)
}

// SubmitBatch is a paid mutator transaction binding the contract method 0x81747418.
//
// Solidity: function submitBatch((address[],uint256[],uint256,uint256,address) _currentValset, uint8[] _v, bytes32[] _r, bytes32[] _s, uint256[] _amounts, address[] _destinations, uint256[] _fees, uint256 _batchNonce, address _tokenContract, uint256 _batchTimeout) returns()
func (_Solidity *SoliditySession) SubmitBatch(_currentValset ValsetArgs, _v []uint8, _r [][32]byte, _s [][32]byte, _amounts []*big.Int, _destinations []common.Address, _fees []*big.Int, _batchNonce *big.Int, _tokenContract common.Address, _batchTimeout *big.Int) (*types.Transaction, error) {
	return _Solidity.Contract.SubmitBatch(&_Solidity.TransactOpts, _currentValset, _v, _r, _s, _amounts, _destinations, _fees, _batchNonce, _tokenContract, _batchTimeout)
}

// SubmitBatch is a paid mutator transaction binding the contract method 0x81747418.
//
// Solidity: function submitBatch((address[],uint256[],uint256,uint256,address) _currentValset, uint8[] _v, bytes32[] _r, bytes32[] _s, uint256[] _amounts, address[] _destinations, uint256[] _fees, uint256 _batchNonce, address _tokenContract, uint256 _batchTimeout) returns()
func (_Solidity *SolidityTransactorSession) SubmitBatch(_currentValset ValsetArgs, _v []uint8, _r [][32]byte, _s [][32]byte, _amounts []*big.Int, _destinations []common.Address, _fees []*big.Int, _batchNonce *big.Int, _tokenContract common.Address, _batchTimeout *big.Int) (*types.Transaction, error) {
	return _Solidity.Contract.SubmitBatch(&_Solidity.TransactOpts, _currentValset, _v, _r, _s, _amounts, _destinations, _fees, _batchNonce, _tokenContract, _batchTimeout)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Solidity *SolidityTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Solidity.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Solidity *SoliditySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Solidity.Contract.TransferOwnership(&_Solidity.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Solidity *SolidityTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Solidity.Contract.TransferOwnership(&_Solidity.TransactOpts, newOwner)
}

// UpdateValset is a paid mutator transaction binding the contract method 0xa5352f5b.
//
// Solidity: function updateValset((address[],uint256[],uint256,uint256,address) _newValset, (address[],uint256[],uint256,uint256,address) _currentValset, uint8[] _v, bytes32[] _r, bytes32[] _s) returns()
func (_Solidity *SolidityTransactor) UpdateValset(opts *bind.TransactOpts, _newValset ValsetArgs, _currentValset ValsetArgs, _v []uint8, _r [][32]byte, _s [][32]byte) (*types.Transaction, error) {
	return _Solidity.contract.Transact(opts, "updateValset", _newValset, _currentValset, _v, _r, _s)
}

// UpdateValset is a paid mutator transaction binding the contract method 0xa5352f5b.
//
// Solidity: function updateValset((address[],uint256[],uint256,uint256,address) _newValset, (address[],uint256[],uint256,uint256,address) _currentValset, uint8[] _v, bytes32[] _r, bytes32[] _s) returns()
func (_Solidity *SoliditySession) UpdateValset(_newValset ValsetArgs, _currentValset ValsetArgs, _v []uint8, _r [][32]byte, _s [][32]byte) (*types.Transaction, error) {
	return _Solidity.Contract.UpdateValset(&_Solidity.TransactOpts, _newValset, _currentValset, _v, _r, _s)
}

// UpdateValset is a paid mutator transaction binding the contract method 0xa5352f5b.
//
// Solidity: function updateValset((address[],uint256[],uint256,uint256,address) _newValset, (address[],uint256[],uint256,uint256,address) _currentValset, uint8[] _v, bytes32[] _r, bytes32[] _s) returns()
func (_Solidity *SolidityTransactorSession) UpdateValset(_newValset ValsetArgs, _currentValset ValsetArgs, _v []uint8, _r [][32]byte, _s [][32]byte) (*types.Transaction, error) {
	return _Solidity.Contract.UpdateValset(&_Solidity.TransactOpts, _newValset, _currentValset, _v, _r, _s)
}

// SolidityERC20DeployedEventIterator is returned from FilterERC20DeployedEvent and is used to iterate over the raw logs and unpacked data for ERC20DeployedEvent events raised by the Solidity contract.
type SolidityERC20DeployedEventIterator struct {
	Event *SolidityERC20DeployedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SolidityERC20DeployedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SolidityERC20DeployedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SolidityERC20DeployedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SolidityERC20DeployedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SolidityERC20DeployedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SolidityERC20DeployedEvent represents a ERC20DeployedEvent event raised by the Solidity contract.
type SolidityERC20DeployedEvent struct {
	CosmosDenom   string
	TokenContract common.Address
	Name          string
	Symbol        string
	Decimals      uint8
	EventNonce    *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterERC20DeployedEvent is a free log retrieval operation binding the contract event 0x82fe3a4fa49c6382d0c085746698ddbbafe6c2bf61285b19410644b5b26287c7.
//
// Solidity: event ERC20DeployedEvent(string _cosmosDenom, address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce)
func (_Solidity *SolidityFilterer) FilterERC20DeployedEvent(opts *bind.FilterOpts, _tokenContract []common.Address) (*SolidityERC20DeployedEventIterator, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}

	logs, sub, err := _Solidity.contract.FilterLogs(opts, "ERC20DeployedEvent", _tokenContractRule)
	if err != nil {
		return nil, err
	}
	return &SolidityERC20DeployedEventIterator{contract: _Solidity.contract, event: "ERC20DeployedEvent", logs: logs, sub: sub}, nil
}

// WatchERC20DeployedEvent is a free log subscription operation binding the contract event 0x82fe3a4fa49c6382d0c085746698ddbbafe6c2bf61285b19410644b5b26287c7.
//
// Solidity: event ERC20DeployedEvent(string _cosmosDenom, address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce)
func (_Solidity *SolidityFilterer) WatchERC20DeployedEvent(opts *bind.WatchOpts, sink chan<- *SolidityERC20DeployedEvent, _tokenContract []common.Address) (event.Subscription, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}

	logs, sub, err := _Solidity.contract.WatchLogs(opts, "ERC20DeployedEvent", _tokenContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SolidityERC20DeployedEvent)
				if err := _Solidity.contract.UnpackLog(event, "ERC20DeployedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseERC20DeployedEvent is a log parse operation binding the contract event 0x82fe3a4fa49c6382d0c085746698ddbbafe6c2bf61285b19410644b5b26287c7.
//
// Solidity: event ERC20DeployedEvent(string _cosmosDenom, address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce)
func (_Solidity *SolidityFilterer) ParseERC20DeployedEvent(log types.Log) (*SolidityERC20DeployedEvent, error) {
	event := new(SolidityERC20DeployedEvent)
	if err := _Solidity.contract.UnpackLog(event, "ERC20DeployedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SolidityOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Solidity contract.
type SolidityOwnershipTransferredIterator struct {
	Event *SolidityOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SolidityOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SolidityOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SolidityOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SolidityOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SolidityOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SolidityOwnershipTransferred represents a OwnershipTransferred event raised by the Solidity contract.
type SolidityOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Solidity *SolidityFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SolidityOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Solidity.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SolidityOwnershipTransferredIterator{contract: _Solidity.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Solidity *SolidityFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SolidityOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Solidity.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SolidityOwnershipTransferred)
				if err := _Solidity.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Solidity *SolidityFilterer) ParseOwnershipTransferred(log types.Log) (*SolidityOwnershipTransferred, error) {
	event := new(SolidityOwnershipTransferred)
	if err := _Solidity.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SolidityPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Solidity contract.
type SolidityPausedIterator struct {
	Event *SolidityPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SolidityPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SolidityPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SolidityPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SolidityPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SolidityPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SolidityPaused represents a Paused event raised by the Solidity contract.
type SolidityPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Solidity *SolidityFilterer) FilterPaused(opts *bind.FilterOpts) (*SolidityPausedIterator, error) {

	logs, sub, err := _Solidity.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &SolidityPausedIterator{contract: _Solidity.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Solidity *SolidityFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *SolidityPaused) (event.Subscription, error) {

	logs, sub, err := _Solidity.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SolidityPaused)
				if err := _Solidity.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Solidity *SolidityFilterer) ParsePaused(log types.Log) (*SolidityPaused, error) {
	event := new(SolidityPaused)
	if err := _Solidity.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SoliditySendToCosmosEventIterator is returned from FilterSendToCosmosEvent and is used to iterate over the raw logs and unpacked data for SendToCosmosEvent events raised by the Solidity contract.
type SoliditySendToCosmosEventIterator struct {
	Event *SoliditySendToCosmosEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SoliditySendToCosmosEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SoliditySendToCosmosEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SoliditySendToCosmosEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SoliditySendToCosmosEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SoliditySendToCosmosEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SoliditySendToCosmosEvent represents a SendToCosmosEvent event raised by the Solidity contract.
type SoliditySendToCosmosEvent struct {
	TokenContract common.Address
	Sender        common.Address
	Destination   [32]byte
	Amount        *big.Int
	EventNonce    *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSendToCosmosEvent is a free log retrieval operation binding the contract event 0xd7767894d73c589daeca9643f445f03d7be61aad2950c117e7cbff4176fca7e4.
//
// Solidity: event SendToCosmosEvent(address indexed _tokenContract, address indexed _sender, bytes32 indexed _destination, uint256 _amount, uint256 _eventNonce)
func (_Solidity *SolidityFilterer) FilterSendToCosmosEvent(opts *bind.FilterOpts, _tokenContract []common.Address, _sender []common.Address, _destination [][32]byte) (*SoliditySendToCosmosEventIterator, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}
	var _senderRule []interface{}
	for _, _senderItem := range _sender {
		_senderRule = append(_senderRule, _senderItem)
	}
	var _destinationRule []interface{}
	for _, _destinationItem := range _destination {
		_destinationRule = append(_destinationRule, _destinationItem)
	}

	logs, sub, err := _Solidity.contract.FilterLogs(opts, "SendToCosmosEvent", _tokenContractRule, _senderRule, _destinationRule)
	if err != nil {
		return nil, err
	}
	return &SoliditySendToCosmosEventIterator{contract: _Solidity.contract, event: "SendToCosmosEvent", logs: logs, sub: sub}, nil
}

// WatchSendToCosmosEvent is a free log subscription operation binding the contract event 0xd7767894d73c589daeca9643f445f03d7be61aad2950c117e7cbff4176fca7e4.
//
// Solidity: event SendToCosmosEvent(address indexed _tokenContract, address indexed _sender, bytes32 indexed _destination, uint256 _amount, uint256 _eventNonce)
func (_Solidity *SolidityFilterer) WatchSendToCosmosEvent(opts *bind.WatchOpts, sink chan<- *SoliditySendToCosmosEvent, _tokenContract []common.Address, _sender []common.Address, _destination [][32]byte) (event.Subscription, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}
	var _senderRule []interface{}
	for _, _senderItem := range _sender {
		_senderRule = append(_senderRule, _senderItem)
	}
	var _destinationRule []interface{}
	for _, _destinationItem := range _destination {
		_destinationRule = append(_destinationRule, _destinationItem)
	}

	logs, sub, err := _Solidity.contract.WatchLogs(opts, "SendToCosmosEvent", _tokenContractRule, _senderRule, _destinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SoliditySendToCosmosEvent)
				if err := _Solidity.contract.UnpackLog(event, "SendToCosmosEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSendToCosmosEvent is a log parse operation binding the contract event 0xd7767894d73c589daeca9643f445f03d7be61aad2950c117e7cbff4176fca7e4.
//
// Solidity: event SendToCosmosEvent(address indexed _tokenContract, address indexed _sender, bytes32 indexed _destination, uint256 _amount, uint256 _eventNonce)
func (_Solidity *SolidityFilterer) ParseSendToCosmosEvent(log types.Log) (*SoliditySendToCosmosEvent, error) {
	event := new(SoliditySendToCosmosEvent)
	if err := _Solidity.contract.UnpackLog(event, "SendToCosmosEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SolidityTransactionBatchExecutedEventIterator is returned from FilterTransactionBatchExecutedEvent and is used to iterate over the raw logs and unpacked data for TransactionBatchExecutedEvent events raised by the Solidity contract.
type SolidityTransactionBatchExecutedEventIterator struct {
	Event *SolidityTransactionBatchExecutedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SolidityTransactionBatchExecutedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SolidityTransactionBatchExecutedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SolidityTransactionBatchExecutedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SolidityTransactionBatchExecutedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SolidityTransactionBatchExecutedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SolidityTransactionBatchExecutedEvent represents a TransactionBatchExecutedEvent event raised by the Solidity contract.
type SolidityTransactionBatchExecutedEvent struct {
	BatchNonce *big.Int
	Token      common.Address
	EventNonce *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTransactionBatchExecutedEvent is a free log retrieval operation binding the contract event 0x02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708.
//
// Solidity: event TransactionBatchExecutedEvent(uint256 indexed _batchNonce, address indexed _token, uint256 _eventNonce)
func (_Solidity *SolidityFilterer) FilterTransactionBatchExecutedEvent(opts *bind.FilterOpts, _batchNonce []*big.Int, _token []common.Address) (*SolidityTransactionBatchExecutedEventIterator, error) {

	var _batchNonceRule []interface{}
	for _, _batchNonceItem := range _batchNonce {
		_batchNonceRule = append(_batchNonceRule, _batchNonceItem)
	}
	var _tokenRule []interface{}
	for _, _tokenItem := range _token {
		_tokenRule = append(_tokenRule, _tokenItem)
	}

	logs, sub, err := _Solidity.contract.FilterLogs(opts, "TransactionBatchExecutedEvent", _batchNonceRule, _tokenRule)
	if err != nil {
		return nil, err
	}
	return &SolidityTransactionBatchExecutedEventIterator{contract: _Solidity.contract, event: "TransactionBatchExecutedEvent", logs: logs, sub: sub}, nil
}

// WatchTransactionBatchExecutedEvent is a free log subscription operation binding the contract event 0x02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708.
//
// Solidity: event TransactionBatchExecutedEvent(uint256 indexed _batchNonce, address indexed _token, uint256 _eventNonce)
func (_Solidity *SolidityFilterer) WatchTransactionBatchExecutedEvent(opts *bind.WatchOpts, sink chan<- *SolidityTransactionBatchExecutedEvent, _batchNonce []*big.Int, _token []common.Address) (event.Subscription, error) {

	var _batchNonceRule []interface{}
	for _, _batchNonceItem := range _batchNonce {
		_batchNonceRule = append(_batchNonceRule, _batchNonceItem)
	}
	var _tokenRule []interface{}
	for _, _tokenItem := range _token {
		_tokenRule = append(_tokenRule, _tokenItem)
	}

	logs, sub, err := _Solidity.contract.WatchLogs(opts, "TransactionBatchExecutedEvent", _batchNonceRule, _tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SolidityTransactionBatchExecutedEvent)
				if err := _Solidity.contract.UnpackLog(event, "TransactionBatchExecutedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransactionBatchExecutedEvent is a log parse operation binding the contract event 0x02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708.
//
// Solidity: event TransactionBatchExecutedEvent(uint256 indexed _batchNonce, address indexed _token, uint256 _eventNonce)
func (_Solidity *SolidityFilterer) ParseTransactionBatchExecutedEvent(log types.Log) (*SolidityTransactionBatchExecutedEvent, error) {
	event := new(SolidityTransactionBatchExecutedEvent)
	if err := _Solidity.contract.UnpackLog(event, "TransactionBatchExecutedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SolidityUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Solidity contract.
type SolidityUnpausedIterator struct {
	Event *SolidityUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SolidityUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SolidityUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SolidityUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SolidityUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SolidityUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SolidityUnpaused represents a Unpaused event raised by the Solidity contract.
type SolidityUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Solidity *SolidityFilterer) FilterUnpaused(opts *bind.FilterOpts) (*SolidityUnpausedIterator, error) {

	logs, sub, err := _Solidity.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &SolidityUnpausedIterator{contract: _Solidity.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Solidity *SolidityFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *SolidityUnpaused) (event.Subscription, error) {

	logs, sub, err := _Solidity.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SolidityUnpaused)
				if err := _Solidity.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Solidity *SolidityFilterer) ParseUnpaused(log types.Log) (*SolidityUnpaused, error) {
	event := new(SolidityUnpaused)
	if err := _Solidity.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SolidityValsetUpdatedEventIterator is returned from FilterValsetUpdatedEvent and is used to iterate over the raw logs and unpacked data for ValsetUpdatedEvent events raised by the Solidity contract.
type SolidityValsetUpdatedEventIterator struct {
	Event *SolidityValsetUpdatedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SolidityValsetUpdatedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SolidityValsetUpdatedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SolidityValsetUpdatedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SolidityValsetUpdatedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SolidityValsetUpdatedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SolidityValsetUpdatedEvent represents a ValsetUpdatedEvent event raised by the Solidity contract.
type SolidityValsetUpdatedEvent struct {
	NewValsetNonce *big.Int
	EventNonce     *big.Int
	RewardAmount   *big.Int
	RewardToken    common.Address
	Validators     []common.Address
	Powers         []*big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValsetUpdatedEvent is a free log retrieval operation binding the contract event 0x76d08978c024a4bf8cbb30c67fd78fcaa1827cbc533e4e175f36d07e64ccf96a.
//
// Solidity: event ValsetUpdatedEvent(uint256 indexed _newValsetNonce, uint256 _eventNonce, uint256 _rewardAmount, address _rewardToken, address[] _validators, uint256[] _powers)
func (_Solidity *SolidityFilterer) FilterValsetUpdatedEvent(opts *bind.FilterOpts, _newValsetNonce []*big.Int) (*SolidityValsetUpdatedEventIterator, error) {

	var _newValsetNonceRule []interface{}
	for _, _newValsetNonceItem := range _newValsetNonce {
		_newValsetNonceRule = append(_newValsetNonceRule, _newValsetNonceItem)
	}

	logs, sub, err := _Solidity.contract.FilterLogs(opts, "ValsetUpdatedEvent", _newValsetNonceRule)
	if err != nil {
		return nil, err
	}
	return &SolidityValsetUpdatedEventIterator{contract: _Solidity.contract, event: "ValsetUpdatedEvent", logs: logs, sub: sub}, nil
}

// WatchValsetUpdatedEvent is a free log subscription operation binding the contract event 0x76d08978c024a4bf8cbb30c67fd78fcaa1827cbc533e4e175f36d07e64ccf96a.
//
// Solidity: event ValsetUpdatedEvent(uint256 indexed _newValsetNonce, uint256 _eventNonce, uint256 _rewardAmount, address _rewardToken, address[] _validators, uint256[] _powers)
func (_Solidity *SolidityFilterer) WatchValsetUpdatedEvent(opts *bind.WatchOpts, sink chan<- *SolidityValsetUpdatedEvent, _newValsetNonce []*big.Int) (event.Subscription, error) {

	var _newValsetNonceRule []interface{}
	for _, _newValsetNonceItem := range _newValsetNonce {
		_newValsetNonceRule = append(_newValsetNonceRule, _newValsetNonceItem)
	}

	logs, sub, err := _Solidity.contract.WatchLogs(opts, "ValsetUpdatedEvent", _newValsetNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SolidityValsetUpdatedEvent)
				if err := _Solidity.contract.UnpackLog(event, "ValsetUpdatedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValsetUpdatedEvent is a log parse operation binding the contract event 0x76d08978c024a4bf8cbb30c67fd78fcaa1827cbc533e4e175f36d07e64ccf96a.
//
// Solidity: event ValsetUpdatedEvent(uint256 indexed _newValsetNonce, uint256 _eventNonce, uint256 _rewardAmount, address _rewardToken, address[] _validators, uint256[] _powers)
func (_Solidity *SolidityFilterer) ParseValsetUpdatedEvent(log types.Log) (*SolidityValsetUpdatedEvent, error) {
	event := new(SolidityValsetUpdatedEvent)
	if err := _Solidity.contract.UnpackLog(event, "ValsetUpdatedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
