syntax = "proto3";
package umeenetwork.umee.peggy.v1;

import "umee/peggy/v1/genesis.proto";
import "umee/peggy/v1/types.proto";
import "umee/peggy/v1/msgs.proto";
import "umee/peggy/v1/pool.proto";
import "umee/peggy/v1/batch.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/umee-network/umee/x/peggy/types";

// Query defines the gRPC querier service
service Query {
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/peggy/v1/params";
  }

  rpc CurrentValset(QueryCurrentValsetRequest) returns (QueryCurrentValsetResponse) {
    option (google.api.http).get = "/peggy/v1/valset/current";
  }

  rpc ValsetRequest(QueryValsetRequestRequest) returns (QueryValsetRequestResponse) {
    option (google.api.http).get = "/peggy/v1/valset";
  }

  rpc ValsetConfirm(QueryValsetConfirmRequest) returns (QueryValsetConfirmResponse) {
    option (google.api.http).get = "/peggy/v1/valset/confirm";
  }

  rpc ValsetConfirmsByNonce(QueryValsetConfirmsByNonceRequest) returns (QueryValsetConfirmsByNonceResponse) {
    option (google.api.http).get = "/peggy/v1/confirms/{nonce}";
  }

  rpc LastValsetRequests(QueryLastValsetRequestsRequest) returns (QueryLastValsetRequestsResponse) {
    option (google.api.http).get = "/peggy/v1/valset/requests";
  }

  rpc LastPendingValsetRequestByAddr(QueryLastPendingValsetRequestByAddrRequest)
      returns (QueryLastPendingValsetRequestByAddrResponse) {
    option (google.api.http).get = "/peggy/v1/valset/last";
  }

  rpc ERC20ToDenom(QueryERC20ToDenomRequest) returns (QueryERC20ToDenomResponse) {
    option (google.api.http).get = "/peggy/v1/cosmos_originated/erc20_to_denom";
  }

  rpc DenomToERC20(QueryDenomToERC20Request) returns (QueryDenomToERC20Response) {
    option (google.api.http).get = "/peggy/v1/cosmos_originated/denom_to_erc20";
  }

  rpc LastEventByAddr(QueryLastEventByAddrRequest) returns (QueryLastEventByAddrResponse) {
    option (google.api.http).get = "/peggy/v1/oracle/event/{address}";
  }

  rpc GetPendingSendToEth(QueryPendingSendToEth) returns (QueryPendingSendToEthResponse) {
    option (google.api.http).get = "/peggy/v1/pending_send_to_eth";
  }

  rpc BatchFees(QueryBatchFeeRequest) returns (QueryBatchFeeResponse) {
    option (google.api.http).get = "/peggy/v1/batchfees";
  }

  rpc OutgoingTxBatches(QueryOutgoingTxBatchesRequest) returns (QueryOutgoingTxBatchesResponse) {
    option (google.api.http).get = "/peggy/v1/batch/outgoingtx";
  }

  rpc LastPendingBatchRequestByAddr(QueryLastPendingBatchRequestByAddrRequest)
      returns (QueryLastPendingBatchRequestByAddrResponse) {
    option (google.api.http).get = "/peggy/v1/batch/last";
  }

  rpc BatchRequestByNonce(QueryBatchRequestByNonceRequest) returns (QueryBatchRequestByNonceResponse) {
    option (google.api.http).get = "/peggy/v1/batch";
  }

  rpc BatchConfirms(QueryBatchConfirmsRequest) returns (QueryBatchConfirmsResponse) {
    option (google.api.http).get = "/peggy/v1/batch/confirms";
  }

  rpc GetDelegateKeyByValidator(QueryDelegateKeysByValidatorAddress)
      returns (QueryDelegateKeysByValidatorAddressResponse) {
    option (google.api.http).get = "/peggy/v1/query_delegate_keys_by_validator";
  }

  rpc GetDelegateKeyByEth(QueryDelegateKeysByEthAddress) returns (QueryDelegateKeysByEthAddressResponse) {
    option (google.api.http).get = "/peggy/v1/query_delegate_keys_by_eth";
  }

  rpc GetDelegateKeyByOrchestrator(QueryDelegateKeysByOrchestratorAddress)
      returns (QueryDelegateKeysByOrchestratorAddressResponse) {
    option (google.api.http).get = "/peggy/v1/query_delegate_keys_by_orchestrator";
  }

  // Retrieves the entire peggy module's state
  rpc PeggyModuleState(QueryModuleStateRequest) returns (QueryModuleStateResponse) {
    option (google.api.http).get = "/peggy/v1/module_state";
  }
}

message QueryParamsRequest {}

message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryCurrentValsetRequest {}

message QueryCurrentValsetResponse {
  Valset valset = 1;
}

message QueryValsetRequestRequest {
  uint64 nonce = 1;
}

message QueryValsetRequestResponse {
  Valset valset = 1;
}

message QueryValsetConfirmRequest {
  uint64 nonce   = 1;
  string address = 2;
}

message QueryValsetConfirmResponse {
  MsgValsetConfirm confirm = 1;
}

message QueryValsetConfirmsByNonceRequest {
  uint64 nonce = 1;
}

message QueryValsetConfirmsByNonceResponse {
  repeated MsgValsetConfirm confirms = 1;
}

message QueryLastValsetRequestsRequest {}

message QueryLastValsetRequestsResponse {
  repeated Valset valsets = 1;
}

message QueryLastPendingValsetRequestByAddrRequest {
  string address = 1;
}

message QueryLastPendingValsetRequestByAddrResponse {
  repeated Valset valsets = 1;
}

message QueryBatchFeeRequest {}

message QueryBatchFeeResponse {
  repeated BatchFees batchFees = 1;
}

message QueryLastPendingBatchRequestByAddrRequest {
  string address = 1;
}

message QueryLastPendingBatchRequestByAddrResponse {
  OutgoingTxBatch batch = 1;
}

message QueryOutgoingTxBatchesRequest {}

message QueryOutgoingTxBatchesResponse {
  repeated OutgoingTxBatch batches = 1;
}

message QueryBatchRequestByNonceRequest {
  uint64 nonce            = 1;
  string contract_address = 2;
}

message QueryBatchRequestByNonceResponse {
  OutgoingTxBatch batch = 1;
}

message QueryBatchConfirmsRequest {
  uint64 nonce            = 1;
  string contract_address = 2;
}

message QueryBatchConfirmsResponse {
  repeated MsgConfirmBatch confirms = 1;
}

message QueryLastEventByAddrRequest {
  string address = 1;
}

message QueryLastEventByAddrResponse {
  LastClaimEvent last_claim_event = 1;
}

message QueryERC20ToDenomRequest {
  string erc20 = 1;
}

message QueryERC20ToDenomResponse {
  string denom             = 1;
  bool   cosmos_originated = 2;
}

message QueryDenomToERC20Request {
  string denom = 1;
}

message QueryDenomToERC20Response {
  string erc20             = 1;
  bool   cosmos_originated = 2;
}

message QueryDelegateKeysByValidatorAddress {
  string validator_address = 1;
}

message QueryDelegateKeysByValidatorAddressResponse {
  string eth_address          = 1;
  string orchestrator_address = 2;
}

message QueryDelegateKeysByEthAddress {
  string eth_address = 1;
}

message QueryDelegateKeysByEthAddressResponse {
  string validator_address    = 1;
  string orchestrator_address = 2;
}

message QueryDelegateKeysByOrchestratorAddress {
  string orchestrator_address = 1;
}

message QueryDelegateKeysByOrchestratorAddressResponse {
  string validator_address = 1;
  string eth_address       = 2;
}

message QueryPendingSendToEth {
  string sender_address = 1;
}

message QueryPendingSendToEthResponse {
  repeated OutgoingTransferTx transfers_in_batches = 1;
  repeated OutgoingTransferTx unbatched_transfers  = 2;
}

// QueryModuleStateRequest is the request type for the Query/PeggyModuleState RPC method.
message QueryModuleStateRequest {}

// QueryModuleStateResponse is the response type for the Query/PeggyModuleState RPC method.
message QueryModuleStateResponse {
  GenesisState state = 1;
}
