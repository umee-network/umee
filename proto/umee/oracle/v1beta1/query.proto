syntax = "proto3";
package umeenetwork.umee.oracle.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "umee/oracle/v1beta1/oracle.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/umee-network/umee/v2/x/oracle/types";

// Query defines the gRPC querier service.
service Query {
  // ExchangeRates returns exchange rates of all denoms,
  // or, if specified, returns a single denom
  rpc ExchangeRates(QueryExchangeRatesRequest) returns (QueryExchangeRatesResponse) {
    option (google.api.http).get = "/umee/oracle/v1beta1/denoms/exchange_rates/{denom}";
  }

  // ActiveExchangeRates returns all active denoms
  rpc ActiveExchangeRates(QueryActiveExchangeRatesRequest) returns (QueryActiveExchangeRatesResponse) {
    option (google.api.http).get = "/umee/oracle/v1beta1/denoms/active_exchange_rates";
  }

  // FeederDelegation returns feeder delegation of a validator
  rpc FeederDelegation(QueryFeederDelegationRequest) returns (QueryFeederDelegationResponse) {
    option (google.api.http).get = "/umee/oracle/v1beta1/validators/{validator_addr}/feeder";
  }

  // MissCounter returns oracle miss counter of a validator
  rpc MissCounter(QueryMissCounterRequest) returns (QueryMissCounterResponse) {
    option (google.api.http).get = "/umee/oracle/v1beta1/validators/{validator_addr}/miss";
  }

  // AggregatePrevote returns an aggregate prevote of a validator
  rpc AggregatePrevote(QueryAggregatePrevoteRequest) returns (QueryAggregatePrevoteResponse) {
    option (google.api.http).get = "/umee/oracle/v1beta1/validators/{validator_addr}/aggregate_prevote";
  }

  // AggregatePrevotes returns aggregate prevotes of all validators
  rpc AggregatePrevotes(QueryAggregatePrevotesRequest) returns (QueryAggregatePrevotesResponse) {
    option (google.api.http).get = "/umee/oracle/v1beta1/validators/aggregate_prevotes";
  }

  // AggregateVote returns an aggregate vote of a validator
  rpc AggregateVote(QueryAggregateVoteRequest) returns (QueryAggregateVoteResponse) {
    option (google.api.http).get = "/umee/oracle/v1beta1/valdiators/{validator_addr}/aggregate_vote";
  }

  // AggregateVotes returns aggregate votes of all validators
  rpc AggregateVotes(QueryAggregateVotesRequest) returns (QueryAggregateVotesResponse) {
    option (google.api.http).get = "/umee/oracle/v1beta1/validators/aggregate_votes";
  }

  // Params queries all parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/umee/oracle/v1beta1/params";
  }
}

// QueryExchangeRatesRequest is the request type for the Query/ExchangeRate RPC
// method.
message QueryExchangeRatesRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // denom defines the denomination to query for.
  string denom = 1;
}


// QueryExchangeRatesResponse is response type for the
// Query/ExchangeRates RPC method.
message QueryExchangeRatesResponse {
  // exchange_rates defines a list of the exchange rate for all whitelisted
  // denoms.
  repeated cosmos.base.v1beta1.DecCoin exchange_rates = 1
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (gogoproto.nullable) = false];
}


// QueryActiveExchangeRatesRequest is the request type for the Query/ActiveExchangeRates RPC method.
message QueryActiveExchangeRatesRequest {}

// QueryActiveExchangeRatesResponse is response type for the
// Query/ActiveExchangeRates RPC method.
message QueryActiveExchangeRatesResponse {
  // activeRates defines a list of the denomination which oracle prices aggreed
  // upon.
  repeated string active_rates = 1;
}


// QueryFeederDelegationRequest is the request type for the
// Query/FeederDelegation RPC method.
message QueryFeederDelegationRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // validator defines the validator address to query for.
  string validator_addr = 1;
}

// QueryFeederDelegationResponse is response type for the
// Query/FeederDelegation RPC method.
message QueryFeederDelegationResponse {
  // feeder_addr defines the feeder delegation of a validator
  string feeder_addr = 1;
}

// QueryMissCounterRequest is the request type for the Query/MissCounter RPC
// method.
message QueryMissCounterRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // validator defines the validator address to query for.
  string validator_addr = 1;
}

// QueryMissCounterResponse is response type for the
// Query/MissCounter RPC method.
message QueryMissCounterResponse {
  // miss_counter defines the oracle miss counter of a validator
  uint64 miss_counter = 1;
}

// QueryAggregatePrevoteRequest is the request type for the
// Query/AggregatePrevote RPC method.
message QueryAggregatePrevoteRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // validator defines the validator address to query for.
  string validator_addr = 1;
}

// QueryAggregatePrevoteResponse is response type for the
// Query/AggregatePrevote RPC method.
message QueryAggregatePrevoteResponse {
  // aggregate_prevote defines oracle aggregate prevote submitted by a validator
  // in the current vote period
  AggregateExchangeRatePrevote aggregate_prevote = 1 [(gogoproto.nullable) = false];
  ;
}

// QueryAggregatePrevotesRequest is the request type for the
// Query/AggregatePrevotes RPC method.
message QueryAggregatePrevotesRequest {}

// QueryAggregatePrevotesResponse is response type for the
// Query/AggregatePrevotes RPC method.
message QueryAggregatePrevotesResponse {
  // aggregate_prevotes defines all oracle aggregate prevotes submitted in the
  // current vote period
  repeated AggregateExchangeRatePrevote aggregate_prevotes = 1 [(gogoproto.nullable) = false];
}

// QueryAggregateVoteRequest is the request type for the Query/AggregateVote RPC
// method.
message QueryAggregateVoteRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // validator defines the validator address to query for.
  string validator_addr = 1;
}

// QueryAggregateVoteResponse is response type for the
// Query/AggregateVote RPC method.
message QueryAggregateVoteResponse {
  // aggregate_vote defines oracle aggregate vote submitted by a validator in
  // the current vote period
  AggregateExchangeRateVote aggregate_vote = 1 [(gogoproto.nullable) = false];
}

// QueryAggregateVotesRequest is the request type for the Query/AggregateVotes
// RPC method.
message QueryAggregateVotesRequest {}

// QueryAggregateVotesResponse is response type for the
// Query/AggregateVotes RPC method.
message QueryAggregateVotesResponse {
  // aggregate_votes defines all oracle aggregate votes submitted in the current
  // vote period
  repeated AggregateExchangeRateVote aggregate_votes = 1 [(gogoproto.nullable) = false];
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false];
}
