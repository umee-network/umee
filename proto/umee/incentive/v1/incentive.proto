syntax = "proto3";
package umeenetwork.umee.incentive.v1;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/umee-network/umee/v4/x/incentive";

// Params defines the parameters for the incentive module.
message Params {
  option (gogoproto.equal) = true;

  // max_unbondings defines the maximum amount of concurrent unbondings an address can have
  // on each unbonding tier of each bonded uToken denom.
  uint32 max_unbondings = 1;

  // unbonding_duration_long defines the unbonding duration (in seconds) of the long tier.
  uint64 unbonding_duration_long = 2;

  // unbonding_duration_middle defines the unbonding duration (in seconds) of the middle tier.
  uint64 unbonding_duration_middle = 3;

  // unbonding_duration_short defines the unbonding duration (in seconds) of the short tier.
  uint64 unbonding_duration_short = 4;

  // tier_weight_short defines the proportion of rewards which assets bonded
  // in the short unbonding duration receive compared to what the same amount
  // would receive bonded to the long tier.
  // valid values: [0;1]
  string tier_weight_short = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];

  // tier_weight_middle defines the proportion of rewards which assets bonded
  // in the middle unbonding duration receive compared to what the same amount
  // would receive bonded to the long tier.
  // valid values: [0;1]
  string tier_weight_middle = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];

  // community_fund_address is the address from which all incentive programs
  // proposed with "from_community_fund = true" will receive their funding.
  // Since funds are withdrawn automatically when an incentive program passes
  // governance, this account should always contain sufficient balance to
  // cover incentive programs which are being voted upon.
  string community_fund_address = 7;
}

// IncentiveProgram defines a liquidity mining incentive program on a single
// locked uToken denom that will run for a set amount of time.
message IncentiveProgram {
  option (gogoproto.equal) = true;

  // ID uniquely identifies the incentive program after it has been created.
  // It is zero when the program is being proposed by governance, and is set
  // to its final value when the proposal passes.
  uint32 ID = 1;

  // start_time is the unix time (in seconds) at which the incentives begin.
  // If a program is passed after its intended start time, its start time
  // will be increased to the current time, with program duration unchanged.
  uint64 start_time = 2;

  // duration is the length of the incentive program from start time to
  // completion in seconds.
  uint64 duration = 3;

  // uToken is the incentivized uToken collateral. Suppliers who collateralize
  // this asset then bond it to the incentive module are eligible for this program's
  // rewards.
  string uToken = 4;

  // funded indicates whether a program bas been funded. This can happen when
  // a program passes if funding from community fund, or any time before the
  // program's start time if funding with MsgSponsor. A program that reaches
  // its start time without being funded is cancelled.
  bool funded = 5;

  // total_rewards are total amount of rewards which can be distributed to
  // suppliers by this program. This is set to its final value when the program
  // is proposed by governance.
  cosmos.base.v1beta1.Coin total_rewards = 6 [(gogoproto.nullable) = false];

  // remaining_rewards are total amount of this program's funded rewards
  // which have not yet been allocated to suppliers. This is zero until the
  // program is both passed by governance and funded, at which point it
  // starts at the same value as total_rewards then begins decreasing
  // to zero as the program runs to completion.
  cosmos.base.v1beta1.Coin remaining_rewards = 7 [(gogoproto.nullable) = false];
}