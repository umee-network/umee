syntax = "proto3";
package umeenetwork.umee.incentive.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "umee/incentive/v1/incentive.proto";

option go_package = "github.com/umee-network/umee/v4/x/incentive";

// Msg defines the x/incentive module's Msg service.
service Msg {
  // Claim defines a method for claiming any pending incentive rewards.
  rpc Claim(MsgClaim) returns (MsgClaimResponse);

  // Bond defines a method for bonding uToken collateral into reward tier.
  rpc Bond(MsgBond) returns (MsgBondResponse);

  // BeginUnbonding defines a method for starting to unbond uToken collateral.
  rpc BeginUnbonding(MsgBeginUnbonding) returns (MsgBeginUnbondingResponse);

  // Sponsor defines a permissionless method for sponsoring an upcoming, not yet funded incentive program.
  // The sponsor must be a single account and the MsgSponsor must fully cover the expected program rewards.
  rpc Sponsor(MsgSponsor) returns (MsgSponsorResponse);

  // GovSetParams is used by governance proposals to update parameters.
  rpc GovSetParams(MsgGovSetParams) returns (MsgGovSetParamsResponse);

  // GovCreatePrograms is used by governance proposals to create and optionally fund incentive programs.
  rpc GovCreatePrograms(MsgGovCreatePrograms) returns (MsgGovCreateProgramsResponse);
}

// MsgClaim represents a account's request to claim pending rewards.
message MsgClaim {
  string account = 1;
}

// MsgClaimResponse defines the Msg/Claim response type.
message MsgClaimResponse {
  repeated cosmos.base.v1beta1.Coin amount = 1 [
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgBond represents a account's request to bond uToken collateral.
message MsgBond {
  string                   account = 1;
  uint32                   tier    = 2;
  cosmos.base.v1beta1.Coin asset   = 3 [(gogoproto.nullable) = false];
}

// MsgBondResponse defines the Msg/Lock response type.
message MsgBondResponse {}

// MsgBeginUnbonding represents a account's request to begin unbonding uToken collateral.
message MsgBeginUnbonding {
  string                   account = 1;
  uint32                   tier    = 2;
  cosmos.base.v1beta1.Coin asset   = 3 [(gogoproto.nullable) = false];
}

// MsgBeginUnbondingResponse defines the Msg/BeginUnbonding response type.
message MsgBeginUnbondingResponse {}

// MsgSponsor represents a sponsor's request to fund rewards for an incentive program.
// The program must have been passed by governance, not yet started, and not yet funded.
// Funded assets must be the full amount required by the program.
message MsgSponsor {
  // Sponsor bech32 account address
  string                   sponsor = 1;
  uint32                   program = 2;
  cosmos.base.v1beta1.Coin asset   = 3 [(gogoproto.nullable) = false];
}

// MsgSponsorResponse defines the Msg/Sponsor response type.
message MsgSponsorResponse {}

// MsgGovSetParams is used by governance to update module parameters.
message MsgGovSetParams {
  option (gogoproto.equal)           = true;
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer)      = "authority";

  // authority must be the address of the governance account.
  string authority   = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string title       = 2;
  string description = 3;
  Params params      = 4 [(gogoproto.nullable) = false];
}

// MsgGovSetParamsResponse defines the Msg/SetParams response type.
message MsgGovSetParamsResponse {}

// MsgGovCreatePrograms is used by governance to create one or more incentive programs.
// There are two funding scenarios, depending on from_community_fund.
// If it is true,the programs' total rewards will be automatically withdrawn from
// the (parameter) community_fund_address to the incentive module account when this
// message is passed. (Insufficient funds cause the parameter to be treated as false.)
// If it is false, a MsgSponsor funding each program's full amount must be submitted
// after this message passes, but before the program's start_time, or the program
// will be cancelled when it would otherwise start.
message MsgGovCreatePrograms {
  option (gogoproto.equal)           = true;
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer)      = "authority";

  // authority must be the address of the governance account.
  string                    authority   = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string                    title       = 2;
  string                    description = 3;
  repeated IncentiveProgram programs    = 4 [(gogoproto.nullable) = false];

  // from_community_fund defines the source of funds for proposed incentive programs.
  bool from_community_fund = 5;
}

// MsgGovCreateProgramsResponse defines the Msg/CreatePrograms response type.
message MsgGovCreateProgramsResponse {}
