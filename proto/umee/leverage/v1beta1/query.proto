syntax = "proto3";
package umeenetwork.umee.leverage.v1beta1;

import "google/api/annotations.proto";
import "umee/leverage/v1beta1/leverage.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/umee-network/umee/v2/x/leverage/types";

// Query defines the gRPC querier service.
service Query {
  // RegisteredTokens queries for all the registered tokens.
  rpc RegisteredTokens(QueryRegisteredTokens) returns (QueryRegisteredTokensResponse) {
    option (google.api.http).get = "/umee/leverage/v1beta1/registered_tokens";
  }

  // Params queries the parameters of the x/leverage module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/umee/leverage/v1beta1/params";
  }

  // Borrowed queries for the borrowed amount of a user by token denomination.
  // If the denomination is not supplied, the total for each borrowed token is
  // returned.
  rpc Borrowed(QueryBorrowedRequest) returns (QueryBorrowedResponse) {
    option (google.api.http).get = "/umee/leverage/v1beta1/borrowed";
  }

  // BorrowedValue queries for the usd value of the borrowed amount of a user
  // by token denomination.  If the denomination is not supplied, the sum across
  // all borrowed tokens is returned.
  rpc BorrowedValue(QueryBorrowedValueRequest) returns (QueryBorrowedValueResponse) {
    option (google.api.http).get = "/umee/leverage/v1beta1/borrowed_value";
  }

  // Loaned queries for the amount of tokens loaned by a user by denomination.
  // If the denomination is not supplied, the total for each loaned token is
  // returned.
  rpc Loaned(QueryLoanedRequest) returns (QueryLoanedResponse) {
    option (google.api.http).get = "/umee/leverage/v1beta1/loaned";
  }

  // LoanedValue queries for the USD value loaned by a user by token
  // denomination. If the denomination is not supplied, the sum across all
  // loaned tokens is returned.
  rpc LoanedValue(QueryLoanedValueRequest) returns (QueryLoanedValueResponse) {
    option (google.api.http).get = "/umee/leverage/v1beta1/loaned_value";
  }

  // AvailableBorrow queries for the available amount to borrow of a specified denomination.
  rpc AvailableBorrow(QueryAvailableBorrowRequest) returns (QueryAvailableBorrowResponse) {
    option (google.api.http).get = "/umee/leverage/v1beta1/available_borrow";
  }

  // BorrowAPY queries for the borrow APY of a specified denomination.
  rpc BorrowAPY(QueryBorrowAPYRequest) returns (QueryBorrowAPYResponse) {
    option (google.api.http).get = "/umee/leverage/v1beta1/borrow_apy";
  }

  // LendAPY queries for the lend APY of a specified denomination.
  rpc LendAPY(QueryLendAPYRequest) returns (QueryLendAPYResponse) {
    option (google.api.http).get = "/umee/leverage/v1beta1/lend_apy";
  }

  // MarketSize queries for the Market Size in USD of a specified denomination, which
  // is the USD value of total tokens loaned by all users plus borrow interest owed
  // by all users.
  rpc MarketSize(QueryMarketSizeRequest) returns (QueryMarketSizeResponse) {
    option (google.api.http).get = "/umee/leverage/v1beta1/market_size";
  }

  // TokenMarketSize queries for the Market Size in base tokens of a specified denomination,
  // which is the total tokens loaned by all users plus borrow interest owed by all users.
  rpc TokenMarketSize(QueryTokenMarketSizeRequest) returns (QueryTokenMarketSizeResponse) {
    option (google.api.http).get = "/umee/leverage/v1beta1/token_market_size";
  }

  // ReserveAmount queries for the amount reserved of a specified denomination.
  // If the token is not valid, the reserved amount is zero.
  rpc ReserveAmount(QueryReserveAmountRequest) returns (QueryReserveAmountResponse) {
    option (google.api.http).get = "/umee/leverage/v1beta1/reserve_amount";
  }

  // CollateralSetting queries a borrower's collateral setting (enabled or disabled)
  // for a specified uToken denomination.
  rpc CollateralSetting(QueryCollateralSettingRequest) returns (QueryCollateralSettingResponse) {
    option (google.api.http).get = "/umee/leverage/v1beta1/collateral_setting";
  }

  // Collateral queries the collateral amount of a user by token denomination.
  // If the denomination is not supplied, all of the user's collateral tokens
  // are returned.
  rpc Collateral(QueryCollateralRequest) returns (QueryCollateralResponse) {
    option (google.api.http).get = "/umee/leverage/v1beta1/collateral";
  }

  // CollateralValue queries for the total USD value of a user's collateral, or
  // the USD value held as a given base asset's associated uToken denomination.
  rpc CollateralValue(QueryCollateralValueRequest) returns (QueryCollateralValueResponse) {
    option (google.api.http).get = "/umee/leverage/v1beta1/collateral_value";
  }

  // ExchangeRate queries the uToken exchange rate of a given uToken denomination.
  rpc ExchangeRate(QueryExchangeRateRequest) returns (QueryExchangeRateResponse) {
    option (google.api.http).get = "/umee/leverage/v1beta1/exchange_rate";
  }

  // BorrowLimit queries the borrow limit in USD of a given borrower.
  rpc BorrowLimit(QueryBorrowLimitRequest) returns (QueryBorrowLimitResponse) {
    option (google.api.http).get = "/umee/leverage/v1beta1/borrow_limit";
  }

  // LiquidationLimit queries the limit in USD above which a given borrower is eligible for liquidation.
  rpc LiquidationLimit(QueryLiquidationLimitRequest) returns (QueryLiquidationLimitResponse) {
    option (google.api.http).get = "/umee/leverage/v1beta1/liquidation_limit";
  }

  // LiquidationTargets queries a list of all borrower addresses eligible for liquidation.
  rpc LiquidationTargets(QueryLiquidationTargetsRequest) returns (QueryLiquidationTargetsResponse) {
    option (google.api.http).get = "/umee/leverage/v1beta1/liquidation_targets";
  }

  // MarketSummary queries a base asset's current borrowing and lending conditions.
  rpc MarketSummary(QueryMarketSummaryRequest) returns (QueryMarketSummaryResponse) {
    option (google.api.http).get = "/umee/leverage/v1/market_summary";
  }
}

// QueryRegisteredTokens defines the request structure for the RegisteredTokens
// gRPC service handler.
message QueryRegisteredTokens {}

// QueryAvailableBorrowRequest defines the request structure for the
// AvailableBorrow gRPC service handler.
message QueryAvailableBorrowRequest {
  string denom = 1;
}

// QueryAvailableBorrowResponse defines the response structure for the
// AvailableBorrow gRPC service handler.
message QueryAvailableBorrowResponse {
  string amount = 1
  [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
}

// QueryBorrowAPYRequest defines the request structure for the BorrowAPY
// gRPC service handler.
message QueryBorrowAPYRequest {
  string denom = 1;
}

// QueryBorrowAPYResponse defines the response structure for the BorrowAPY
// gRPC service handler.
message QueryBorrowAPYResponse {
  string APY = 1
  [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

// QueryLendAPYRequest defines the request structure for the LendAPY
// gRPC service handler.
message QueryLendAPYRequest {
  string denom = 1;
}

// QueryLendAPYResponse defines the response structure for the LendAPY
// gRPC service handler.
message QueryLendAPYResponse {
  string APY = 1
  [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

// QueryMarketSizeRequest defines the request structure for the Market Size in USD
// gRPC service handler.
message QueryMarketSizeRequest {
  string denom = 1;
}

// QueryMarketSizeResponse defines the response structure for the Market Size in USD
// gRPC service handler.
message QueryMarketSizeResponse {
  string market_size_usd = 1
  [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

// QueryTokenMarketSizeRequest defines the request structure for the Token Market Size
// gRPC service handler.
message QueryTokenMarketSizeRequest {
  string denom = 1;
}

// QueryTokenMarketSizeResponse defines the response structure for the Token Market Size
// gRPC service handler.
message QueryTokenMarketSizeResponse {
  string market_size = 1
  [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
}

// QueryRegisteredTokensResponse defines the response structure for the
// RegisteredTokens gRPC service handler.
message QueryRegisteredTokensResponse {
  repeated Token registry = 1 [(gogoproto.nullable) = false];
}

// QueryParamsRequest defines the request structure for the Params gRPC service
// handler.
message QueryParamsRequest {}

// QueryParamsResponse defines the response structure for the Params gRPC
// service handler.
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryBorrowedRequest defines the request structure for the Borrowed gRPC
// service handler.
message QueryBorrowedRequest {
  string address = 1;
  string denom   = 2;
}

// QueryBorrowedResponse defines the response structure for the Borrowed gRPC
// service handler.
message QueryBorrowedResponse {
  repeated cosmos.base.v1beta1.Coin borrowed = 1
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

// QueryBorrowedValueRequest defines the request structure for the BorrowedValue gRPC service handler.
message QueryBorrowedValueRequest {
  string address = 1;
  string denom   = 2;
}

// QueryBorrowedValueResponse defines the response structure for the BorrowedValue gRPC service handler.
message QueryBorrowedValueResponse {
  string borrowed_value = 1
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

// QueryCollateralValueRequest defines the request structure for the CollateralValue gRPC service handler.
message QueryCollateralValueRequest {
  string address = 1;
  string denom   = 2;
}

// QueryCollateralValueResponse defines the response structure for the CollateralValue gRPC service handler.
message QueryCollateralValueResponse {
  string collateral_value = 1
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

// QueryLoanedRequest defines the request structure for the Loaned gRPC service handler.
message QueryLoanedRequest {
  string address = 1;
  string denom   = 2;
}

// QueryLoanedResponse defines the response structure for the Loaned gRPC service handler.
message QueryLoanedResponse {
  repeated cosmos.base.v1beta1.Coin loaned = 1
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

// QueryLoanedValueRequest defines the request structure for the LoanedValue gRPC service handler.
message QueryLoanedValueRequest {
  string address = 1;
  string denom   = 2;
}

// QueryLoanedValueResponse defines the response structure for the LoanedValue gRPC service handler.
message QueryLoanedValueResponse {
  string loaned_value = 1
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

// QueryReserveAmountRequest defines the request structure for the ReserveAmount
// gRPC service handler.
message QueryReserveAmountRequest {
  string denom = 1;
}

// QueryReserveAmountResponse defines the response structure for the ReserveAmount
// gRPC service handler.
message QueryReserveAmountResponse {
  string amount = 1 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
}

// QueryCollateralSettingsRequest defines the request structure for the
// CollateralSetting gRPC service handler.
message QueryCollateralSettingRequest {
  string address = 1;
  string denom = 2;
}

// QueryCollateralSettingsResponse defines the response structure for the
// CollateralSetting gRPC service handler.
message QueryCollateralSettingResponse {
  bool enabled = 1;
}

// QueryCollateralRequest defines the request structure for the Collateral gRPC
// service handler.
message QueryCollateralRequest {
  string address = 1;
  string denom   = 2;
}

// QueryCollateralResponse defines the response structure for the Collateral gRPC
// service handler.
message QueryCollateralResponse {
  repeated cosmos.base.v1beta1.Coin collateral = 1
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

// QueryExchangeRateRequest defines the request structure for the ExchangeRate
// gRPC service handler.
message QueryExchangeRateRequest {
  string denom = 1;
}

// QueryExchangeRateResponse defines the response structure for the ExchangeRate
// gRPC service handler.
message QueryExchangeRateResponse {
  string exchange_rate = 1
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

// QueryBorrowLimitRequest defines the request structure for the BorrowLimit
// gRPC service handler.
message QueryBorrowLimitRequest {
  string address = 1;
}

// QueryBorrowLimitResponse defines the response structure for the BorrowLimit
// gRPC service handler.
message QueryBorrowLimitResponse {
  string borrow_limit = 1
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

// QueryLiquidationLimitRequest defines the request structure for the LiquidationLimit
// gRPC service handler.
message QueryLiquidationLimitRequest {
  string address = 1;
}

// QueryLiquidationLimitResponse defines the response structure for the LiquidationLimit
// gRPC service handler.
message QueryLiquidationLimitResponse {
  string liquidation_limit = 1
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

// QueryLiquidationTargetsRequest defines the request structure for the LiquidationTargets
// gRPC service handler.
message QueryLiquidationTargetsRequest {}

// QueryLiquidationTargetsResponse defines the response structure for the LiquidationTargets
// gRPC service handler.
message QueryLiquidationTargetsResponse {
  repeated string targets = 1;
}

// QueryMarketSummaryRequest defines the request structure for the
// MarketSummary gRPC service handler.
message QueryMarketSummaryRequest {
  string denom = 1;
}

// QueryMarketSummaryResponse defines the response structure for the
// MarketSummary gRPC service handler.
message QueryMarketSummaryResponse {
  string symbol_denom = 1;
  uint32 exponent = 2;
  string oracle_price = 3
  [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = true];
  string uToken_exchange_rate = 4
  [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
  string lend_APY = 5
  [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
  string borrow_APY = 6
  [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
  string market_size = 7
  [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  string available_borrow = 8
  [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  string reserved = 9
  [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
}