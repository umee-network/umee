syntax = "proto3";
package umeenetwork.umee.leverage.v1beta1;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/umee-network/umee/v2/x/leverage/types";

// Msg defines the x/leverage module's Msg service.
service Msg {
  // LendAsset defines a method for lending coins to the capital facility.
  rpc LendAsset(MsgLendAsset) returns (MsgLendAssetResponse);

  // WithdrawAsset defines a method for withdrawing previously loaned coins from
  // the capital facility.
  rpc WithdrawAsset(MsgWithdrawAsset) returns (MsgWithdrawAssetResponse);

  // SetCollateral defines a method for users to enable or disable a uToken
  // denomination in their wallet for use as collateral.
  rpc SetCollateral(MsgSetCollateral) returns (MsgSetCollateralResponse);

  // BorrowAsset defines a method for borrowing coins from the capital facility.
  rpc BorrowAsset(MsgBorrowAsset) returns (MsgBorrowAssetResponse);

  // RepayAsset defines a method for repaying borrowed coins to the capital facility.
  rpc RepayAsset(MsgRepayAsset) returns (MsgRepayAssetResponse);

  // Liquidate defines a method for repaying a different user's borrowed coins to
  // the capital facility in exchange for some of their collateral.
  rpc Liquidate(MsgLiquidate) returns (MsgLiquidateResponse);
}

// MsgLendAsset represents a lender's request to lend a base asset type to the
// module.
message MsgLendAsset {
  string                   lender = 1;
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

// MsgWithdrawAsset represents a lender's request to withdraw a previously loaned
// base asset type from the module. Amount can either be exact uTokens to withdraw
// or equivalent base assets.
message MsgWithdrawAsset {
  string                   lender = 1;
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

// MsgSetCollateral represents a lender's request to enable or disable
// a uToken type in their possession as collateral.
message MsgSetCollateral {
  string borrower = 1;
  string denom = 2;
  bool   enable = 3;
}

// MsgBorrowAsset represents a lender's request to borrow a base asset type
// from the module.
message MsgBorrowAsset {
  string                   borrower = 1;
  cosmos.base.v1beta1.Coin amount   = 2 [(gogoproto.nullable) = false];
}

// MsgRepayAsset represents a lender's request to repay a borrowed base asset type
// to the module.
message MsgRepayAsset {
  string                   borrower = 1;
  cosmos.base.v1beta1.Coin amount   = 2 [(gogoproto.nullable) = false];
}

// MsgLiquidate represents a liquidator's request to repay a specific borrower's
// borrowed base asset type to the module in exchange for collateral reward.
message MsgLiquidate {
  string                   liquidator = 1;
  string                   borrower   = 2;
  cosmos.base.v1beta1.Coin repayment  = 3 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin reward     = 4 [(gogoproto.nullable) = false];
}

// MsgLendAssetResponse defines the Msg/LendAsset response type.
message MsgLendAssetResponse {}

// MsgWithdrawAssetResponse defines the Msg/WithdrawAsset response type.
message MsgWithdrawAssetResponse {}

// MsgSetCollateralResponse defines the Msg/SetCollateral response type.
message MsgSetCollateralResponse {}

// MsgBorrowAssetResponse defines the Msg/BorrowAsset response type.
message MsgBorrowAssetResponse {}

// MsgRepayAssetResponse defines the Msg/RepayAsset response type.
message MsgRepayAssetResponse {
  cosmos.base.v1beta1.Coin repaid = 1 [(gogoproto.nullable) = false];
}

// MsgLiquidateResponse defines the Msg/Liquidate response type.
message MsgLiquidateResponse {
  cosmos.base.v1beta1.Coin repaid = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin reward = 2 [(gogoproto.nullable) = false];
}
