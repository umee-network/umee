syntax = "proto3";
package umee.leverage.v1;

import "google/api/annotations.proto";
import "umee/leverage/v1/leverage.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/umee-network/umee/v2/x/leverage/types";

option (gogoproto.goproto_getters_all) = false;

// Query defines the gRPC querier service.
service Query {
  // RegisteredTokens queries for all the registered tokens.
  rpc RegisteredTokens(QueryRegisteredTokens)
      returns (QueryRegisteredTokensResponse) {
    option (google.api.http).get = "/umee/leverage/v1/registered_tokens";
  }

  // Params queries the parameters of the x/leverage module.
  rpc Params(QueryParams) returns (QueryParamsResponse) {
    option (google.api.http).get = "/umee/leverage/v1/params";
  }

  // Borrowed queries for the borrowed amount of a user by token denomination.
  // If the denomination is not specified, the total for each borrowed token is
  // returned.
  rpc Borrowed(QueryBorrowed) returns (QueryBorrowedResponse) {
    option (google.api.http).get = "/umee/leverage/v1/borrowed";
  }

  // BorrowedValue queries for the usd value of the borrowed amount of a user
  // by token denomination.  If the denomination is not specified, the sum across
  // all borrowed tokens is returned.
  rpc BorrowedValue(QueryBorrowedValue)
      returns (QueryBorrowedValueResponse) {
    option (google.api.http).get = "/umee/leverage/v1/borrowed_value";
  }

  // Supplied queries for the amount of tokens  by a user by denomination.
  // If the denomination is not specified, the total for each supplied token is
  // returned.
  rpc Supplied(QuerySupplied) returns (QuerySuppliedResponse) {
    option (google.api.http).get = "/umee/leverage/v1/supplied";
  }

  // SuppliedValue queries for the USD value supplied by a user by token
  // denomination. If the denomination is not specified, the sum across all
  // supplied tokens is returned.
  rpc SuppliedValue(QuerySuppliedValue) returns (QuerySuppliedValueResponse) {
    option (google.api.http).get = "/umee/leverage/v1/supplied_value";
  }

  // AvailableBorrow queries for the available amount to borrow of a specified
  // denomination.
  rpc AvailableBorrow(QueryAvailableBorrow)
      returns (QueryAvailableBorrowResponse) {
    option (google.api.http).get = "/umee/leverage/v1/available_borrow";
  }

  // BorrowAPY queries for the borrow APY of a specified denomination.
  rpc BorrowAPY(QueryBorrowAPY) returns (QueryBorrowAPYResponse) {
    option (google.api.http).get = "/umee/leverage/v1/borrow_apy";
  }

  // SupplyAPY queries for the supply APY of a specified denomination.
  rpc SupplyAPY(QuerySupplyAPY) returns (QuerySupplyAPYResponse) {
    option (google.api.http).get = "/umee/leverage/v1/supply_apy";
  }

  // MarketSize queries for the Market Size in USD of a specified denomination,
  // which is the USD value of total tokens supplied by all users plus borrow
  // interest owed by all users.
  rpc MarketSize(QueryMarketSize) returns (QueryMarketSizeResponse) {
    option (google.api.http).get = "/umee/leverage/v1/market_size";
  }

  // TokenMarketSize queries for the Market Size in base tokens of a specified
  // denomination, which is the total tokens supplied by all users plus borrow
  // interest owed by all users.
  rpc TokenMarketSize(QueryTokenMarketSize)
      returns (QueryTokenMarketSizeResponse) {
    option (google.api.http).get = "/umee/leverage/v1/token_market_size";
  }

  // ReserveAmount queries for the amount reserved of a specified denomination.
  // If the token is not valid, the reserved amount is zero.
  rpc ReserveAmount(QueryReserveAmount)
      returns (QueryReserveAmountResponse) {
    option (google.api.http).get = "/umee/leverage/v1/reserve_amount";
  }

  // Collateral queries the collateral amount of a user by token denomination.
  // If the denomination is not specified, all of the user's collateral tokens
  // are returned.
  rpc Collateral(QueryCollateral) returns (QueryCollateralResponse) {
    option (google.api.http).get = "/umee/leverage/v1/collateral";
  }

  // CollateralValue queries for the total USD value of a user's collateral, or
  // the USD value held as a given base asset's associated uToken denomination.
  rpc CollateralValue(QueryCollateralValue)
      returns (QueryCollateralValueResponse) {
    option (google.api.http).get = "/umee/leverage/v1/collateral_value";
  }

  // ExchangeRate queries the uToken exchange rate of a given uToken
  // denomination.
  rpc ExchangeRate(QueryExchangeRate)
      returns (QueryExchangeRateResponse) {
    option (google.api.http).get = "/umee/leverage/v1/exchange_rate";
  }

  // BorrowLimit queries the borrow limit in USD of a given borrower.
  rpc BorrowLimit(QueryBorrowLimit) returns (QueryBorrowLimitResponse) {
    option (google.api.http).get = "/umee/leverage/v1/borrow_limit";
  }

  // LiquidationThreshold returns a maximum borrow value in USD above which a
  // given borrower is eligible for liquidation.
  rpc LiquidationThreshold(QueryLiquidationThreshold)
      returns (QueryLiquidationThresholdResponse) {
    option (google.api.http).get = "/umee/leverage/v1/liquidation_threshold";
  }

  // LiquidationTargets queries a list of all borrower addresses eligible for
  // liquidation.
  rpc LiquidationTargets(QueryLiquidationTargets)
      returns (QueryLiquidationTargetsResponse) {
    option (google.api.http).get = "/umee/leverage/v1/liquidation_targets";
  }

  // MarketSummary queries a base asset's current borrowing and supplying
  // conditions.
  rpc MarketSummary(QueryMarketSummary)
      returns (QueryMarketSummaryResponse) {
    option (google.api.http).get = "/umee/leverage/v1/market_summary";
  }

  // TotalCollateral returns the total collateral system-wide of a given
  // uToken denomination.
  rpc TotalCollateral(QueryTotalCollateral)
      returns (QueryTotalCollateralResponse) {
    option (google.api.http).get = "/umee/leverage/v1/total_collateral/{denom}";
  }

  // TotalBorrowed returns the total borrowed system-wide of a given
  // token denomination.
  rpc TotalBorrowed(QueryTotalBorrowed)
      returns (QueryTotalBorrowedResponse) {
    option (google.api.http).get = "/umee/leverage/v1/total_borrowed/{denom}";
  }
}

// QueryRegisteredTokens defines the request structure for the RegisteredTokens
// gRPC service handler.
message QueryRegisteredTokens {}

// QueryAvailableBorrow defines the request structure for the
// AvailableBorrow gRPC service handler.
message QueryAvailableBorrow {
  string denom = 1;
}

// QueryAvailableBorrowResponse defines the response structure for the
// AvailableBorrow gRPC service handler.
message QueryAvailableBorrowResponse {
  string amount = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
}

// QueryBorrowAPY defines the request structure for the BorrowAPY
// gRPC service handler.
message QueryBorrowAPY {
  string denom = 1;
}

// QueryBorrowAPYResponse defines the response structure for the BorrowAPY
// gRPC service handler.
message QueryBorrowAPYResponse {
  string APY = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false,
    (gogoproto.jsontag)    = "apy"
  ];
}

// QuerySupplyAPY defines the request structure for the SupplyAPY
// gRPC service handler.
message QuerySupplyAPY {
  string denom = 1;
}

// QuerySupplyAPYResponse defines the response structure for the SupplyAPY
// gRPC service handler.
message QuerySupplyAPYResponse {
  string APY = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false,
    (gogoproto.jsontag)    = "apy"
  ];
}

// QueryMarketSize defines the request structure for the Market Size in
// USD gRPC service handler.
message QueryMarketSize {
  string denom = 1;
}

// QueryMarketSizeResponse defines the response structure for the Market Size in
// USD gRPC service handler.
message QueryMarketSizeResponse {
  string market_size_usd = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

// QueryTokenMarketSize defines the request structure for the Token
// Market Size gRPC service handler.
message QueryTokenMarketSize {
  string denom = 1;
}

// QueryTokenMarketSizeResponse defines the response structure for the Token
// Market Size gRPC service handler.
message QueryTokenMarketSizeResponse {
  string market_size = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
}

// QueryRegisteredTokensResponse defines the response structure for the
// RegisteredTokens gRPC service handler.
message QueryRegisteredTokensResponse {
  repeated Token registry = 1 [(gogoproto.nullable) = false];
}

// QueryParams defines the request structure for the Params gRPC service
// handler.
message QueryParams {}

// QueryParamsResponse defines the response structure for the Params gRPC
// service handler.
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryBorrowed defines the request structure for the Borrowed gRPC
// service handler.
message QueryBorrowed {
  string address = 1;
  string denom   = 2;
}

// QueryBorrowedResponse defines the response structure for the Borrowed gRPC
// service handler.
message QueryBorrowedResponse {
  repeated cosmos.base.v1beta1.Coin borrowed = 1 [
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// QueryBorrowedValue defines the request structure for the BorrowedValue
// gRPC service handler.
message QueryBorrowedValue {
  string address = 1;
  string denom   = 2;
}

// QueryBorrowedValueResponse defines the response structure for the
// BorrowedValue gRPC service handler.
message QueryBorrowedValueResponse {
  string borrowed_value = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

// QueryCollateralValue defines the request structure for the
// CollateralValue gRPC service handler.
message QueryCollateralValue {
  string address = 1;
  string denom   = 2;
}

// QueryCollateralValueResponse defines the response structure for the
// CollateralValue gRPC service handler.
message QueryCollateralValueResponse {
  string collateral_value = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

// QuerySupplied defines the request structure for the Supplied gRPC service
// handler.
message QuerySupplied {
  string address = 1;
  string denom   = 2;
}

// QuerySuppliedResponse defines the response structure for the Supplied gRPC
// service handler.
message QuerySuppliedResponse {
  repeated cosmos.base.v1beta1.Coin supplied = 1 [
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// QuerySuppliedValue defines the request structure for the SuppliedValue
// gRPC service handler.
message QuerySuppliedValue {
  string address = 1;
  string denom   = 2;
}

// QuerySuppliedValueResponse defines the response structure for the SuppliedValue
// gRPC service handler.
message QuerySuppliedValueResponse {
  string supplied_value = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

// QueryReserveAmount defines the request structure for the ReserveAmount
// gRPC service handler.
message QueryReserveAmount {
  string denom = 1;
}

// QueryReserveAmountResponse defines the response structure for the
// ReserveAmount gRPC service handler.
message QueryReserveAmountResponse {
  string amount = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
}

// QueryCollateral defines the request structure for the Collateral gRPC
// service handler.
message QueryCollateral {
  string address = 1;
  string denom   = 2;
}

// QueryCollateralResponse defines the response structure for the Collateral
// gRPC service handler.
message QueryCollateralResponse {
  repeated cosmos.base.v1beta1.Coin collateral = 1 [
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// QueryExchangeRate defines the request structure for the ExchangeRate
// gRPC service handler.
message QueryExchangeRate {
  string denom = 1;
}

// QueryExchangeRateResponse defines the response structure for the ExchangeRate
// gRPC service handler.
message QueryExchangeRateResponse {
  string exchange_rate = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

// QueryBorrowLimit defines the request structure for the BorrowLimit
// gRPC service handler.
message QueryBorrowLimit {
  string address = 1;
}

// QueryBorrowLimitResponse defines the response structure for the BorrowLimit
// gRPC service handler.
message QueryBorrowLimitResponse {
  string borrow_limit = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

// QueryLiquidationThreshold defines the request structure for the
// LiquidationThreshold gRPC service handler.
message QueryLiquidationThreshold {
  string address = 1;
}

// QueryLiquidationThresholdResponse defines the response structure for the
// LiquidationThreshold gRPC service handler.
message QueryLiquidationThresholdResponse {
  string liquidation_threshold = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

// QueryLiquidationTargets defines the request structure for the
// LiquidationTargets gRPC service handler.
message QueryLiquidationTargets {}

// QueryLiquidationTargetsResponse defines the response structure for the
// LiquidationTargets gRPC service handler.
message QueryLiquidationTargetsResponse {
  repeated string targets = 1;
}

// QueryMarketSummary defines the request structure for the
// MarketSummary gRPC service handler.
message QueryMarketSummary {
  string denom = 1;
}

// QueryMarketSummaryResponse defines the response structure for the
// MarketSummary gRPC service handler.
message QueryMarketSummaryResponse {
  string symbol_denom = 1;
  uint32 exponent     = 2;
  string oracle_price = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = true
  ];
  string uToken_exchange_rate = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false,
    (gogoproto.jsontag)    = "utoken_exchange_rate"
  ];
  string supply_APY = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false,
    (gogoproto.jsontag)    = "supply_apy"
    ];
    string borrow_APY = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false,
    (gogoproto.jsontag)    = "borrow_apy"
  ];
  string market_size = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
  string available_borrow = 8 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
  string reserved = 9 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
  string collateral = 10 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
  string borrowed = 11 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
}

// QueryTotalCollateral defines the request structure for the
// TotalCollateral gRPC service handler.
message QueryTotalCollateral {
  string denom = 1;
}

// QueryTotalCollateralResponse defines the response structure for the
// TotalCollateral gRPC service handler.
message QueryTotalCollateralResponse {
  string amount = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
}

// QueryTotalBorrowed defines the request structure for the
// TotalBorrowed gRPC service handler.
message QueryTotalBorrowed {
  string denom = 1;
}

// QueryTotalBorrowedResponse defines the response structure for the
// TotalBorrowed gRPC service handler.
message QueryTotalBorrowedResponse {
  string amount = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
}
