syntax = "proto3";
package umee.leverage.v1;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/umee-network/umee/v3/x/leverage/types";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.messagename_all)     = true;

// Msg defines the x/leverage module's Msg service.
service Msg {
  // Supply moves tokens from user balance to the module for lending or collateral.
  // The user receives uTokens in return.
  rpc Supply(MsgSupply) returns (MsgSupplyResponse);

  // Withdraw moves previously supplied tokens from the module back to the user balance in
  // exchange for burning uTokens.
  rpc Withdraw(MsgWithdraw) returns (MsgWithdrawResponse);

  // Collateralize enables selected uTokens as collateral, which moves them to the module.
  rpc Collateralize(MsgCollateralize) returns (MsgCollateralizeResponse);

  // Decollateralize disables selected uTokens as collateral. They are returned to the user's
  // balance from the module.
  rpc Decollateralize(MsgDecollateralize) returns (MsgDecollateralizeResponse);

  // Borrow allows a user to borrow tokens from the module if they have sufficient collateral.
  rpc Borrow(MsgBorrow) returns (MsgBorrowResponse);

  // Repay allows a user to repay previously borrowed tokens and interest.
  rpc Repay(MsgRepay) returns (MsgRepayResponse);

  // Liquidate allows a user to repay a different user's borrowed coins in exchange for some
  // of the target's collateral.
  rpc Liquidate(MsgLiquidate) returns (MsgLiquidateResponse);
}

// MsgSupply represents a user's request to supply assets to the module.
message MsgSupply {
  // Supplier is the account address supplying assets and the signer of the message.
  string                   supplier = 1;
  cosmos.base.v1beta1.Coin asset    = 2 [(gogoproto.nullable) = false];
}

// MsgWithdraw represents a user's request to withdraw supplied assets.
// Asset must be a uToken.
message MsgWithdraw {
  // Supplier is the account address withdrawing assets and the signer of the message.
  string                   supplier = 1;
  cosmos.base.v1beta1.Coin asset    = 2 [(gogoproto.nullable) = false];
}

// MsgCollateralize represents a user's request to enable selected
// uTokens as collateral.
message MsgCollateralize {
  // Borrower is the account address adding collateral and the signer of the message.
  string                   borrower = 1;
  cosmos.base.v1beta1.Coin asset    = 2 [(gogoproto.nullable) = false];
}

// MsgDecollateralize represents a user's request to disable selected
// uTokens as collateral.
message MsgDecollateralize {
  // Borrower is the account address removing collateral and the signer of the message.
  string                   borrower = 1;
  cosmos.base.v1beta1.Coin asset    = 2 [(gogoproto.nullable) = false];
}

// MsgBorrow represents a user's request to borrow a base asset type
// from the module.
message MsgBorrow {
  // Borrower is the account address taking a loan and the signer
  // of the message.
  string                   borrower = 1;
  cosmos.base.v1beta1.Coin asset    = 2 [(gogoproto.nullable) = false];
}

// MsgRepay represents a user's request to repay a borrowed base asset
// type to the module.
message MsgRepay {
  // Borrower is the account address repaying a loan and the signer
  // of the message.
  string                   borrower = 1;
  cosmos.base.v1beta1.Coin asset    = 2 [(gogoproto.nullable) = false];
}

// MsgLiquidate is the request structure for the Liquidate RPC.
message MsgLiquidate {
  // Liquidator is the account address performing a liquidation and the signer
  // of the message.
  string liquidator = 1;
  // Borrower is the account whose borrow is being repaid, and collateral consumed,
  // by the liquidation. It does not sign the message.
  string borrower = 2;
  // Repayment is the maximum amount of base tokens that the liquidator is willing
  // to repay.
  cosmos.base.v1beta1.Coin repayment = 3 [(gogoproto.nullable) = false];
  // RewardDenom is the denom that the liquidator will receive as a liquidation reward.
  // If it is a uToken, the liquidator will receive uTokens from the borrower's
  // collateral. If it is a base token, the uTokens will be redeemed directly at
  // a reduced Liquidation Incentive, and the liquidator will receive base tokens.
  string reward_denom = 4;
}

// MsgSupplyResponse defines the Msg/Supply response type.
message MsgSupplyResponse {
  // Received is the amount of uTokens received.
  cosmos.base.v1beta1.Coin received = 1 [(gogoproto.nullable) = false];
}

// MsgWithdrawResponse defines the Msg/Withdraw response type.
message MsgWithdrawResponse {
  // Received is the amount of base tokens received.
  cosmos.base.v1beta1.Coin received = 1 [(gogoproto.nullable) = false];
}

// MsgCollateralizeResponse defines the Msg/Collateralize response type.
message MsgCollateralizeResponse {}

// MsgDecollateralizeResponse defines the Msg/Decollateralize response type.
message MsgDecollateralizeResponse {}

// MsgBorrowResponse defines the Msg/Borrow response type.
message MsgBorrowResponse {}

// MsgRepayResponse defines the Msg/Repay response type.
message MsgRepayResponse {
  // Repaid is the amount of base tokens repaid to the module.
  cosmos.base.v1beta1.Coin repaid = 1 [(gogoproto.nullable) = false];
}

// MsgLiquidateResponse defines the Msg/Liquidate response type.
message MsgLiquidateResponse {
  // Repaid is the amount of borrowed base tokens that the liquidator repaid
  // to the module on behalf of the borrower.
  cosmos.base.v1beta1.Coin repaid = 1 [(gogoproto.nullable) = false];
  // Collateral is the amount of the borrower's uToken collateral that
  // was liquidated.
  cosmos.base.v1beta1.Coin collateral = 2 [(gogoproto.nullable) = false];
  // Reward is the amount of base tokens that the liquidator received from
  // the module as reward for the liquidation.
  cosmos.base.v1beta1.Coin reward = 3 [(gogoproto.nullable) = false];
}
