syntax = "proto3";
package umee.metoken.v1;

import "gogoproto/gogo.proto";

option go_package = "github.com/umee-network/umee/v6/x/metoken";

// Params defines the parameters for the metoken module.
message Params {
  option (gogoproto.equal) = true;

  // Reserves Re-balancing Frequency in seconds, determines how often the re-balancing of the module reserves will be
  // triggered
  int64 rebalancing_frequency = 1;

  // Interest claiming frequency in seconds, determines how often metoken module will claim accrued interest from
  // leverage module
  int64 claiming_frequency = 2;
}

// Index defines an index of assets that are allowed to swap and redeem for the Index's meToken,
// along with its metadata and parameters.
message Index {
  option (gogoproto.equal) = true;

  // Denom is the denomination of the Index's meToken denom that will be given to user in exchange of accepted
  // assets.
  string denom = 1;

  // MaxSupply is the maximum amount of Index's meTokens can be minted.
  // A swap that requires to mint more Index's meToken than this value will result in an error.
  // Must be a non negative value. 0 means that there is no limit.
  string max_supply = 2 [(gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.nullable) = false];

  // Exponent is the power of ten by which to multiply, in order to convert
  // an amount of the meToken for the exchange operations.
  // Valid value: must be the same as the oracle.Denom.exponent.
  uint32 exponent = 3;

  // Fee contains fee parameters used for swap and redemption fee calculations for all underlying
  // assets in this index.
  Fee fee = 4 [(gogoproto.nullable) = false];

  // Accepted Assets is the list of underlying Tokens that can be swapped and redeemed for the Index's meToken,
  // along with their token-specific parameters.
  repeated AcceptedAsset accepted_assets = 5 [(gogoproto.nullable) = false];
}

// Fee are the parameters used for the calculation of the fee to be applied for swaps and redemptions and charged to
// the user. The usage of these parameters is explained here:
// https://github.com/umee-network/umee/tree/main/x/metoken#dynamic-fee
message Fee {
  option (gogoproto.equal) = true;

  // Min fee is the minimum fee to be charged to the user. The applied fee will tend to decrease down to this value,
  // when the accepted asset is undersupplied in the index. It must be less than Balanced and Max fees.
  // Valid values: 0-1.
  string min_fee = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];

  // Balanced fee is the fee to be charged to the user when the index is balanced. It must be greater than min_fee and
  // lower than max_fee
  // Valid values: 0-1.
  string balanced_fee = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];

  // Max fee is the maximum fee to be charged to the user. The applied fee will tend to increase up to this value,
  // when the accepted asset is oversupplied in the index. It must be greater than Min and Balanced fee.
  // Valid values: 0-1.
  string max_fee = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

// AcceptedAsset is an asset that is accepted to participate in the Index's swaps and redemptions, along with its
// metadata and parameters
message AcceptedAsset {
  option (gogoproto.equal) = true;

  // Denom is the denomination of the underlying asset. Must be the base
  // denom as registered in the Bank module (so IBC denom for IBC tokens).
  string denom = 1;

  // Reserve portion is the portion of swapped assets that will be kept in the metoken module as reserves,
  // instead of supplied to the leverage module. It is also the
  // portion that will be taken from metoken module reserves when a redemption occurs.
  // Valid values: 0-1.
  string reserve_portion = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];

  // Target allocation is the portion of an accepted asset the Index is targeting to have. The sum of
  // target allocations of every accepted asset in the Index should be equal to 1.
  // Valid values: 0-1.
  string target_allocation = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

// IndexPrices provides meToken price related index information.
message IndexPrices {
  option (gogoproto.equal) = true;

  // meToken denom.
  string denom = 1;

  // Price in USD of one unit of meToken, expressed in decimals.
  string price = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];

  // Exponent is the power of ten by which to multiply, in order to convert
  // an amount of the meToken for the exchange operations.
  uint32 exponent = 3;

  repeated AssetPrice assets = 4 [(gogoproto.nullable) = false];
}

// AssetPrice information related to the index operations.
message AssetPrice {
  option (gogoproto.equal) = true;

  string base_denom = 1;

  string symbol_denom = 2;

  // Price in USD of one unit of asset, expressed in decimals.
  string price = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];

  // Exponent is the power of ten by which to multiply, in order to convert
  // an amount of the asset for the exchange operations.
  uint32 exponent = 4;

  // SwapRate used for exchange calculations asset -> meToken.
  string swap_rate = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];

  // RedeemRate used for exchange calculations meToken -> asset.
  string redeem_rate = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}