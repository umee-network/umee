syntax = "proto3";
package umee.metoken.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/umee-network/umee/v6/x/metoken";

option (gogoproto.goproto_getters_all) = false;

// EventSwap is emitted on Msg/Swap
message EventSwap {
  // meToken recipient bech32 address.
  string recipient = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Asset provided for the swap.
  cosmos.base.v1beta1.Coin asset = 2 [(gogoproto.nullable) = false];
  // meToken received by the recipient in exchange for the provided asset.
  cosmos.base.v1beta1.Coin metoken = 3 [(gogoproto.nullable) = false];
  // Fee provided for the swap.
  cosmos.base.v1beta1.Coin fee = 4 [(gogoproto.nullable) = false];
}

// EventRedeem is emitted on Msg/Redeem
message EventRedeem {
  // Asset recipient bech32 address.
  string recipient = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // meToken provided for the redemption.
  cosmos.base.v1beta1.Coin metoken = 2 [(gogoproto.nullable) = false];
  // Asset received by the recipient in exchange for the provided meToken.
  cosmos.base.v1beta1.Coin asset = 3 [(gogoproto.nullable) = false];
  // Fee provided for the redemption.
  cosmos.base.v1beta1.Coin fee = 4 [(gogoproto.nullable) = false];
}

// EventRebalancing is emitted when a reserve re-balancing occurs.
message EventRebalancing {
  // RebalancingResults of every asset in every Index.
  repeated RebalancingResult results = 1 [(gogoproto.nullable) = false];
}

// RebalancingResult of a specific Index with initial and result balances of underlying assets.
message RebalancingResult {
  string metoken_denom = 1;
  //Initial balance of an asset in the Index before re-balancing.
  repeated cosmos.base.v1beta1.Coin initial_balance = 2 [(gogoproto.nullable) = false];
  // Result balance of an asset in the Index after re-balancing.
  repeated cosmos.base.v1beta1.Coin result_balance = 3 [(gogoproto.nullable) = false];
}

// EventInterestClaim is emitted when the accrued interest was claimed from x/leverage
message EventInterestClaim {
  // The denom and amount of successfully claimed interest
  repeated cosmos.base.v1beta1.Coin claimed_asset = 1 [(gogoproto.nullable) = false];
}