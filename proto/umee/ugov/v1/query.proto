syntax = "proto3";
package umee.ugov.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "amino/amino.proto";

import "umee/ugov/v1/ugov.proto";

option go_package = "github.com/umee-network/umee/v6/x/ugov";

option (gogoproto.goproto_getters_all) = false;

// Query defines the gRPC querier service.
service Query {
  // MinGasPrice returns minimum transaction fees.
  rpc MinGasPrice(QueryMinGasPrice) returns (QueryMinGasPriceResponse) {
    option (google.api.http).get = "/umee/ugov/v1/min_gas_price";
  }

  // EmergencyGroup returns emergency group address
  rpc EmergencyGroup(QueryEmergencyGroup) returns (QueryEmergencyGroupResponse) {
    option (google.api.http).get = "/umee/ugov/v1/emergency_group";
  }

  // InflationParams returns params of inflation reduction rates
  rpc InflationParams(QueryInflationParams) returns (QueryInflationParamsResponse) {
    option (google.api.http).get = "/umee/ugov/v1/inflation_params";
  }

  // InflationCycleEnd returns inflation cycle end time
  rpc InflationCycleEnd(QueryInflationCycleEnd) returns (QueryInflationCycleEndResponse) {
    option (google.api.http).get = "/umee/ugov/v1/inflation_cycle_end";
  }

  // Token Balances queries for all account addresses that own a particular token
  // denomination.
  rpc TokenBalances(QueryTokenBalances) returns (QueryTokenBalancesResponse){
    option (google.api.http).get = "/umee/ugov/v1/token_balances";
  }
}

// which queries for a paginated set of all account holders of a particular
// denomination.
message QueryTokenBalances{
  // denom defines the coin denomination to query all account holders for.
  string denom = 1;
  int64 height = 2;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryDenomOwnersResponse defines the RPC response of a TokenBalances RPC query.
message QueryTokenBalancesResponse {
  repeated TokenBalance token_balances = 1;
   // pagination defines the pagination in the response.
   cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// TokenBalance defines structure representing an account that owns or holds a
// particular denominated token. It contains the account address and account
// balance of the denominated token.
//
message TokenBalance {
  // address defines the address that owns a particular denomination.
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // balance is the balance of the denominated coin for an account.
  cosmos.base.v1beta1.Coin balance = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// QueryMinGasPrice is a request type.
message QueryMinGasPrice {}

// QueryMinGasPriceResponse response type.
message QueryMinGasPriceResponse {
  cosmos.base.v1beta1.DecCoin min_gas_price = 1 [(gogoproto.nullable) = false];
}

// QueryEmergencyGroup request type.
message QueryEmergencyGroup {}

// QueryEmergencyGroupResponse response type.
message QueryEmergencyGroupResponse {
  string emergency_group = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryInflationParams request type.
message QueryInflationParams {}

// QueryInflationParamsResponse response type.
message QueryInflationParamsResponse {
  InflationParams params = 1 [(gogoproto.nullable) = false];
}

// QueryInflationCycleEnd request type.
message QueryInflationCycleEnd {}

// QueryInflationCycleEndResponse response type.
message QueryInflationCycleEndResponse {
  google.protobuf.Timestamp end = 1 [(gogoproto.nullable) = true, (gogoproto.stdtime) = true];
}
