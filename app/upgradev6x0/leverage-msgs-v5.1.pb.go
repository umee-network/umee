// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/leverage/v1/tx.proto

package upgradev6x0

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"

	leveragetypes "github.com/umee-network/umee/v6/x/leverage/types"
)


// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package


// MsgGovUpdateRegistry defines the Msg/GovUpdateRegistry request type.
type MsgGovUpdateRegistry struct {
	// authority is the address of the governance account.
	Authority   string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// add_tokens defines new token settings.
	AddTokens []leveragetypes.Token `protobuf:"bytes,4,rep,name=add_tokens,json=addTokens,proto3" json:"add_tokens"`
	// update_tokens defines the new settings for existed tokens.
	UpdateTokens []leveragetypes.Token `protobuf:"bytes,5,rep,name=update_tokens,json=updateTokens,proto3" json:"update_tokens"`
}

func (m *MsgGovUpdateRegistry) Reset()      { *m = MsgGovUpdateRegistry{} }
func (*MsgGovUpdateRegistry) ProtoMessage() {}
func (*MsgGovUpdateRegistry) Descriptor() ([]byte, []int) {
	return fileDescriptor_72683128ee6e8843, []int{22}
}
func (m *MsgGovUpdateRegistry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovUpdateRegistry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovUpdateRegistry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovUpdateRegistry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovUpdateRegistry.Merge(m, src)
}
func (m *MsgGovUpdateRegistry) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovUpdateRegistry) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovUpdateRegistry.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovUpdateRegistry proto.InternalMessageInfo

func (*MsgGovUpdateRegistry) XXX_MessageName() string {
	return "umee.leverage.v1.MsgGovUpdateRegistry"
}

func init() {
	proto.RegisterType((*MsgGovUpdateRegistry)(nil), "umee.leverage.v1.MsgGovUpdateRegistry")
}

func init() { proto.RegisterFile("umee/leverage/v1/tx.proto", fileDescriptor_72683128ee6e8843) }

var fileDescriptor_72683128ee6e8843 = []byte{
	// 1044 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcf, 0x8f, 0xdb, 0xc4,
	0x17, 0x8f, 0xb3, 0x3f, 0x94, 0xbc, 0x6c, 0xfb, 0xdd, 0xba, 0xfb, 0xa5, 0x59, 0xb7, 0x75, 0x82,
	0xa1, 0xb0, 0xaa, 0x58, 0x9b, 0x5d, 0x28, 0x20, 0xa0, 0x02, 0xd2, 0x4a, 0x95, 0x0a, 0x91, 0xaa,
	0x2c, 0x08, 0x81, 0x04, 0x8b, 0x13, 0x0f, 0x8e, 0xb5, 0x89, 0x27, 0x78, 0x26, 0xc9, 0x86, 0x23,
	0x27, 0x8e, 0x20, 0x71, 0xe0, 0xb8, 0x07, 0x8e, 0x1c, 0x38, 0xf0, 0x47, 0x2c, 0x82, 0x43, 0xc5,
	0x89, 0x13, 0x82, 0xdd, 0x03, 0xfc, 0x19, 0xc8, 0x33, 0xe3, 0xb1, 0x13, 0x7b, 0xb3, 0x2e, 0x25,
	0xb7, 0xcc, 0xbc, 0xcf, 0xfb, 0xbc, 0xcf, 0x7b, 0x93, 0xf7, 0xf2, 0x02, 0x9b, 0xc3, 0x3e, 0x42,
	0x56, 0x0f, 0x8d, 0x50, 0x60, 0xbb, 0xc8, 0x1a, 0xed, 0x58, 0xf4, 0xd0, 0x1c, 0x04, 0x98, 0x62,
	0x75, 0x3d, 0x34, 0x99, 0x91, 0xc9, 0x1c, 0xed, 0x68, 0x7a, 0x07, 0x93, 0x3e, 0x26, 0x56, 0xdb,
	0x26, 0x21, 0xb4, 0x8d, 0xa8, 0xbd, 0x63, 0x75, 0xb0, 0xe7, 0x73, 0x0f, 0xed, 0x8a, 0xb0, 0xf7,
	0x89, 0x1b, 0x32, 0xf5, 0x89, 0x2b, 0x0c, 0x9b, 0xdc, 0xb0, 0xcf, 0x4e, 0x16, 0x3f, 0x08, 0xd3,
	0x86, 0x8b, 0x5d, 0xcc, 0xef, 0xc3, 0x4f, 0xe2, 0xb6, 0x96, 0x92, 0x25, 0x75, 0x30, 0x80, 0xf1,
	0x31, 0x94, 0x9b, 0xc4, 0xdd, 0x1b, 0x0e, 0x06, 0xbd, 0x89, 0xaa, 0x41, 0x89, 0x84, 0x9f, 0x3c,
	0x14, 0x54, 0x95, 0xba, 0xb2, 0x55, 0x6e, 0xc9, 0xb3, 0x7a, 0x0b, 0x56, 0x6c, 0x42, 0x10, 0xad,
	0x16, 0xeb, 0xca, 0x56, 0x65, 0x77, 0xd3, 0x14, 0xd1, 0xc3, 0x1c, 0x4c, 0x91, 0x83, 0x79, 0x07,
	0x7b, 0x7e, 0x63, 0xf9, 0xf8, 0xf7, 0x5a, 0xa1, 0xc5, 0xd1, 0xc6, 0x27, 0x50, 0x69, 0x12, 0xf7,
	0x7d, 0x8f, 0x76, 0x9d, 0xc0, 0x1e, 0x2f, 0x22, 0x42, 0x03, 0x2e, 0x36, 0x89, 0xdb, 0xb4, 0x0f,
	0x73, 0x05, 0xd9, 0x80, 0x15, 0x07, 0xf9, 0xb8, 0xcf, 0x82, 0x94, 0x5b, 0xfc, 0x60, 0x20, 0x58,
	0x6f, 0x12, 0xf7, 0x0e, 0xee, 0xf5, 0x6c, 0x8a, 0x02, 0xbb, 0xe7, 0x7d, 0x8e, 0x42, 0x96, 0x36,
	0x0e, 0x02, 0x3c, 0x8e, 0x59, 0xa2, 0xf3, 0xbf, 0x95, 0xea, 0x82, 0xda, 0x24, 0xee, 0x5d, 0xd4,
	0x59, 0x74, 0x20, 0xfe, 0xaa, 0x0d, 0xc6, 0xb2, 0x08, 0xfe, 0x37, 0x61, 0x8d, 0xd7, 0x3c, 0x47,
	0x88, 0xec, 0x8a, 0x7f, 0x04, 0xa5, 0x26, 0x71, 0x5b, 0x68, 0x60, 0x4f, 0x16, 0x21, 0xf0, 0x7b,
	0x85, 0x29, 0x7c, 0xc7, 0xfb, 0x6c, 0xe8, 0x39, 0x36, 0x45, 0xaa, 0x0e, 0xd0, 0x13, 0x07, 0x1c,
	0x45, 0x49, 0xdc, 0x4c, 0x69, 0x28, 0xce, 0x68, 0xb8, 0x0d, 0xe5, 0x20, 0x14, 0xda, 0x47, 0x3e,
	0xad, 0x2e, 0xe5, 0xd3, 0x11, 0x7b, 0xa8, 0x4f, 0xc2, 0x5a, 0x80, 0xc6, 0x76, 0xe0, 0xec, 0xf3,
	0x3a, 0x2c, 0x33, 0xfa, 0x0a, 0xbf, 0xbb, 0xcb, 0xaa, 0xf1, 0xb3, 0x02, 0xff, 0x0f, 0xe5, 0x8a,
	0xde, 0x74, 0x62, 0xdd, 0xaf, 0xa4, 0x75, 0x37, 0xaa, 0xbf, 0xfe, 0xb8, 0xbd, 0x21, 0xe2, 0xbf,
	0xe5, 0x38, 0x01, 0x22, 0x64, 0x8f, 0x06, 0x9e, 0xef, 0x4e, 0x65, 0xf4, 0xe2, 0x6c, 0x46, 0x73,
	0xfc, 0xe2, 0x5c, 0x6b, 0x50, 0x61, 0xca, 0x85, 0xd6, 0x25, 0x5e, 0x28, 0x76, 0xc5, 0xa4, 0xe6,
	0xc9, 0xa6, 0x0b, 0x97, 0xe5, 0x4c, 0x89, 0x7b, 0x6a, 0x11, 0xbd, 0xff, 0x00, 0x2e, 0xc9, 0x48,
	0x2d, 0x44, 0x06, 0xd8, 0x27, 0x48, 0x7d, 0x0d, 0x4a, 0x01, 0xea, 0x20, 0x6f, 0x84, 0x1c, 0x16,
	0x27, 0x07, 0x9d, 0x74, 0x30, 0x5a, 0x4c, 0x7b, 0x34, 0x4a, 0xfe, 0x1b, 0xce, 0x6f, 0x14, 0x78,
	0x62, 0x7a, 0x44, 0x49, 0xde, 0xdb, 0x50, 0x1e, 0x8b, 0x3b, 0x3f, 0x2f, 0x71, 0xec, 0x31, 0x25,
	0xab, 0xf8, 0xa8, 0xb2, 0x34, 0xa8, 0xce, 0x0e, 0xbd, 0x48, 0x97, 0x71, 0x0d, 0xb4, 0xf4, 0xa4,
	0x92, 0xd6, 0xcb, 0xac, 0xec, 0xbc, 0xf7, 0xe5, 0xe5, 0x1e, 0x6c, 0x24, 0x67, 0x42, 0xb2, 0x74,
	0xe2, 0xdb, 0x95, 0xbf, 0x74, 0x91, 0x83, 0xf1, 0x36, 0x1b, 0xcc, 0x6c, 0x4c, 0x48, 0xc2, 0x97,
	0x61, 0x35, 0xfc, 0x3e, 0x7a, 0xb9, 0xe9, 0x04, 0xdc, 0xf8, 0x49, 0x61, 0x12, 0x65, 0x73, 0x3d,
	0x36, 0xa3, 0xfa, 0x06, 0x40, 0x5c, 0xa1, 0xbc, 0x2f, 0x90, 0x70, 0xe1, 0x91, 0xc3, 0xce, 0xc9,
	0x3b, 0x57, 0x04, 0xdc, 0xf8, 0x5a, 0x81, 0xeb, 0x99, 0x13, 0xe3, 0xf1, 0x93, 0x8a, 0x35, 0x15,
	0x1f, 0x4d, 0xd3, 0xa7, 0x70, 0x35, 0xa3, 0xef, 0xa5, 0xa0, 0x7b, 0x70, 0x71, 0xea, 0xeb, 0x94,
	0x5b, 0xd8, 0x8c, 0x9b, 0xf1, 0x5d, 0x91, 0xbd, 0xe3, 0x3d, 0x3c, 0x7a, 0x6f, 0xc0, 0x53, 0x76,
	0x3d, 0x42, 0x83, 0x89, 0xfa, 0x12, 0x94, 0xed, 0x21, 0xed, 0xe2, 0xc0, 0xa3, 0x93, 0x73, 0x67,
	0x65, 0x0c, 0x0d, 0x7f, 0xa2, 0xa8, 0x47, 0x7b, 0x28, 0xfa, 0x89, 0x62, 0x07, 0xb5, 0x0e, 0x15,
	0x07, 0x91, 0x4e, 0xe0, 0x0d, 0xa8, 0x87, 0x7d, 0x31, 0x0a, 0x93, 0x57, 0xea, 0xeb, 0x00, 0xb6,
	0xe3, 0xec, 0x53, 0x7c, 0x80, 0x7c, 0x52, 0x5d, 0xae, 0x2f, 0x6d, 0x55, 0x76, 0xaf, 0x98, 0xb3,
	0xeb, 0x9e, 0xf9, 0x6e, 0x68, 0x8f, 0x9a, 0xd7, 0x76, 0x1c, 0x76, 0x26, 0x6a, 0x03, 0x2e, 0x0c,
	0x99, 0xfe, 0x88, 0x60, 0x25, 0x0f, 0xc1, 0x1a, 0xf7, 0xe1, 0x1c, 0xaf, 0x6a, 0x5f, 0x1e, 0xd5,
	0x0a, 0xdf, 0x1e, 0xd5, 0x0a, 0x7f, 0x1f, 0xd5, 0x94, 0x2f, 0xfe, 0xfa, 0xe1, 0x66, 0x9c, 0x95,
	0xa1, 0xc3, 0xb5, 0xac, 0x2a, 0x45, 0xef, 0xb1, 0xfb, 0x4b, 0x09, 0x96, 0x9a, 0xc4, 0x55, 0xef,
	0xc3, 0xaa, 0xd8, 0xff, 0xae, 0xa6, 0x43, 0xcb, 0x07, 0xd5, 0x9e, 0x9a, 0x63, 0x94, 0x6f, 0xfc,
	0x00, 0x4a, 0x72, 0x0d, 0xbb, 0x9e, 0xe9, 0x10, 0x99, 0xb5, 0x1b, 0x73, 0xcd, 0x92, 0xf1, 0x03,
	0xa8, 0x24, 0x77, 0xbb, 0x7a, 0xa6, 0x57, 0x02, 0xa1, 0x6d, 0x9d, 0x87, 0x90, 0xd4, 0xfb, 0x70,
	0x61, 0x7a, 0xe5, 0x33, 0x32, 0x5d, 0xa7, 0x30, 0xda, 0xcd, 0xf3, 0x31, 0x32, 0x00, 0x82, 0xff,
	0xcd, 0x2e, 0x7b, 0x4f, 0x67, 0xba, 0xcf, 0xa0, 0xb4, 0xe7, 0xf2, 0xa0, 0x64, 0x98, 0xfb, 0xb0,
	0x2a, 0xf6, 0xb0, 0xec, 0x07, 0xe4, 0xc6, 0x33, 0x1e, 0x70, 0x66, 0x5a, 0xef, 0x41, 0x39, 0x5e,
	0xeb, 0xf4, 0xb3, 0x4a, 0x29, 0x18, 0x9f, 0x99, 0x6f, 0x4f, 0x74, 0xfe, 0x8a, 0xd8, 0xf4, 0x32,
	0x1d, 0x98, 0x4d, 0x33, 0xce, 0xb6, 0x25, 0xd5, 0x25, 0x56, 0xba, 0x4c, 0x07, 0x69, 0x3f, 0x43,
	0x5d, 0x7a, 0x50, 0xfa, 0xa0, 0x66, 0x2c, 0x5e, 0xcf, 0x66, 0x7b, 0xa7, 0x80, 0x9a, 0x95, 0x13,
	0x28, 0xe3, 0x75, 0x61, 0x3d, 0xb5, 0x1b, 0xdd, 0x98, 0xd3, 0x5c, 0x31, 0x4c, 0xdb, 0xce, 0x05,
	0x93, 0x91, 0x0e, 0xe0, 0x52, 0x7a, 0x48, 0x66, 0x97, 0x25, 0x85, 0xd3, 0xcc, 0x7c, 0xb8, 0x28,
	0x58, 0xa3, 0x75, 0xfc, 0xa7, 0x5e, 0x38, 0x3e, 0xd1, 0x95, 0x87, 0x27, 0xba, 0xf2, 0xc7, 0x89,
	0xae, 0x7c, 0x75, 0xaa, 0x17, 0x8e, 0x4f, 0x75, 0xe5, 0xe1, 0xa9, 0x5e, 0xf8, 0xed, 0x54, 0x2f,
	0x7c, 0xf8, 0xbc, 0xeb, 0xd1, 0xee, 0xb0, 0x6d, 0x76, 0x70, 0xdf, 0x0a, 0xb9, 0xb7, 0x7d, 0x44,
	0xc7, 0x38, 0x38, 0x60, 0x07, 0x6b, 0x74, 0xcb, 0x3a, 0x8c, 0xff, 0xa9, 0xd2, 0xc9, 0x00, 0x91,
	0xf6, 0x2a, 0xfb, 0x93, 0xfa, 0xc2, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x31, 0xf4, 0x11, 0x45,
	0x5e, 0x0f, 0x00, 0x00,
}

func (this *MsgGovUpdateRegistry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgGovUpdateRegistry)
	if !ok {
		that2, ok := that.(MsgGovUpdateRegistry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Authority != that1.Authority {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.AddTokens) != len(that1.AddTokens) {
		return false
	}
	for i := range this.AddTokens {
		if !this.AddTokens[i].Equal(&that1.AddTokens[i]) {
			return false
		}
	}
	if len(this.UpdateTokens) != len(that1.UpdateTokens) {
		return false
	}
	for i := range this.UpdateTokens {
		if !this.UpdateTokens[i].Equal(&that1.UpdateTokens[i]) {
			return false
		}
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

func (m *MsgGovUpdateRegistry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovUpdateRegistry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovUpdateRegistry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpdateTokens) > 0 {
		for iNdEx := len(m.UpdateTokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpdateTokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AddTokens) > 0 {
		for iNdEx := len(m.AddTokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddTokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}


func (m *MsgGovUpdateRegistry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.AddTokens) > 0 {
		for _, e := range m.AddTokens {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.UpdateTokens) > 0 {
		for _, e := range m.UpdateTokens {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgGovUpdateRegistry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovUpdateRegistry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovUpdateRegistry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddTokens = append(m.AddTokens, leveragetypes.Token{})
			if err := m.AddTokens[len(m.AddTokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTokens = append(m.UpdateTokens, leveragetypes.Token{})
			if err := m.UpdateTokens[len(m.UpdateTokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
