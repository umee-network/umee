// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/auction/v1/genesis.proto

package auction

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the x/auction module's genesis state.
type GenesisState struct {
	RewardsParams RewardsParams `protobuf:"bytes,1,opt,name=rewards_params,json=rewardsParams,proto3" json:"rewards_params"`
	// Latest active (in bid phase) reward auction.
	RewardAuctionId uint32 `protobuf:"varint,2,opt,name=reward_auction_id,json=rewardAuctionId,proto3" json:"reward_auction_id,omitempty"`
	// Latest highest rewards bid.
	HighestRewardsBid        Bid       `protobuf:"bytes,3,opt,name=highest_rewards_bid,json=highestRewardsBid,proto3" json:"highest_rewards_bid"`
	CurrentRewardsAuctionEnd time.Time `protobuf:"bytes,4,opt,name=current_rewards_auction_end,json=currentRewardsAuctionEnd,proto3,stdtime" json:"current_rewards_auction_end"`
	// Tokens collected for the current auction.
	CurrentRewards []types.Coin `protobuf:"bytes,5,rep,name=current_rewards,json=currentRewards,proto3" json:"current_rewards"`
	// Tokens collected for the next auction, while the current reward auction is still in the
	// bid phase.
	NextRewards []types.Coin `protobuf:"bytes,6,rep,name=next_rewards,json=nextRewards,proto3" json:"next_rewards"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_15e83c50dcf6ac7b, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GenesisState)(nil), "umee.auction.v1.GenesisState")
}

func init() { proto.RegisterFile("umee/auction/v1/genesis.proto", fileDescriptor_15e83c50dcf6ac7b) }

var fileDescriptor_15e83c50dcf6ac7b = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6f, 0xd3, 0x30,
	0x18, 0x4e, 0xe8, 0x98, 0x90, 0xbb, 0xad, 0x5a, 0xd8, 0x21, 0x14, 0xe1, 0x56, 0x9c, 0x0a, 0x12,
	0xb6, 0x32, 0x24, 0xee, 0x04, 0xa1, 0xf1, 0x71, 0x41, 0x81, 0x13, 0x97, 0xc8, 0x89, 0x4d, 0x6a,
	0x41, 0xec, 0xca, 0x76, 0xb2, 0xfd, 0x8c, 0xfe, 0x2a, 0xd4, 0x63, 0x8f, 0x9c, 0xf8, 0x68, 0xff,
	0x08, 0x8a, 0xed, 0xa8, 0xd0, 0x5e, 0x76, 0x73, 0xde, 0xc7, 0xcf, 0x47, 0x9e, 0xd7, 0xe0, 0x51,
	0x53, 0x33, 0x86, 0x49, 0x53, 0x1a, 0x2e, 0x05, 0x6e, 0x13, 0x5c, 0x31, 0xc1, 0x34, 0xd7, 0x68,
	0xa1, 0xa4, 0x91, 0xd1, 0xa8, 0x83, 0x91, 0x87, 0x51, 0x9b, 0x8c, 0x27, 0x95, 0x94, 0xd5, 0x37,
	0x86, 0x2d, 0x5c, 0x34, 0x5f, 0xb0, 0xe1, 0x35, 0xd3, 0x86, 0xd4, 0x0b, 0xc7, 0x18, 0xc3, 0x52,
	0xea, 0x5a, 0x6a, 0x5c, 0x10, 0xcd, 0x70, 0x9b, 0x14, 0xcc, 0x90, 0x04, 0x97, 0x92, 0x0b, 0x8f,
	0x5f, 0x54, 0xb2, 0x92, 0xf6, 0x88, 0xbb, 0x93, 0x9f, 0x1e, 0xc4, 0xe8, 0x2d, 0x2d, 0xfc, 0xf8,
	0xfb, 0x00, 0x9c, 0x5c, 0xb9, 0x60, 0x1f, 0x0d, 0x31, 0x2c, 0x7a, 0x0f, 0xce, 0x14, 0xbb, 0x26,
	0x8a, 0xea, 0x7c, 0x41, 0x14, 0xa9, 0x75, 0x1c, 0x4e, 0xc3, 0xd9, 0xf0, 0x12, 0xa2, 0xbd, 0xc0,
	0x28, 0x73, 0xd7, 0x3e, 0xd8, 0x5b, 0xe9, 0xd1, 0xea, 0xe7, 0x24, 0xc8, 0x4e, 0xd5, 0xbf, 0xc3,
	0xe8, 0x29, 0x38, 0x77, 0x83, 0xdc, 0xf3, 0x72, 0x4e, 0xe3, 0x3b, 0xd3, 0x70, 0x76, 0x9a, 0x8d,
	0x1c, 0xf0, 0xd2, 0xcd, 0xdf, 0xd2, 0xe8, 0x1d, 0xb8, 0x3f, 0xe7, 0xd5, 0x9c, 0x69, 0x93, 0xf7,
	0x01, 0x0a, 0x4e, 0xe3, 0x81, 0x75, 0xbf, 0x38, 0x70, 0x4f, 0x39, 0xf5, 0x9e, 0xe7, 0x9e, 0xe6,
	0xf3, 0xa4, 0x9c, 0x46, 0x25, 0x78, 0x58, 0x36, 0x4a, 0x31, 0xb1, 0xd3, 0xea, 0x03, 0x30, 0x41,
	0xe3, 0x23, 0xab, 0x39, 0x46, 0xae, 0x71, 0xd4, 0x37, 0x8e, 0x3e, 0xf5, 0x8d, 0xa7, 0xf7, 0x3a,
	0xe5, 0xe5, 0xaf, 0x49, 0x98, 0xc5, 0x5e, 0xc8, 0xab, 0xfb, 0xbc, 0xaf, 0x05, 0x8d, 0xde, 0x80,
	0xd1, 0x9e, 0x49, 0x7c, 0x77, 0x3a, 0x98, 0x0d, 0x2f, 0x1f, 0x20, 0xb7, 0x29, 0xd4, 0x6d, 0x0a,
	0xf9, 0x4d, 0xa1, 0x57, 0x92, 0x0b, 0x9f, 0xf8, 0xec, 0x7f, 0xcd, 0x28, 0x05, 0x27, 0x82, 0xdd,
	0xec, 0x64, 0x8e, 0x6f, 0x27, 0x33, 0xec, 0x48, 0xfd, 0x5f, 0x5f, 0xad, 0xfe, 0xc0, 0x60, 0xb5,
	0x81, 0xe1, 0x7a, 0x03, 0xc3, 0xdf, 0x1b, 0x18, 0x2e, 0xb7, 0x30, 0x58, 0x6f, 0x61, 0xf0, 0x63,
	0x0b, 0x83, 0xcf, 0x4f, 0x2a, 0x6e, 0xe6, 0x4d, 0x81, 0x4a, 0x59, 0xe3, 0xae, 0xc9, 0x67, 0x82,
	0x99, 0x6b, 0xa9, 0xbe, 0xda, 0x0f, 0xdc, 0xbe, 0xc0, 0x37, 0xfd, 0xbb, 0x28, 0x8e, 0x6d, 0x1d,
	0xcf, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xbd, 0xb8, 0xc3, 0x79, 0xc0, 0x02, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextRewards) > 0 {
		for iNdEx := len(m.NextRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NextRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.CurrentRewards) > 0 {
		for iNdEx := len(m.CurrentRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CurrentRewardsAuctionEnd, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CurrentRewardsAuctionEnd):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGenesis(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	{
		size, err := m.HighestRewardsBid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.RewardAuctionId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.RewardAuctionId))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.RewardsParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RewardsParams.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.RewardAuctionId != 0 {
		n += 1 + sovGenesis(uint64(m.RewardAuctionId))
	}
	l = m.HighestRewardsBid.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CurrentRewardsAuctionEnd)
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.CurrentRewards) > 0 {
		for _, e := range m.CurrentRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.NextRewards) > 0 {
		for _, e := range m.NextRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardsParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAuctionId", wireType)
			}
			m.RewardAuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardAuctionId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestRewardsBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HighestRewardsBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRewardsAuctionEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CurrentRewardsAuctionEnd, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentRewards = append(m.CurrentRewards, types.Coin{})
			if err := m.CurrentRewards[len(m.CurrentRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextRewards = append(m.NextRewards, types.Coin{})
			if err := m.NextRewards[len(m.NextRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
