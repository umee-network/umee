// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/auction/v1/tx.proto

package auction

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgGovSetRewardsParams updates rewards parameters.
type MsgGovSetRewardsParams struct {
	// authority must be the address of the governance account.
	Authority string        `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Params    RewardsParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgGovSetRewardsParams) Reset()         { *m = MsgGovSetRewardsParams{} }
func (m *MsgGovSetRewardsParams) String() string { return proto.CompactTextString(m) }
func (*MsgGovSetRewardsParams) ProtoMessage()    {}
func (*MsgGovSetRewardsParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_44a5dea2889d94ea, []int{0}
}
func (m *MsgGovSetRewardsParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovSetRewardsParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovSetRewardsParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovSetRewardsParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovSetRewardsParams.Merge(m, src)
}
func (m *MsgGovSetRewardsParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovSetRewardsParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovSetRewardsParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovSetRewardsParams proto.InternalMessageInfo

// MsgGovSetRewardsParamsResp defines the Msg/GovSetRewardsParams response type.
type MsgGovSetRewardsParamsResp struct {
}

func (m *MsgGovSetRewardsParamsResp) Reset()         { *m = MsgGovSetRewardsParamsResp{} }
func (m *MsgGovSetRewardsParamsResp) String() string { return proto.CompactTextString(m) }
func (*MsgGovSetRewardsParamsResp) ProtoMessage()    {}
func (*MsgGovSetRewardsParamsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_44a5dea2889d94ea, []int{1}
}
func (m *MsgGovSetRewardsParamsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovSetRewardsParamsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovSetRewardsParamsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovSetRewardsParamsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovSetRewardsParamsResp.Merge(m, src)
}
func (m *MsgGovSetRewardsParamsResp) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovSetRewardsParamsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovSetRewardsParamsResp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovSetRewardsParamsResp proto.InternalMessageInfo

// MsgRewardsBid places a bid for a reword auction.
type MsgRewardsBid struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// amount of the bid in the base tokens
	BidAmount types.Coin `protobuf:"bytes,2,opt,name=bid_amount,json=bidAmount,proto3" json:"bid_amount"`
	// the current auction ID being bid on. Fails if the ID is not an ID of the current auction.
	Id uint32 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgRewardsBid) Reset()         { *m = MsgRewardsBid{} }
func (m *MsgRewardsBid) String() string { return proto.CompactTextString(m) }
func (*MsgRewardsBid) ProtoMessage()    {}
func (*MsgRewardsBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_44a5dea2889d94ea, []int{2}
}
func (m *MsgRewardsBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRewardsBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRewardsBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRewardsBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRewardsBid.Merge(m, src)
}
func (m *MsgRewardsBid) XXX_Size() int {
	return m.Size()
}
func (m *MsgRewardsBid) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRewardsBid.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRewardsBid proto.InternalMessageInfo

// MsgRewardsBidResp response type for Msg/RewardsBid
type MsgRewardsBidResp struct {
}

func (m *MsgRewardsBidResp) Reset()         { *m = MsgRewardsBidResp{} }
func (m *MsgRewardsBidResp) String() string { return proto.CompactTextString(m) }
func (*MsgRewardsBidResp) ProtoMessage()    {}
func (*MsgRewardsBidResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_44a5dea2889d94ea, []int{3}
}
func (m *MsgRewardsBidResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRewardsBidResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRewardsBidResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRewardsBidResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRewardsBidResp.Merge(m, src)
}
func (m *MsgRewardsBidResp) XXX_Size() int {
	return m.Size()
}
func (m *MsgRewardsBidResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRewardsBidResp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRewardsBidResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgGovSetRewardsParams)(nil), "umee.auction.v1.MsgGovSetRewardsParams")
	proto.RegisterType((*MsgGovSetRewardsParamsResp)(nil), "umee.auction.v1.MsgGovSetRewardsParamsResp")
	proto.RegisterType((*MsgRewardsBid)(nil), "umee.auction.v1.MsgRewardsBid")
	proto.RegisterType((*MsgRewardsBidResp)(nil), "umee.auction.v1.MsgRewardsBidResp")
}

func init() { proto.RegisterFile("umee/auction/v1/tx.proto", fileDescriptor_44a5dea2889d94ea) }

var fileDescriptor_44a5dea2889d94ea = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x31, 0x6f, 0x13, 0x31,
	0x14, 0xc7, 0xcf, 0x29, 0x8a, 0x88, 0x51, 0x41, 0x5c, 0xab, 0x70, 0x3d, 0x81, 0x13, 0xdd, 0x42,
	0x00, 0xd5, 0x56, 0x8a, 0xd4, 0xa1, 0x42, 0x48, 0x0d, 0x43, 0xa7, 0x48, 0xd5, 0x75, 0x63, 0xa9,
	0xee, 0x62, 0xcb, 0xb5, 0xaa, 0x3b, 0x47, 0xb6, 0xef, 0x5a, 0x46, 0x98, 0x18, 0xf9, 0x08, 0x9d,
	0x98, 0x19, 0xf8, 0x08, 0x0c, 0x19, 0x2b, 0x26, 0x26, 0x04, 0xc9, 0x00, 0x1f, 0x03, 0xf9, 0xce,
	0x55, 0x68, 0x38, 0xa1, 0x6e, 0xf7, 0xee, 0xef, 0xff, 0xff, 0xfd, 0xde, 0xb3, 0x61, 0x50, 0x64,
	0x8c, 0x91, 0xa4, 0x98, 0x18, 0x21, 0x73, 0x52, 0x0e, 0x89, 0x39, 0xc7, 0x53, 0x25, 0x8d, 0xf4,
	0xef, 0x59, 0x05, 0x3b, 0x05, 0x97, 0xc3, 0x10, 0x4d, 0xa4, 0xce, 0xa4, 0x26, 0x69, 0xa2, 0x19,
	0x29, 0x87, 0x29, 0x33, 0xc9, 0x90, 0x4c, 0xa4, 0xc8, 0x6b, 0x43, 0xb8, 0x55, 0xeb, 0xc7, 0x55,
	0x45, 0xea, 0xc2, 0x49, 0x0f, 0x9c, 0x35, 0xd3, 0xdc, 0xf6, 0xc8, 0x34, 0x77, 0xc2, 0x26, 0x97,
	0x5c, 0xd6, 0x06, 0xfb, 0xe5, 0xfe, 0x3e, 0x5a, 0x85, 0xba, 0xa2, 0xa8, 0xe4, 0xe8, 0x23, 0x80,
	0xdd, 0xb1, 0xe6, 0x07, 0xb2, 0x3c, 0x62, 0x26, 0x66, 0x67, 0x89, 0xa2, 0xfa, 0x30, 0x51, 0x49,
	0xa6, 0xfd, 0x5d, 0xd8, 0x49, 0x0a, 0x73, 0x22, 0x95, 0x30, 0x6f, 0x02, 0xd0, 0x07, 0x83, 0xce,
	0x28, 0xf8, 0xfa, 0x79, 0x7b, 0xd3, 0xd1, 0xec, 0x53, 0xaa, 0x98, 0xd6, 0x47, 0x46, 0x89, 0x9c,
	0xc7, 0xcb, 0xa3, 0xfe, 0x0b, 0xd8, 0x9e, 0x56, 0x09, 0x41, 0xab, 0x0f, 0x06, 0x77, 0x76, 0x10,
	0x5e, 0x99, 0x1e, 0x5f, 0xeb, 0x33, 0xba, 0x35, 0xfb, 0xde, 0xf3, 0x62, 0xe7, 0xd9, 0xeb, 0xbe,
	0xbf, 0xe8, 0x79, 0xbf, 0x2f, 0x7a, 0xe0, 0xdd, 0xaf, 0x4f, 0x4f, 0x97, 0xa9, 0xd1, 0x43, 0x18,
	0x36, 0x73, 0xc6, 0x4c, 0x4f, 0xa3, 0xb7, 0x00, 0xae, 0x8f, 0x35, 0x77, 0xc2, 0x48, 0x50, 0xbf,
	0x0b, 0xdb, 0x9a, 0xe5, 0x94, 0xa9, 0x1a, 0x3d, 0x76, 0x95, 0xff, 0x12, 0xc2, 0x54, 0xd0, 0xe3,
	0x24, 0x93, 0x45, 0x6e, 0x1c, 0xe1, 0x16, 0x76, 0x33, 0xd9, 0xeb, 0xc0, 0xee, 0x3a, 0xf0, 0x2b,
	0x29, 0x72, 0x07, 0xd7, 0x49, 0x05, 0xdd, 0xaf, 0x1c, 0xfe, 0x5d, 0xd8, 0x12, 0x34, 0x58, 0xeb,
	0x83, 0xc1, 0x7a, 0xdc, 0x12, 0x74, 0xef, 0xb6, 0xe3, 0xf5, 0xa2, 0x0d, 0x78, 0xff, 0x1a, 0x82,
	0x05, 0xdb, 0xf9, 0x02, 0xe0, 0xda, 0x58, 0x73, 0xff, 0x14, 0x6e, 0x34, 0xed, 0xf8, 0xf1, 0x3f,
	0xbb, 0x69, 0x1e, 0x32, 0x7c, 0x76, 0xc3, 0x83, 0xb6, 0xa9, 0x7f, 0x08, 0xe1, 0x5f, 0x9b, 0x40,
	0x4d, 0xd6, 0xa5, 0x1e, 0x46, 0xff, 0xd7, 0x6d, 0xe2, 0xe8, 0x60, 0xf6, 0x13, 0x79, 0xb3, 0x39,
	0x02, 0x97, 0x73, 0x04, 0x7e, 0xcc, 0x11, 0xf8, 0xb0, 0x40, 0xde, 0xe5, 0x02, 0x79, 0xdf, 0x16,
	0xc8, 0x7b, 0xfd, 0x84, 0x0b, 0x73, 0x52, 0xa4, 0x78, 0x22, 0x33, 0x62, 0xb3, 0xb6, 0x73, 0x66,
	0xce, 0xa4, 0x3a, 0xad, 0x0a, 0x52, 0xee, 0x92, 0xf3, 0xab, 0x57, 0x97, 0xb6, 0xab, 0x67, 0xf7,
	0xfc, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x45, 0x2f, 0x2a, 0xec, 0x2c, 0x03, 0x00, 0x00,
}

func (this *MsgGovSetRewardsParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgGovSetRewardsParams)
	if !ok {
		that2, ok := that.(MsgGovSetRewardsParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Authority != that1.Authority {
		return false
	}
	if !this.Params.Equal(&that1.Params) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	GovSetRewardsParams(ctx context.Context, in *MsgGovSetRewardsParams, opts ...grpc.CallOption) (*MsgGovSetRewardsParamsResp, error)
	RewardsBid(ctx context.Context, in *MsgRewardsBid, opts ...grpc.CallOption) (*MsgRewardsBidResp, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) GovSetRewardsParams(ctx context.Context, in *MsgGovSetRewardsParams, opts ...grpc.CallOption) (*MsgGovSetRewardsParamsResp, error) {
	out := new(MsgGovSetRewardsParamsResp)
	err := c.cc.Invoke(ctx, "/umee.auction.v1.Msg/GovSetRewardsParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RewardsBid(ctx context.Context, in *MsgRewardsBid, opts ...grpc.CallOption) (*MsgRewardsBidResp, error) {
	out := new(MsgRewardsBidResp)
	err := c.cc.Invoke(ctx, "/umee.auction.v1.Msg/RewardsBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	GovSetRewardsParams(context.Context, *MsgGovSetRewardsParams) (*MsgGovSetRewardsParamsResp, error)
	RewardsBid(context.Context, *MsgRewardsBid) (*MsgRewardsBidResp, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) GovSetRewardsParams(ctx context.Context, req *MsgGovSetRewardsParams) (*MsgGovSetRewardsParamsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovSetRewardsParams not implemented")
}
func (*UnimplementedMsgServer) RewardsBid(ctx context.Context, req *MsgRewardsBid) (*MsgRewardsBidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsBid not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_GovSetRewardsParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovSetRewardsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovSetRewardsParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umee.auction.v1.Msg/GovSetRewardsParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovSetRewardsParams(ctx, req.(*MsgGovSetRewardsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RewardsBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRewardsBid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RewardsBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umee.auction.v1.Msg/RewardsBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RewardsBid(ctx, req.(*MsgRewardsBid))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "umee.auction.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GovSetRewardsParams",
			Handler:    _Msg_GovSetRewardsParams_Handler,
		},
		{
			MethodName: "RewardsBid",
			Handler:    _Msg_RewardsBid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "umee/auction/v1/tx.proto",
}

func (m *MsgGovSetRewardsParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovSetRewardsParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovSetRewardsParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGovSetRewardsParamsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovSetRewardsParamsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovSetRewardsParamsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRewardsBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRewardsBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRewardsBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.BidAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRewardsBidResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRewardsBidResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRewardsBidResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgGovSetRewardsParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgGovSetRewardsParamsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRewardsBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.BidAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgRewardsBidResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgGovSetRewardsParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovSetRewardsParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovSetRewardsParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovSetRewardsParamsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovSetRewardsParamsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovSetRewardsParamsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRewardsBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRewardsBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRewardsBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRewardsBidResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRewardsBidResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRewardsBidResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
