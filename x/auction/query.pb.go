// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/auction/v1/query.proto

package auction

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Query type for Query/RewardsParams
type QueryRewardsParams struct {
}

func (m *QueryRewardsParams) Reset()         { *m = QueryRewardsParams{} }
func (m *QueryRewardsParams) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsParams) ProtoMessage()    {}
func (*QueryRewardsParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1df854d377e58e5, []int{0}
}
func (m *QueryRewardsParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsParams.Merge(m, src)
}
func (m *QueryRewardsParams) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsParams proto.InternalMessageInfo

// Response type for Query/RewardsParams
type QueryRewardsParamsResponse struct {
	Params RewardsParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryRewardsParamsResponse) Reset()         { *m = QueryRewardsParamsResponse{} }
func (m *QueryRewardsParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsParamsResponse) ProtoMessage()    {}
func (*QueryRewardsParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1df854d377e58e5, []int{1}
}
func (m *QueryRewardsParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsParamsResponse.Merge(m, src)
}
func (m *QueryRewardsParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsParamsResponse proto.InternalMessageInfo

// Query type for QueryRewardsAuction
type QueryRewardsAuction struct {
	// If zero or not present, the current auction is returned
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryRewardsAuction) Reset()         { *m = QueryRewardsAuction{} }
func (m *QueryRewardsAuction) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsAuction) ProtoMessage()    {}
func (*QueryRewardsAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1df854d377e58e5, []int{2}
}
func (m *QueryRewardsAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsAuction.Merge(m, src)
}
func (m *QueryRewardsAuction) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsAuction.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsAuction proto.InternalMessageInfo

// Response type for Query/RewardsAuctionResponse
type QueryRewardsAuctionResponse struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// highest bidder
	Bidder  string       `protobuf:"bytes,2,opt,name=bidder,proto3" json:"bidder,omitempty"`
	Bid     types.Coin   `protobuf:"bytes,3,opt,name=bid,proto3" json:"bid"`
	Rewards []types.Coin `protobuf:"bytes,4,rep,name=rewards,proto3" json:"rewards"`
	EndsAt  time.Time    `protobuf:"bytes,5,opt,name=ends_at,json=endsAt,proto3,stdtime" json:"ends_at"`
}

func (m *QueryRewardsAuctionResponse) Reset()         { *m = QueryRewardsAuctionResponse{} }
func (m *QueryRewardsAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsAuctionResponse) ProtoMessage()    {}
func (*QueryRewardsAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1df854d377e58e5, []int{3}
}
func (m *QueryRewardsAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsAuctionResponse.Merge(m, src)
}
func (m *QueryRewardsAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsAuctionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryRewardsParams)(nil), "umee.auction.v1.QueryRewardsParams")
	proto.RegisterType((*QueryRewardsParamsResponse)(nil), "umee.auction.v1.QueryRewardsParamsResponse")
	proto.RegisterType((*QueryRewardsAuction)(nil), "umee.auction.v1.QueryRewardsAuction")
	proto.RegisterType((*QueryRewardsAuctionResponse)(nil), "umee.auction.v1.QueryRewardsAuctionResponse")
}

func init() { proto.RegisterFile("umee/auction/v1/query.proto", fileDescriptor_e1df854d377e58e5) }

var fileDescriptor_e1df854d377e58e5 = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xb6, 0x9d, 0x36, 0x85, 0x43, 0x2d, 0xd2, 0x91, 0xc1, 0x75, 0xc1, 0x09, 0x06, 0x44, 0x11,
	0xf4, 0x0e, 0x17, 0x09, 0x09, 0x09, 0x86, 0x84, 0x81, 0x15, 0x0c, 0x53, 0x97, 0xea, 0x1c, 0x1f,
	0xe6, 0x04, 0xf6, 0x19, 0xdf, 0x39, 0x85, 0x95, 0x81, 0x01, 0x31, 0x54, 0x62, 0xe6, 0xbf, 0xe0,
	0x8f, 0xc8, 0x58, 0xc1, 0xc2, 0xc4, 0x8f, 0x84, 0x3f, 0x04, 0xf9, 0xee, 0x5c, 0x51, 0x07, 0x50,
	0x36, 0xfb, 0x7d, 0xdf, 0xf7, 0xee, 0x7b, 0xdf, 0x7b, 0x60, 0xab, 0xca, 0x28, 0xc5, 0xa4, 0x1a,
	0x4b, 0xc6, 0x73, 0x3c, 0x09, 0xf1, 0xcb, 0x8a, 0x96, 0xaf, 0x51, 0x51, 0x72, 0xc9, 0xe1, 0xd9,
	0x1a, 0x44, 0x06, 0x44, 0x93, 0xd0, 0xeb, 0xa7, 0x9c, 0xa7, 0x2f, 0x28, 0x56, 0x70, 0x5c, 0x3d,
	0xc5, 0x92, 0x65, 0x54, 0x48, 0x92, 0x15, 0x5a, 0xe1, 0x9d, 0x37, 0x04, 0x52, 0x30, 0x4c, 0xf2,
	0x9c, 0x4b, 0x52, 0x4b, 0x85, 0x41, 0x37, 0xc7, 0x5c, 0x64, 0x5c, 0xec, 0xab, 0x3f, 0xac, 0x7f,
	0x0c, 0xd4, 0x4b, 0x79, 0xca, 0x75, 0xbd, 0xfe, 0x32, 0xd5, 0x0b, 0x6d, 0x77, 0x8d, 0x17, 0x0d,
	0xfb, 0xba, 0x05, 0x8e, 0x89, 0xa0, 0x78, 0x12, 0xc6, 0x54, 0x92, 0x10, 0x8f, 0x39, 0x33, 0x78,
	0xd0, 0x03, 0xf0, 0x51, 0x3d, 0x4e, 0x44, 0x0f, 0x48, 0x99, 0x88, 0x87, 0xa4, 0x24, 0x99, 0x08,
	0xf6, 0x80, 0xb7, 0x58, 0x8d, 0xa8, 0x28, 0x78, 0x2e, 0x28, 0xbc, 0x0b, 0xba, 0x85, 0xaa, 0xb8,
	0xf6, 0xc0, 0xde, 0x3e, 0xb3, 0xeb, 0xa3, 0x56, 0x08, 0xe8, 0x84, 0x6e, 0xb4, 0x32, 0xfd, 0xd6,
	0xb7, 0x22, 0xa3, 0x09, 0xae, 0x80, 0x73, 0x7f, 0xf6, 0x1e, 0x6a, 0x15, 0xdc, 0x00, 0x0e, 0x4b,
	0x54, 0xc3, 0xf5, 0xc8, 0x61, 0x49, 0xf0, 0xde, 0x01, 0x5b, 0x7f, 0xe1, 0x1d, 0x9b, 0x68, 0xf1,
	0xe1, 0x4d, 0xd0, 0x8d, 0x59, 0x92, 0xd0, 0xd2, 0x75, 0x06, 0xf6, 0xf6, 0xe9, 0x91, 0xfb, 0xf9,
	0xd3, 0x4e, 0xcf, 0xe4, 0x37, 0x4c, 0x92, 0x92, 0x0a, 0xf1, 0x58, 0x96, 0x2c, 0x4f, 0x23, 0xc3,
	0x83, 0x21, 0xe8, 0xc4, 0x2c, 0x71, 0x3b, 0x6a, 0x86, 0x4d, 0x64, 0xb8, 0x75, 0x50, 0xc8, 0x04,
	0x85, 0xee, 0x73, 0x96, 0x1b, 0xfb, 0x35, 0x17, 0xde, 0x01, 0x6b, 0xa5, 0xb6, 0xe3, 0xae, 0x0c,
	0x3a, 0xcb, 0xc8, 0x1a, 0x3e, 0xbc, 0x07, 0xd6, 0x68, 0x9e, 0x88, 0x7d, 0x22, 0xdd, 0x55, 0xf5,
	0xa2, 0x87, 0xf4, 0x21, 0xa0, 0xe6, 0x52, 0xd0, 0x93, 0xe6, 0x52, 0x46, 0xa7, 0x6a, 0xed, 0xe1,
	0xf7, 0xbe, 0x1d, 0x75, 0x6b, 0xd1, 0x50, 0xee, 0x7e, 0x74, 0xc0, 0xaa, 0x8a, 0x03, 0xbe, 0xb3,
	0xc1, 0xfa, 0x89, 0x7c, 0xe1, 0xa5, 0x85, 0xfc, 0x17, 0x97, 0xe7, 0x5d, 0x5f, 0x82, 0xd4, 0x84,
	0x1b, 0x5c, 0x7d, 0xf3, 0xe5, 0xd7, 0x07, 0xe7, 0x22, 0xec, 0xe3, 0xf6, 0x75, 0x99, 0x71, 0xb0,
	0x5e, 0x26, 0x7c, 0x6b, 0x83, 0x8d, 0xd6, 0x22, 0x2f, 0xff, 0xf7, 0x21, 0xc3, 0xf2, 0x6e, 0x2c,
	0xc3, 0x3a, 0xf6, 0x33, 0x50, 0x7e, 0x3c, 0xe8, 0xfe, 0xcb, 0xcf, 0xe8, 0xc1, 0xf4, 0xa7, 0x6f,
	0x4d, 0x67, 0xbe, 0x7d, 0x34, 0xf3, 0xed, 0x1f, 0x33, 0xdf, 0x3e, 0x9c, 0xfb, 0xd6, 0xd1, 0xdc,
	0xb7, 0xbe, 0xce, 0x7d, 0x6b, 0xef, 0x5a, 0xca, 0xe4, 0xb3, 0x2a, 0x46, 0x63, 0x9e, 0xa9, 0x0e,
	0x3b, 0x39, 0x95, 0x07, 0xbc, 0x7c, 0xae, 0xdb, 0x4d, 0x6e, 0xe3, 0x57, 0x4d, 0xcf, 0xb8, 0xab,
	0xd6, 0x71, 0xeb, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x0a, 0x81, 0x58, 0xf6, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// QueryRewardParams queries parameters for the reward auciton.
	RewardsParams(ctx context.Context, in *QueryRewardsParams, opts ...grpc.CallOption) (*QueryRewardsParamsResponse, error)
	// RewardAuction queries the information of the auction by ID. If ID is ommitted, returns
	// current reward auction.
	RewardsAuction(ctx context.Context, in *QueryRewardsAuction, opts ...grpc.CallOption) (*QueryRewardsAuctionResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) RewardsParams(ctx context.Context, in *QueryRewardsParams, opts ...grpc.CallOption) (*QueryRewardsParamsResponse, error) {
	out := new(QueryRewardsParamsResponse)
	err := c.cc.Invoke(ctx, "/umee.auction.v1.Query/RewardsParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardsAuction(ctx context.Context, in *QueryRewardsAuction, opts ...grpc.CallOption) (*QueryRewardsAuctionResponse, error) {
	out := new(QueryRewardsAuctionResponse)
	err := c.cc.Invoke(ctx, "/umee.auction.v1.Query/RewardsAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// QueryRewardParams queries parameters for the reward auciton.
	RewardsParams(context.Context, *QueryRewardsParams) (*QueryRewardsParamsResponse, error)
	// RewardAuction queries the information of the auction by ID. If ID is ommitted, returns
	// current reward auction.
	RewardsAuction(context.Context, *QueryRewardsAuction) (*QueryRewardsAuctionResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) RewardsParams(ctx context.Context, req *QueryRewardsParams) (*QueryRewardsParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsParams not implemented")
}
func (*UnimplementedQueryServer) RewardsAuction(ctx context.Context, req *QueryRewardsAuction) (*QueryRewardsAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsAuction not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_RewardsParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umee.auction.v1.Query/RewardsParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsParams(ctx, req.(*QueryRewardsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardsAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsAuction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umee.auction.v1.Query/RewardsAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsAuction(ctx, req.(*QueryRewardsAuction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "umee.auction.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RewardsParams",
			Handler:    _Query_RewardsParams_Handler,
		},
		{
			MethodName: "RewardsAuction",
			Handler:    _Query_RewardsAuction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "umee/auction/v1/query.proto",
}

func (m *QueryRewardsParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRewardsParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRewardsAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndsAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndsAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintQuery(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.Bid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryRewardsParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRewardsParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRewardsAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryRewardsAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Bid.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndsAt)
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryRewardsParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndsAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndsAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
