// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/ugov/v1/query.proto

package ugov

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryMinGasPrice is a request type.
type QueryMinGasPrice struct {
}

func (m *QueryMinGasPrice) Reset()         { *m = QueryMinGasPrice{} }
func (m *QueryMinGasPrice) String() string { return proto.CompactTextString(m) }
func (*QueryMinGasPrice) ProtoMessage()    {}
func (*QueryMinGasPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_25fa04679024a47d, []int{0}
}
func (m *QueryMinGasPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMinGasPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMinGasPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMinGasPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMinGasPrice.Merge(m, src)
}
func (m *QueryMinGasPrice) XXX_Size() int {
	return m.Size()
}
func (m *QueryMinGasPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMinGasPrice.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMinGasPrice proto.InternalMessageInfo

// QueryMinGasPriceResponse response type.
type QueryMinGasPriceResponse struct {
	MinGasPrice types.DecCoin `protobuf:"bytes,1,opt,name=min_gas_price,json=minGasPrice,proto3" json:"min_gas_price"`
}

func (m *QueryMinGasPriceResponse) Reset()         { *m = QueryMinGasPriceResponse{} }
func (m *QueryMinGasPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMinGasPriceResponse) ProtoMessage()    {}
func (*QueryMinGasPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25fa04679024a47d, []int{1}
}
func (m *QueryMinGasPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMinGasPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMinGasPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMinGasPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMinGasPriceResponse.Merge(m, src)
}
func (m *QueryMinGasPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMinGasPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMinGasPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMinGasPriceResponse proto.InternalMessageInfo

// QueryEmergencyGroup request type.
type QueryEmergencyGroup struct {
}

func (m *QueryEmergencyGroup) Reset()         { *m = QueryEmergencyGroup{} }
func (m *QueryEmergencyGroup) String() string { return proto.CompactTextString(m) }
func (*QueryEmergencyGroup) ProtoMessage()    {}
func (*QueryEmergencyGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_25fa04679024a47d, []int{2}
}
func (m *QueryEmergencyGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEmergencyGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEmergencyGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEmergencyGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEmergencyGroup.Merge(m, src)
}
func (m *QueryEmergencyGroup) XXX_Size() int {
	return m.Size()
}
func (m *QueryEmergencyGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEmergencyGroup.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEmergencyGroup proto.InternalMessageInfo

// QueryEmergencyGroupResponse response type.
type QueryEmergencyGroupResponse struct {
	EmergencyGroup string `protobuf:"bytes,1,opt,name=emergency_group,json=emergencyGroup,proto3" json:"emergency_group,omitempty"`
}

func (m *QueryEmergencyGroupResponse) Reset()         { *m = QueryEmergencyGroupResponse{} }
func (m *QueryEmergencyGroupResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEmergencyGroupResponse) ProtoMessage()    {}
func (*QueryEmergencyGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25fa04679024a47d, []int{3}
}
func (m *QueryEmergencyGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEmergencyGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEmergencyGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEmergencyGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEmergencyGroupResponse.Merge(m, src)
}
func (m *QueryEmergencyGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEmergencyGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEmergencyGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEmergencyGroupResponse proto.InternalMessageInfo

// QueryLiquidationParams request type.
type QueryLiquidationParams struct {
}

func (m *QueryLiquidationParams) Reset()         { *m = QueryLiquidationParams{} }
func (m *QueryLiquidationParams) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidationParams) ProtoMessage()    {}
func (*QueryLiquidationParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_25fa04679024a47d, []int{4}
}
func (m *QueryLiquidationParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidationParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidationParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidationParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidationParams.Merge(m, src)
}
func (m *QueryLiquidationParams) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidationParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidationParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidationParams proto.InternalMessageInfo

// QueryLiquidationParamsResponse response type.
type QueryLiquidationParamsResponse struct {
	LiquidationParams LiquidationParams `protobuf:"bytes,1,opt,name=liquidation_params,json=liquidationParams,proto3" json:"liquidation_params"`
}

func (m *QueryLiquidationParamsResponse) Reset()         { *m = QueryLiquidationParamsResponse{} }
func (m *QueryLiquidationParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidationParamsResponse) ProtoMessage()    {}
func (*QueryLiquidationParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25fa04679024a47d, []int{5}
}
func (m *QueryLiquidationParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidationParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidationParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidationParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidationParamsResponse.Merge(m, src)
}
func (m *QueryLiquidationParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidationParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidationParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidationParamsResponse proto.InternalMessageInfo

// QueryInflationCycleStartTime request type.
type QueryInflationCycleStartTime struct {
}

func (m *QueryInflationCycleStartTime) Reset()         { *m = QueryInflationCycleStartTime{} }
func (m *QueryInflationCycleStartTime) String() string { return proto.CompactTextString(m) }
func (*QueryInflationCycleStartTime) ProtoMessage()    {}
func (*QueryInflationCycleStartTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_25fa04679024a47d, []int{6}
}
func (m *QueryInflationCycleStartTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInflationCycleStartTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInflationCycleStartTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInflationCycleStartTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInflationCycleStartTime.Merge(m, src)
}
func (m *QueryInflationCycleStartTime) XXX_Size() int {
	return m.Size()
}
func (m *QueryInflationCycleStartTime) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInflationCycleStartTime.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInflationCycleStartTime proto.InternalMessageInfo

// QueryInflationCycleStartTimeResponse response type.
type QueryInflationCycleStartTimeResponse struct {
	InflationCycleStartTime *time.Time `protobuf:"bytes,1,opt,name=inflation_cycle_start_time,json=inflationCycleStartTime,proto3,stdtime" json:"inflation_cycle_start_time,omitempty"`
}

func (m *QueryInflationCycleStartTimeResponse) Reset()         { *m = QueryInflationCycleStartTimeResponse{} }
func (m *QueryInflationCycleStartTimeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInflationCycleStartTimeResponse) ProtoMessage()    {}
func (*QueryInflationCycleStartTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25fa04679024a47d, []int{7}
}
func (m *QueryInflationCycleStartTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInflationCycleStartTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInflationCycleStartTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInflationCycleStartTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInflationCycleStartTimeResponse.Merge(m, src)
}
func (m *QueryInflationCycleStartTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInflationCycleStartTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInflationCycleStartTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInflationCycleStartTimeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryMinGasPrice)(nil), "umee.ugov.v1.QueryMinGasPrice")
	proto.RegisterType((*QueryMinGasPriceResponse)(nil), "umee.ugov.v1.QueryMinGasPriceResponse")
	proto.RegisterType((*QueryEmergencyGroup)(nil), "umee.ugov.v1.QueryEmergencyGroup")
	proto.RegisterType((*QueryEmergencyGroupResponse)(nil), "umee.ugov.v1.QueryEmergencyGroupResponse")
	proto.RegisterType((*QueryLiquidationParams)(nil), "umee.ugov.v1.QueryLiquidationParams")
	proto.RegisterType((*QueryLiquidationParamsResponse)(nil), "umee.ugov.v1.QueryLiquidationParamsResponse")
	proto.RegisterType((*QueryInflationCycleStartTime)(nil), "umee.ugov.v1.QueryInflationCycleStartTime")
	proto.RegisterType((*QueryInflationCycleStartTimeResponse)(nil), "umee.ugov.v1.QueryInflationCycleStartTimeResponse")
}

func init() { proto.RegisterFile("umee/ugov/v1/query.proto", fileDescriptor_25fa04679024a47d) }

var fileDescriptor_25fa04679024a47d = []byte{
	// 628 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x4f, 0xd4, 0x4e,
	0x1c, 0xc6, 0xb7, 0xbf, 0xf0, 0x33, 0x3a, 0x28, 0xca, 0x88, 0xb2, 0x16, 0xe8, 0x62, 0x45, 0x82,
	0xc6, 0xce, 0x64, 0x31, 0xbe, 0x00, 0x16, 0x94, 0x98, 0x68, 0x82, 0x0b, 0x27, 0x2f, 0x75, 0x5a,
	0x86, 0x3a, 0x71, 0x3b, 0x53, 0x3a, 0x6d, 0x15, 0x8f, 0x26, 0x1e, 0xbc, 0x61, 0x7c, 0x03, 0xbe,
	0x08, 0x5f, 0x81, 0xa7, 0x3d, 0x12, 0xbd, 0x78, 0x42, 0x05, 0x5f, 0x88, 0xe9, 0xf4, 0x8f, 0x5b,
	0xb6, 0xfc, 0xb9, 0xed, 0xcc, 0xf3, 0xec, 0xf7, 0x79, 0xbe, 0xd3, 0x0f, 0x68, 0xc6, 0x3e, 0xa5,
	0x38, 0xf6, 0x44, 0x82, 0x93, 0x36, 0xde, 0x8e, 0x69, 0xb8, 0x83, 0x82, 0x50, 0x44, 0x02, 0x5e,
	0x4c, 0x15, 0x94, 0x2a, 0x28, 0x69, 0xeb, 0x86, 0x2b, 0xa4, 0x2f, 0x24, 0x76, 0x88, 0xa4, 0x38,
	0x69, 0x3b, 0x34, 0x22, 0x6d, 0xec, 0x0a, 0xc6, 0x33, 0xb7, 0x7e, 0x23, 0xd3, 0x6d, 0x75, 0xc2,
	0xd9, 0x21, 0x97, 0x26, 0x3c, 0xe1, 0x89, 0xec, 0x3e, 0xfd, 0x95, 0xdf, 0x4e, 0x7b, 0x42, 0x78,
	0x3d, 0x8a, 0x49, 0xc0, 0x30, 0xe1, 0x5c, 0x44, 0x24, 0x62, 0x82, 0x17, 0xff, 0x69, 0xe5, 0xaa,
	0x3a, 0x39, 0xf1, 0x16, 0x8e, 0x98, 0x4f, 0x65, 0x44, 0xfc, 0x20, 0x37, 0x4c, 0x56, 0x7a, 0xab,
	0x96, 0x4a, 0x30, 0x21, 0xb8, 0xf2, 0x2c, 0xdd, 0xe2, 0x29, 0xe3, 0xab, 0x44, 0xae, 0x85, 0xcc,
	0xa5, 0xa6, 0x03, 0x9a, 0x47, 0xef, 0xba, 0x54, 0x06, 0x82, 0x4b, 0x0a, 0x1f, 0x81, 0x4b, 0x3e,
	0xe3, 0xb6, 0x47, 0xd2, 0xee, 0xcc, 0xa5, 0x4d, 0x6d, 0x56, 0x5b, 0x18, 0x5d, 0x9c, 0x46, 0xf9,
	0x0e, 0xe9, 0xc2, 0x28, 0x5f, 0x18, 0xad, 0x50, 0x77, 0x59, 0x30, 0xde, 0x19, 0xe9, 0xef, 0xb7,
	0x1a, 0xdd, 0x51, 0x7f, 0x20, 0xe3, 0x1a, 0xb8, 0xaa, 0x32, 0x1e, 0xfa, 0x34, 0xf4, 0x28, 0x77,
	0x77, 0x56, 0x43, 0x11, 0x07, 0xe6, 0x0b, 0x30, 0x55, 0x73, 0x5d, 0xa6, 0x2f, 0x81, 0xcb, 0xb4,
	0x50, 0x6c, 0x2f, 0x95, 0x54, 0xfe, 0x85, 0x4e, 0xf3, 0xdb, 0x17, 0x6b, 0x22, 0xaf, 0xb0, 0xb4,
	0xb9, 0x19, 0x52, 0x29, 0xd7, 0xa3, 0x90, 0x71, 0xaf, 0x3b, 0x46, 0xab, 0x09, 0x4d, 0x70, 0x5d,
	0x25, 0x3c, 0x61, 0xdb, 0x31, 0xdb, 0x54, 0xaf, 0xb8, 0x46, 0x42, 0xe2, 0x4b, 0x33, 0x01, 0x46,
	0xbd, 0x52, 0xc6, 0x6f, 0x00, 0xd8, 0xfb, 0x27, 0xda, 0x81, 0x52, 0xf3, 0x17, 0x68, 0xa1, 0x41,
	0x00, 0xd0, 0xd0, 0x90, 0xfc, 0x11, 0xc6, 0x7b, 0x43, 0xb9, 0x06, 0x98, 0x56, 0xb9, 0x8f, 0xf9,
	0x56, 0x4f, 0xdd, 0x2f, 0xef, 0xb8, 0x3d, 0xba, 0x1e, 0x91, 0x30, 0xda, 0x60, 0x3e, 0x35, 0x3f,
	0x68, 0x60, 0xee, 0x24, 0x43, 0x59, 0x8f, 0x00, 0x9d, 0x15, 0x16, 0xdb, 0x4d, 0x3d, 0xb6, 0x4c,
	0x4d, 0x76, 0x4a, 0x43, 0x5e, 0x53, 0x47, 0x19, 0x2a, 0xa8, 0x40, 0x05, 0x6d, 0x14, 0xa8, 0x74,
	0xce, 0xf7, 0xf7, 0x5b, 0xda, 0xee, 0xcf, 0x96, 0xd6, 0x9d, 0x64, 0xf5, 0x51, 0x8b, 0x5f, 0x47,
	0xc0, 0xff, 0xaa, 0x0b, 0x7c, 0x0b, 0x46, 0x07, 0xf8, 0x80, 0x46, 0x75, 0xfd, 0xa3, 0xfc, 0xe8,
	0xf3, 0x27, 0xeb, 0xc5, 0x0e, 0xe6, 0xad, 0x77, 0xdf, 0xff, 0x7c, 0xfa, 0x6f, 0x06, 0x4e, 0xe1,
	0x0a, 0xb1, 0x3e, 0xe3, 0x96, 0x47, 0xa4, 0xa5, 0x98, 0x83, 0xef, 0x35, 0x30, 0x56, 0x25, 0x04,
	0xde, 0xac, 0x99, 0x5f, 0xb5, 0xe8, 0x77, 0x4e, 0xb5, 0x94, 0x2d, 0x6e, 0xab, 0x16, 0x2d, 0x38,
	0x53, 0x6d, 0x51, 0xa2, 0x64, 0x29, 0xf6, 0xe0, 0x47, 0x0d, 0x8c, 0x0f, 0x7d, 0x68, 0x38, 0x57,
	0x93, 0x33, 0xe4, 0xd2, 0xef, 0x9d, 0xc5, 0x55, 0x16, 0x5a, 0x50, 0x85, 0x4c, 0x38, 0x5b, 0x2d,
	0x34, 0x00, 0x93, 0x95, 0xd1, 0x08, 0x3f, 0x6b, 0x60, 0xf2, 0x18, 0x50, 0xe0, 0xdd, 0x9a, 0xcc,
	0x63, 0xbc, 0xfa, 0xe2, 0xd9, 0xbd, 0xa7, 0x3d, 0x5b, 0x09, 0x93, 0xa5, 0xa0, 0xec, 0xac, 0xf4,
	0x7f, 0x1b, 0x8d, 0xfe, 0x81, 0xa1, 0xed, 0x1d, 0x18, 0xda, 0xaf, 0x03, 0x43, 0xdb, 0x3d, 0x34,
	0x1a, 0x7b, 0x87, 0x46, 0xe3, 0xc7, 0xa1, 0xd1, 0x78, 0x3e, 0xef, 0xb1, 0xe8, 0x65, 0xec, 0x20,
	0x57, 0xf8, 0x6a, 0x8c, 0xc5, 0x69, 0xf4, 0x5a, 0x84, 0xaf, 0xb2, 0x99, 0xc9, 0x03, 0xfc, 0x46,
	0x0d, 0x76, 0xce, 0x29, 0x82, 0xef, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x04, 0x2a, 0x75, 0xf5,
	0x93, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// MinGasPrice returns minimum transaction fees.
	MinGasPrice(ctx context.Context, in *QueryMinGasPrice, opts ...grpc.CallOption) (*QueryMinGasPriceResponse, error)
	// EmergencyGroup returns emergency group address
	EmergencyGroup(ctx context.Context, in *QueryEmergencyGroup, opts ...grpc.CallOption) (*QueryEmergencyGroupResponse, error)
	// LiquidationParams
	LiquidationParams(ctx context.Context, in *QueryLiquidationParams, opts ...grpc.CallOption) (*QueryLiquidationParamsResponse, error)
	// InflationCycleStartTime returns when inflation cycle is started
	InflationCycleStartTime(ctx context.Context, in *QueryInflationCycleStartTime, opts ...grpc.CallOption) (*QueryInflationCycleStartTimeResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) MinGasPrice(ctx context.Context, in *QueryMinGasPrice, opts ...grpc.CallOption) (*QueryMinGasPriceResponse, error) {
	out := new(QueryMinGasPriceResponse)
	err := c.cc.Invoke(ctx, "/umee.ugov.v1.Query/MinGasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EmergencyGroup(ctx context.Context, in *QueryEmergencyGroup, opts ...grpc.CallOption) (*QueryEmergencyGroupResponse, error) {
	out := new(QueryEmergencyGroupResponse)
	err := c.cc.Invoke(ctx, "/umee.ugov.v1.Query/EmergencyGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidationParams(ctx context.Context, in *QueryLiquidationParams, opts ...grpc.CallOption) (*QueryLiquidationParamsResponse, error) {
	out := new(QueryLiquidationParamsResponse)
	err := c.cc.Invoke(ctx, "/umee.ugov.v1.Query/LiquidationParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InflationCycleStartTime(ctx context.Context, in *QueryInflationCycleStartTime, opts ...grpc.CallOption) (*QueryInflationCycleStartTimeResponse, error) {
	out := new(QueryInflationCycleStartTimeResponse)
	err := c.cc.Invoke(ctx, "/umee.ugov.v1.Query/InflationCycleStartTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// MinGasPrice returns minimum transaction fees.
	MinGasPrice(context.Context, *QueryMinGasPrice) (*QueryMinGasPriceResponse, error)
	// EmergencyGroup returns emergency group address
	EmergencyGroup(context.Context, *QueryEmergencyGroup) (*QueryEmergencyGroupResponse, error)
	// LiquidationParams
	LiquidationParams(context.Context, *QueryLiquidationParams) (*QueryLiquidationParamsResponse, error)
	// InflationCycleStartTime returns when inflation cycle is started
	InflationCycleStartTime(context.Context, *QueryInflationCycleStartTime) (*QueryInflationCycleStartTimeResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) MinGasPrice(ctx context.Context, req *QueryMinGasPrice) (*QueryMinGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinGasPrice not implemented")
}
func (*UnimplementedQueryServer) EmergencyGroup(ctx context.Context, req *QueryEmergencyGroup) (*QueryEmergencyGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmergencyGroup not implemented")
}
func (*UnimplementedQueryServer) LiquidationParams(ctx context.Context, req *QueryLiquidationParams) (*QueryLiquidationParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidationParams not implemented")
}
func (*UnimplementedQueryServer) InflationCycleStartTime(ctx context.Context, req *QueryInflationCycleStartTime) (*QueryInflationCycleStartTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InflationCycleStartTime not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_MinGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMinGasPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MinGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umee.ugov.v1.Query/MinGasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MinGasPrice(ctx, req.(*QueryMinGasPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EmergencyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEmergencyGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EmergencyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umee.ugov.v1.Query/EmergencyGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EmergencyGroup(ctx, req.(*QueryEmergencyGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidationParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidationParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidationParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umee.ugov.v1.Query/LiquidationParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidationParams(ctx, req.(*QueryLiquidationParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InflationCycleStartTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInflationCycleStartTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InflationCycleStartTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umee.ugov.v1.Query/InflationCycleStartTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InflationCycleStartTime(ctx, req.(*QueryInflationCycleStartTime))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "umee.ugov.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MinGasPrice",
			Handler:    _Query_MinGasPrice_Handler,
		},
		{
			MethodName: "EmergencyGroup",
			Handler:    _Query_EmergencyGroup_Handler,
		},
		{
			MethodName: "LiquidationParams",
			Handler:    _Query_LiquidationParams_Handler,
		},
		{
			MethodName: "InflationCycleStartTime",
			Handler:    _Query_InflationCycleStartTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "umee/ugov/v1/query.proto",
}

func (m *QueryMinGasPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMinGasPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMinGasPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMinGasPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMinGasPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMinGasPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MinGasPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEmergencyGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEmergencyGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEmergencyGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryEmergencyGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEmergencyGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEmergencyGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EmergencyGroup) > 0 {
		i -= len(m.EmergencyGroup)
		copy(dAtA[i:], m.EmergencyGroup)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EmergencyGroup)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidationParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidationParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidationParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLiquidationParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidationParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidationParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LiquidationParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryInflationCycleStartTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInflationCycleStartTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInflationCycleStartTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryInflationCycleStartTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInflationCycleStartTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInflationCycleStartTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InflationCycleStartTime != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.InflationCycleStartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.InflationCycleStartTime):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintQuery(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryMinGasPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMinGasPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MinGasPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEmergencyGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryEmergencyGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EmergencyGroup)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidationParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLiquidationParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LiquidationParams.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryInflationCycleStartTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryInflationCycleStartTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InflationCycleStartTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.InflationCycleStartTime)
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryMinGasPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMinGasPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMinGasPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMinGasPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMinGasPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMinGasPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinGasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinGasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEmergencyGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEmergencyGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEmergencyGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEmergencyGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEmergencyGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEmergencyGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmergencyGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmergencyGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidationParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidationParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidationParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidationParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidationParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidationParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInflationCycleStartTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInflationCycleStartTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInflationCycleStartTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInflationCycleStartTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInflationCycleStartTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInflationCycleStartTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflationCycleStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InflationCycleStartTime == nil {
				m.InflationCycleStartTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.InflationCycleStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
