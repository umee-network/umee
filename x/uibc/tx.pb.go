// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/uibc/v1/tx.proto

package uibc

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgGovUpdateQuota defines the Msg/GovUpdateQuota request type.
type MsgGovUpdateQuota struct {
	// authority is the address of the governance account or the Emergency Group.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// description motivating the change. Should be used only when executing by the
	// Emergency Group. Otherwise the x/gov Proposal metadata should be used.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// total quota defines the total outflow of ibc-transfer in USD
	Total github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=total,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"total"`
	// per_denom quota for outflows per denom. All denoms have the same quota size.
	PerDenom github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=per_denom,json=perDenom,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"per_denom"`
	// quota_duration defines quota expires per denom, All denoms have the same expire time.
	QuotaDuration time.Duration `protobuf:"bytes,6,opt,name=quota_duration,json=quotaDuration,proto3,stdduration" json:"quota_duration,omitempty" yaml:"quota_duration"`
	// Params.inflow_outflow_quota_base
	InflowOutflowQuotaBase github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=inflow_outflow_quota_base,json=inflowOutflowQuotaBase,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"inflow_outflow_quota_base"`
	// Params.inflow_outflow_quota_rate
	InflowOutflowQuotaRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=inflow_outflow_quota_rate,json=inflowOutflowQuotaRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"inflow_outflow_quota_rate"`
	// Params.inflow_outflow_token_quota_base
	InflowOutflowTokenQuotaBase github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=inflow_outflow_token_quota_base,json=inflowOutflowTokenQuotaBase,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"inflow_outflow_token_quota_base"`
}

func (m *MsgGovUpdateQuota) Reset()      { *m = MsgGovUpdateQuota{} }
func (*MsgGovUpdateQuota) ProtoMessage() {}
func (*MsgGovUpdateQuota) Descriptor() ([]byte, []int) {
	return fileDescriptor_1982abc7d531f4dc, []int{0}
}
func (m *MsgGovUpdateQuota) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovUpdateQuota) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovUpdateQuota.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovUpdateQuota) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovUpdateQuota.Merge(m, src)
}
func (m *MsgGovUpdateQuota) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovUpdateQuota) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovUpdateQuota.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovUpdateQuota proto.InternalMessageInfo

func (*MsgGovUpdateQuota) XXX_MessageName() string {
	return "umee.uibc.v1.MsgGovUpdateQuota"
}

// MsgGovUpdateQuotaResponse defines response type for the Msg/GovUpdateQuota for with x/gov proposals.
type MsgGovUpdateQuotaResponse struct {
}

func (m *MsgGovUpdateQuotaResponse) Reset()         { *m = MsgGovUpdateQuotaResponse{} }
func (m *MsgGovUpdateQuotaResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGovUpdateQuotaResponse) ProtoMessage()    {}
func (*MsgGovUpdateQuotaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1982abc7d531f4dc, []int{1}
}
func (m *MsgGovUpdateQuotaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovUpdateQuotaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovUpdateQuotaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovUpdateQuotaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovUpdateQuotaResponse.Merge(m, src)
}
func (m *MsgGovUpdateQuotaResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovUpdateQuotaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovUpdateQuotaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovUpdateQuotaResponse proto.InternalMessageInfo

func (*MsgGovUpdateQuotaResponse) XXX_MessageName() string {
	return "umee.uibc.v1.MsgGovUpdateQuotaResponse"
}

// MsgGovSetIBCStatus defines the request type for setting the IBC quota status.
type MsgGovSetIBCStatus struct {
	// authority is the address of the governance account or the Emergency Group.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// description motivating the change. Should be used only when executing by the
	// Emergency Group. Otherwise the x/gov Proposal metadata should be used.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// ibc_status defines status for ibc transfers
	IbcStatus IBCTransferStatus `protobuf:"varint,4,opt,name=ibc_status,json=ibcStatus,proto3,enum=umee.uibc.v1.IBCTransferStatus" json:"ibc_status,omitempty"`
}

func (m *MsgGovSetIBCStatus) Reset()      { *m = MsgGovSetIBCStatus{} }
func (*MsgGovSetIBCStatus) ProtoMessage() {}
func (*MsgGovSetIBCStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_1982abc7d531f4dc, []int{2}
}
func (m *MsgGovSetIBCStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovSetIBCStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovSetIBCStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovSetIBCStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovSetIBCStatus.Merge(m, src)
}
func (m *MsgGovSetIBCStatus) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovSetIBCStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovSetIBCStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovSetIBCStatus proto.InternalMessageInfo

func (*MsgGovSetIBCStatus) XXX_MessageName() string {
	return "umee.uibc.v1.MsgGovSetIBCStatus"
}

// MsgGovSetIBCStatusResponse define the response type for Msg/MsgGovSetIBCStatus with x/gov proposals.
type MsgGovSetIBCStatusResponse struct {
}

func (m *MsgGovSetIBCStatusResponse) Reset()         { *m = MsgGovSetIBCStatusResponse{} }
func (m *MsgGovSetIBCStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGovSetIBCStatusResponse) ProtoMessage()    {}
func (*MsgGovSetIBCStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1982abc7d531f4dc, []int{3}
}
func (m *MsgGovSetIBCStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovSetIBCStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovSetIBCStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovSetIBCStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovSetIBCStatusResponse.Merge(m, src)
}
func (m *MsgGovSetIBCStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovSetIBCStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovSetIBCStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovSetIBCStatusResponse proto.InternalMessageInfo

func (*MsgGovSetIBCStatusResponse) XXX_MessageName() string {
	return "umee.uibc.v1.MsgGovSetIBCStatusResponse"
}

// MsgGovToggleICS20Hooks is a request type for GovToggleICS20Hooks handler.
type MsgGovToggleICS20Hooks struct {
	// authority is the address of the governance account or the Emergency Group.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// description motivating the change. Should be used only when executing by the
	// Emergency Group. Otherwise the x/gov Proposal metadata should be used.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// status defines if the IBC transfer hooks should be enabled or disabled.
	Status bool `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgGovToggleICS20Hooks) Reset()      { *m = MsgGovToggleICS20Hooks{} }
func (*MsgGovToggleICS20Hooks) ProtoMessage() {}
func (*MsgGovToggleICS20Hooks) Descriptor() ([]byte, []int) {
	return fileDescriptor_1982abc7d531f4dc, []int{4}
}
func (m *MsgGovToggleICS20Hooks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovToggleICS20Hooks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovToggleICS20Hooks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovToggleICS20Hooks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovToggleICS20Hooks.Merge(m, src)
}
func (m *MsgGovToggleICS20Hooks) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovToggleICS20Hooks) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovToggleICS20Hooks.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovToggleICS20Hooks proto.InternalMessageInfo

func (*MsgGovToggleICS20Hooks) XXX_MessageName() string {
	return "umee.uibc.v1.MsgGovToggleICS20Hooks"
}

type MsgGovToggleICS20HooksResponse struct {
}

func (m *MsgGovToggleICS20HooksResponse) Reset()         { *m = MsgGovToggleICS20HooksResponse{} }
func (m *MsgGovToggleICS20HooksResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGovToggleICS20HooksResponse) ProtoMessage()    {}
func (*MsgGovToggleICS20HooksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1982abc7d531f4dc, []int{5}
}
func (m *MsgGovToggleICS20HooksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovToggleICS20HooksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovToggleICS20HooksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovToggleICS20HooksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovToggleICS20HooksResponse.Merge(m, src)
}
func (m *MsgGovToggleICS20HooksResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovToggleICS20HooksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovToggleICS20HooksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovToggleICS20HooksResponse proto.InternalMessageInfo

func (*MsgGovToggleICS20HooksResponse) XXX_MessageName() string {
	return "umee.uibc.v1.MsgGovToggleICS20HooksResponse"
}
func init() {
	proto.RegisterType((*MsgGovUpdateQuota)(nil), "umee.uibc.v1.MsgGovUpdateQuota")
	proto.RegisterType((*MsgGovUpdateQuotaResponse)(nil), "umee.uibc.v1.MsgGovUpdateQuotaResponse")
	proto.RegisterType((*MsgGovSetIBCStatus)(nil), "umee.uibc.v1.MsgGovSetIBCStatus")
	proto.RegisterType((*MsgGovSetIBCStatusResponse)(nil), "umee.uibc.v1.MsgGovSetIBCStatusResponse")
	proto.RegisterType((*MsgGovToggleICS20Hooks)(nil), "umee.uibc.v1.MsgGovToggleICS20Hooks")
	proto.RegisterType((*MsgGovToggleICS20HooksResponse)(nil), "umee.uibc.v1.MsgGovToggleICS20HooksResponse")
}

func init() { proto.RegisterFile("umee/uibc/v1/tx.proto", fileDescriptor_1982abc7d531f4dc) }

var fileDescriptor_1982abc7d531f4dc = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xbf, 0x6f, 0xd3, 0x4e,
	0x1c, 0xb5, 0xfb, 0x23, 0xdf, 0xe4, 0xfa, 0xa5, 0x80, 0x69, 0x83, 0x93, 0x22, 0x3b, 0x8a, 0x10,
	0x54, 0xa8, 0xb1, 0x69, 0x90, 0x3a, 0x54, 0x80, 0x44, 0x1a, 0x89, 0x16, 0xa9, 0x42, 0x38, 0x65,
	0xa0, 0x12, 0x8a, 0xfc, 0xe3, 0xea, 0x5a, 0x89, 0x7d, 0xc6, 0x77, 0x4e, 0x9b, 0x09, 0xa9, 0x13,
	0x23, 0x63, 0xc7, 0x8a, 0x95, 0x05, 0xa1, 0xfe, 0x11, 0x19, 0x18, 0xaa, 0x4e, 0x88, 0x21, 0x40,
	0x33, 0x20, 0x31, 0xf2, 0x17, 0x20, 0xfb, 0xec, 0x36, 0xbf, 0xaa, 0x32, 0xa4, 0x93, 0x7d, 0xf7,
	0xde, 0xbd, 0xf7, 0x79, 0xf7, 0xf1, 0x9d, 0xc1, 0xac, 0x6f, 0x43, 0x28, 0xfb, 0x96, 0xa6, 0xcb,
	0x8d, 0x45, 0x99, 0xec, 0x4a, 0xae, 0x87, 0x08, 0xe2, 0xfe, 0x0f, 0xa6, 0xa5, 0x60, 0x5a, 0x6a,
	0x2c, 0x66, 0x67, 0x4c, 0x64, 0xa2, 0x10, 0x90, 0x83, 0x37, 0xca, 0xc9, 0x0a, 0x26, 0x42, 0x66,
	0x1d, 0xca, 0xe1, 0x48, 0xf3, 0xb7, 0x64, 0xc3, 0xf7, 0x54, 0x62, 0x21, 0x27, 0xc2, 0x6f, 0xea,
	0x08, 0xdb, 0x08, 0xcb, 0x36, 0x36, 0x03, 0x6d, 0x1b, 0x9b, 0x11, 0x90, 0xa1, 0x40, 0x95, 0x2a,
	0xd2, 0x41, 0x04, 0xf1, 0x3d, 0xe5, 0xbc, 0xf1, 0x11, 0x51, 0x29, 0x92, 0xff, 0x9c, 0x00, 0xd7,
	0xd7, 0xb1, 0xf9, 0x14, 0x35, 0x5e, 0xba, 0x86, 0x4a, 0xe0, 0x8b, 0x00, 0xe3, 0x96, 0x40, 0x4a,
	0xf5, 0xc9, 0x36, 0xf2, 0x2c, 0xd2, 0xe4, 0xd9, 0x1c, 0x3b, 0x9f, 0x2a, 0xf1, 0xc7, 0x87, 0x85,
	0x99, 0x48, 0xf4, 0x89, 0x61, 0x78, 0x10, 0xe3, 0x0a, 0xf1, 0x2c, 0xc7, 0x54, 0xce, 0xa8, 0x5c,
	0x0e, 0x4c, 0x19, 0x10, 0xeb, 0x9e, 0xe5, 0x06, 0x05, 0xf3, 0xe3, 0xc1, 0x4a, 0xa5, 0x7b, 0x8a,
	0x53, 0xc0, 0x24, 0x41, 0x44, 0xad, 0xf3, 0x13, 0xa1, 0xea, 0xc3, 0x56, 0x5b, 0x64, 0xbe, 0xb5,
	0xc5, 0x3b, 0xa6, 0x45, 0xb6, 0x7d, 0x4d, 0xd2, 0x91, 0x1d, 0x55, 0x1e, 0x3d, 0x0a, 0xd8, 0xa8,
	0xc9, 0xa4, 0xe9, 0x42, 0x2c, 0x95, 0xa1, 0x7e, 0x7c, 0x58, 0x00, 0x51, 0x0d, 0x65, 0xa8, 0x2b,
	0x54, 0x8a, 0x7b, 0x05, 0x52, 0x2e, 0xf4, 0xaa, 0x06, 0x74, 0x90, 0xcd, 0x4f, 0x8e, 0x40, 0x37,
	0xe9, 0x42, 0xaf, 0x1c, 0xa8, 0x71, 0x6f, 0xc1, 0x74, 0xb8, 0x5b, 0xd5, 0xb8, 0x09, 0x7c, 0x22,
	0xc7, 0xce, 0x4f, 0x15, 0x33, 0x12, 0xed, 0x92, 0x14, 0x77, 0x49, 0x2a, 0x47, 0x84, 0xd2, 0xa3,
	0xc0, 0xfa, 0x77, 0x5b, 0xe4, 0x7b, 0x17, 0x2e, 0x20, 0xdb, 0x22, 0xd0, 0x76, 0x49, 0xf3, 0x4f,
	0x5b, 0x9c, 0x6d, 0xaa, 0x76, 0x7d, 0x39, 0xdf, 0xcb, 0xc8, 0xef, 0x7f, 0x17, 0x59, 0xe5, 0x4a,
	0x38, 0x19, 0xab, 0x71, 0x3b, 0x20, 0x63, 0x39, 0x5b, 0x75, 0xb4, 0x53, 0x45, 0x3e, 0x09, 0x9f,
	0x74, 0x91, 0xa6, 0x62, 0xc8, 0xff, 0x37, 0x82, 0xac, 0x69, 0x2a, 0xff, 0x9c, 0xaa, 0x87, 0xed,
	0x2f, 0xa9, 0x18, 0x9e, 0x6b, 0xec, 0xa9, 0x04, 0xf2, 0xc9, 0xcb, 0x31, 0x56, 0x54, 0x02, 0xb9,
	0x3d, 0x16, 0x88, 0x7d, 0xce, 0x04, 0xd5, 0xa0, 0xd3, 0x1d, 0x3c, 0x35, 0x02, 0xff, 0xb9, 0x1e,
	0xff, 0x8d, 0xc0, 0xe2, 0x34, 0xfd, 0x72, 0xfa, 0xdd, 0x81, 0xc8, 0xec, 0x1f, 0x88, 0xcc, 0xde,
	0xaf, 0x4f, 0xf7, 0xce, 0x3e, 0xf0, 0x67, 0x13, 0xc9, 0xb1, 0x6b, 0xe3, 0xf9, 0x39, 0x90, 0x19,
	0x38, 0x33, 0x0a, 0xc4, 0x2e, 0x72, 0x30, 0xcc, 0x7f, 0x61, 0x01, 0x47, 0xd1, 0x0a, 0x24, 0x6b,
	0xa5, 0x95, 0x0a, 0x51, 0x89, 0x8f, 0x2f, 0xf1, 0x48, 0x3d, 0x06, 0xc0, 0xd2, 0xf4, 0x2a, 0x0e,
	0x7d, 0xc2, 0x73, 0x35, 0x5d, 0x14, 0xa5, 0xee, 0x9b, 0x46, 0x5a, 0x2b, 0xad, 0x6c, 0x78, 0xaa,
	0x83, 0xb7, 0xa0, 0x47, 0xcb, 0x51, 0x52, 0x96, 0xa6, 0xd3, 0xd7, 0x0b, 0xb2, 0xde, 0x02, 0xd9,
	0xc1, 0x34, 0xa7, 0x61, 0x3f, 0xb0, 0x20, 0x4d, 0xe1, 0x0d, 0x64, 0x9a, 0x75, 0xb8, 0xb6, 0x52,
	0x29, 0xde, 0x5f, 0x45, 0xa8, 0x36, 0xb2, 0xc0, 0x63, 0x83, 0x81, 0xd3, 0x20, 0x11, 0x85, 0x0d,
	0x76, 0x23, 0xa9, 0x44, 0xa3, 0xf3, 0x82, 0xe4, 0x73, 0x40, 0x18, 0x5e, 0x63, 0x1c, 0xa3, 0xf8,
	0x71, 0x0c, 0x8c, 0xaf, 0x63, 0x93, 0xdb, 0x04, 0xd3, 0x7d, 0x37, 0x61, 0xdf, 0x46, 0x0e, 0xb4,
	0x3d, 0x7b, 0xf7, 0x02, 0x42, 0xec, 0xc1, 0xbd, 0x06, 0x57, 0xfb, 0xbf, 0x89, 0xdc, 0xb0, 0xb5,
	0xdd, 0x8c, 0xec, 0xfc, 0x45, 0x8c, 0x53, 0x79, 0x0b, 0xdc, 0x18, 0xd6, 0x85, 0xdb, 0xc3, 0x04,
	0xfa, 0x59, 0xd9, 0x85, 0x7f, 0x61, 0xc5, 0x56, 0xa5, 0xd5, 0xd6, 0x4f, 0x81, 0x69, 0x9d, 0x08,
	0xec, 0xd1, 0x89, 0xc0, 0xfe, 0x38, 0x11, 0xd8, 0xf7, 0x1d, 0x81, 0x69, 0x75, 0x04, 0xf6, 0xa8,
	0x23, 0x30, 0x5f, 0x3b, 0x02, 0xb3, 0xd9, 0x7d, 0x22, 0x03, 0xe5, 0x82, 0x03, 0xc9, 0x0e, 0xf2,
	0x6a, 0xe1, 0x40, 0x6e, 0x2c, 0xc9, 0xbb, 0xe1, 0xcf, 0x48, 0x4b, 0x84, 0xd7, 0xe7, 0x83, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xe3, 0x09, 0x06, 0x2f, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// GovUpdateQuota adds new quota for ibc denoms or
	// updates the quota for existed ibc denoms.
	GovUpdateQuota(ctx context.Context, in *MsgGovUpdateQuota, opts ...grpc.CallOption) (*MsgGovUpdateQuotaResponse, error)
	// GovSetIBCStatus sets IBC ICS20 status. Must be called by x/gov.
	GovSetIBCStatus(ctx context.Context, in *MsgGovSetIBCStatus, opts ...grpc.CallOption) (*MsgGovSetIBCStatusResponse, error)
	// GovToggleICS20Hooks enables / disables ICS20 hooks support. Must be called by x/gov.
	GovToggleICS20Hooks(ctx context.Context, in *MsgGovToggleICS20Hooks, opts ...grpc.CallOption) (*MsgGovToggleICS20HooksResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) GovUpdateQuota(ctx context.Context, in *MsgGovUpdateQuota, opts ...grpc.CallOption) (*MsgGovUpdateQuotaResponse, error) {
	out := new(MsgGovUpdateQuotaResponse)
	err := c.cc.Invoke(ctx, "/umee.uibc.v1.Msg/GovUpdateQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovSetIBCStatus(ctx context.Context, in *MsgGovSetIBCStatus, opts ...grpc.CallOption) (*MsgGovSetIBCStatusResponse, error) {
	out := new(MsgGovSetIBCStatusResponse)
	err := c.cc.Invoke(ctx, "/umee.uibc.v1.Msg/GovSetIBCStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovToggleICS20Hooks(ctx context.Context, in *MsgGovToggleICS20Hooks, opts ...grpc.CallOption) (*MsgGovToggleICS20HooksResponse, error) {
	out := new(MsgGovToggleICS20HooksResponse)
	err := c.cc.Invoke(ctx, "/umee.uibc.v1.Msg/GovToggleICS20Hooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// GovUpdateQuota adds new quota for ibc denoms or
	// updates the quota for existed ibc denoms.
	GovUpdateQuota(context.Context, *MsgGovUpdateQuota) (*MsgGovUpdateQuotaResponse, error)
	// GovSetIBCStatus sets IBC ICS20 status. Must be called by x/gov.
	GovSetIBCStatus(context.Context, *MsgGovSetIBCStatus) (*MsgGovSetIBCStatusResponse, error)
	// GovToggleICS20Hooks enables / disables ICS20 hooks support. Must be called by x/gov.
	GovToggleICS20Hooks(context.Context, *MsgGovToggleICS20Hooks) (*MsgGovToggleICS20HooksResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) GovUpdateQuota(ctx context.Context, req *MsgGovUpdateQuota) (*MsgGovUpdateQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovUpdateQuota not implemented")
}
func (*UnimplementedMsgServer) GovSetIBCStatus(ctx context.Context, req *MsgGovSetIBCStatus) (*MsgGovSetIBCStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovSetIBCStatus not implemented")
}
func (*UnimplementedMsgServer) GovToggleICS20Hooks(ctx context.Context, req *MsgGovToggleICS20Hooks) (*MsgGovToggleICS20HooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovToggleICS20Hooks not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_GovUpdateQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovUpdateQuota)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovUpdateQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umee.uibc.v1.Msg/GovUpdateQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovUpdateQuota(ctx, req.(*MsgGovUpdateQuota))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovSetIBCStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovSetIBCStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovSetIBCStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umee.uibc.v1.Msg/GovSetIBCStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovSetIBCStatus(ctx, req.(*MsgGovSetIBCStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovToggleICS20Hooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovToggleICS20Hooks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovToggleICS20Hooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umee.uibc.v1.Msg/GovToggleICS20Hooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovToggleICS20Hooks(ctx, req.(*MsgGovToggleICS20Hooks))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "umee.uibc.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GovUpdateQuota",
			Handler:    _Msg_GovUpdateQuota_Handler,
		},
		{
			MethodName: "GovSetIBCStatus",
			Handler:    _Msg_GovSetIBCStatus_Handler,
		},
		{
			MethodName: "GovToggleICS20Hooks",
			Handler:    _Msg_GovToggleICS20Hooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "umee/uibc/v1/tx.proto",
}

func (m *MsgGovUpdateQuota) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovUpdateQuota) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovUpdateQuota) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.InflowOutflowTokenQuotaBase.Size()
		i -= size
		if _, err := m.InflowOutflowTokenQuotaBase.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.InflowOutflowQuotaRate.Size()
		i -= size
		if _, err := m.InflowOutflowQuotaRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.InflowOutflowQuotaBase.Size()
		i -= size
		if _, err := m.InflowOutflowQuotaBase.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.QuotaDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.QuotaDuration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTx(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	{
		size := m.PerDenom.Size()
		i -= size
		if _, err := m.PerDenom.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Total.Size()
		i -= size
		if _, err := m.Total.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGovUpdateQuotaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovUpdateQuotaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovUpdateQuotaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGovSetIBCStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovSetIBCStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovSetIBCStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IbcStatus != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.IbcStatus))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGovSetIBCStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovSetIBCStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovSetIBCStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGovToggleICS20Hooks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovToggleICS20Hooks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovToggleICS20Hooks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGovToggleICS20HooksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovToggleICS20HooksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovToggleICS20HooksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgGovUpdateQuota) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Total.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.PerDenom.Size()
	n += 1 + l + sovTx(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.QuotaDuration)
	n += 1 + l + sovTx(uint64(l))
	l = m.InflowOutflowQuotaBase.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.InflowOutflowQuotaRate.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.InflowOutflowTokenQuotaBase.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgGovUpdateQuotaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGovSetIBCStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IbcStatus != 0 {
		n += 1 + sovTx(uint64(m.IbcStatus))
	}
	return n
}

func (m *MsgGovSetIBCStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGovToggleICS20Hooks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Status {
		n += 2
	}
	return n
}

func (m *MsgGovToggleICS20HooksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgGovUpdateQuota) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovUpdateQuota: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovUpdateQuota: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PerDenom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuotaDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.QuotaDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflowOutflowQuotaBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflowOutflowQuotaBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflowOutflowQuotaRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflowOutflowQuotaRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflowOutflowTokenQuotaBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflowOutflowTokenQuotaBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovUpdateQuotaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovUpdateQuotaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovUpdateQuotaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovSetIBCStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovSetIBCStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovSetIBCStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcStatus", wireType)
			}
			m.IbcStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IbcStatus |= IBCTransferStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovSetIBCStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovSetIBCStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovSetIBCStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovToggleICS20Hooks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovToggleICS20Hooks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovToggleICS20Hooks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovToggleICS20HooksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovToggleICS20HooksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovToggleICS20HooksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
