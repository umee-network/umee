// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/uibc/v1/events.proto

package uibc

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventBadRevert is emitted on failure of ibc-transfer quota.
type EventBadRevert struct {
	// failure event type
	FailureType string `protobuf:"bytes,1,opt,name=failure_type,json=failureType,proto3" json:"failure_type,omitempty"`
	// ibc packet data
	Packet string `protobuf:"bytes,2,opt,name=packet,proto3" json:"packet,omitempty"`
}

func (m *EventBadRevert) Reset()         { *m = EventBadRevert{} }
func (m *EventBadRevert) String() string { return proto.CompactTextString(m) }
func (*EventBadRevert) ProtoMessage()    {}
func (*EventBadRevert) Descriptor() ([]byte, []int) {
	return fileDescriptor_c64e60b79cebf048, []int{0}
}
func (m *EventBadRevert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBadRevert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBadRevert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBadRevert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBadRevert.Merge(m, src)
}
func (m *EventBadRevert) XXX_Size() int {
	return m.Size()
}
func (m *EventBadRevert) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBadRevert.DiscardUnknown(m)
}

var xxx_messageInfo_EventBadRevert proto.InternalMessageInfo

// EventIBCTransferStatus is emitted on quota tracking pause status change.
type EventIBCTransferStatus struct {
	Status IBCTransferStatus `protobuf:"varint,1,opt,name=status,proto3,enum=umee.uibc.v1.IBCTransferStatus" json:"status,omitempty"`
}

func (m *EventIBCTransferStatus) Reset()         { *m = EventIBCTransferStatus{} }
func (m *EventIBCTransferStatus) String() string { return proto.CompactTextString(m) }
func (*EventIBCTransferStatus) ProtoMessage()    {}
func (*EventIBCTransferStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c64e60b79cebf048, []int{1}
}
func (m *EventIBCTransferStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventIBCTransferStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventIBCTransferStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventIBCTransferStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventIBCTransferStatus.Merge(m, src)
}
func (m *EventIBCTransferStatus) XXX_Size() int {
	return m.Size()
}
func (m *EventIBCTransferStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_EventIBCTransferStatus.DiscardUnknown(m)
}

var xxx_messageInfo_EventIBCTransferStatus proto.InternalMessageInfo

// EventICS20Hooks is emitted on MsgGovToggleICS20Hooks.
type EventICS20Hooks struct {
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *EventICS20Hooks) Reset()         { *m = EventICS20Hooks{} }
func (m *EventICS20Hooks) String() string { return proto.CompactTextString(m) }
func (*EventICS20Hooks) ProtoMessage()    {}
func (*EventICS20Hooks) Descriptor() ([]byte, []int) {
	return fileDescriptor_c64e60b79cebf048, []int{2}
}
func (m *EventICS20Hooks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventICS20Hooks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventICS20Hooks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventICS20Hooks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventICS20Hooks.Merge(m, src)
}
func (m *EventICS20Hooks) XXX_Size() int {
	return m.Size()
}
func (m *EventICS20Hooks) XXX_DiscardUnknown() {
	xxx_messageInfo_EventICS20Hooks.DiscardUnknown(m)
}

var xxx_messageInfo_EventICS20Hooks proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EventBadRevert)(nil), "umee.uibc.v1.EventBadRevert")
	proto.RegisterType((*EventIBCTransferStatus)(nil), "umee.uibc.v1.EventIBCTransferStatus")
	proto.RegisterType((*EventICS20Hooks)(nil), "umee.uibc.v1.EventICS20Hooks")
}

func init() { proto.RegisterFile("umee/uibc/v1/events.proto", fileDescriptor_c64e60b79cebf048) }

var fileDescriptor_c64e60b79cebf048 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x13, 0x86, 0x00, 0xa6, 0x2a, 0x52, 0x84, 0xaa, 0xd0, 0xc1, 0x40, 0x06, 0x84, 0x84,
	0xb0, 0x69, 0x91, 0x60, 0x4f, 0x41, 0x02, 0x31, 0x91, 0x76, 0x62, 0x41, 0x4e, 0x7a, 0x0d, 0x51,
	0xda, 0x38, 0x38, 0x76, 0xa0, 0x6f, 0xc1, 0x63, 0x75, 0xec, 0xc8, 0x08, 0xc9, 0x8b, 0xa0, 0x38,
	0x41, 0x02, 0xb1, 0xdd, 0xef, 0xef, 0xee, 0xf3, 0xe9, 0xd0, 0xbe, 0x5a, 0x00, 0x50, 0x15, 0x07,
	0x21, 0x2d, 0x06, 0x14, 0x0a, 0x48, 0x65, 0x4e, 0x32, 0xc1, 0x25, 0xb7, 0x3b, 0x35, 0x22, 0x35,
	0x22, 0xc5, 0xa0, 0xbf, 0x17, 0xf1, 0x88, 0x6b, 0x40, 0xeb, 0xaa, 0xe9, 0xe9, 0x3b, 0x7f, 0xc6,
	0x5f, 0x14, 0x97, 0xac, 0x21, 0xee, 0x3d, 0xea, 0xde, 0xd4, 0x36, 0x8f, 0x4d, 0x7d, 0x28, 0x40,
	0x48, 0xfb, 0x08, 0x75, 0x66, 0x2c, 0x9e, 0x2b, 0x01, 0x4f, 0x72, 0x99, 0x81, 0x63, 0x1e, 0x9a,
	0x27, 0xdb, 0xfe, 0x4e, 0xfb, 0x36, 0x59, 0x66, 0x60, 0xf7, 0x90, 0x95, 0xb1, 0x30, 0x01, 0xe9,
	0x6c, 0x68, 0xd8, 0x26, 0xf7, 0x01, 0xf5, 0xb4, 0xec, 0xce, 0x1b, 0x4d, 0x04, 0x4b, 0xf3, 0x19,
	0x88, 0xb1, 0x64, 0x52, 0xe5, 0xf6, 0x15, 0xb2, 0x72, 0x5d, 0x69, 0x5d, 0x77, 0x78, 0x40, 0x7e,
	0x6f, 0x4d, 0xfe, 0x0d, 0xf8, 0x6d, 0xbb, 0x7b, 0x8a, 0x76, 0x1b, 0xe5, 0x68, 0x3c, 0x3c, 0xbf,
	0xe5, 0x3c, 0xc9, 0x6d, 0x07, 0x6d, 0x42, 0xca, 0x82, 0x39, 0x4c, 0xb5, 0x6c, 0xcb, 0xff, 0x89,
	0xde, 0xf5, 0xea, 0x0b, 0x1b, 0xab, 0x12, 0x9b, 0xeb, 0x12, 0x9b, 0x9f, 0x25, 0x36, 0xdf, 0x2b,
	0x6c, 0xac, 0x2b, 0x6c, 0x7c, 0x54, 0xd8, 0x78, 0x3c, 0x8e, 0x62, 0xf9, 0xac, 0x02, 0x12, 0xf2,
	0x05, 0xad, 0x7f, 0x3f, 0x4b, 0x41, 0xbe, 0x72, 0x91, 0xe8, 0x40, 0x8b, 0x4b, 0xfa, 0xa6, 0x2f,
	0x14, 0x58, 0xfa, 0x32, 0x17, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x19, 0x10, 0xc6, 0x74,
	0x01, 0x00, 0x00,
}

func (m *EventBadRevert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBadRevert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBadRevert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Packet) > 0 {
		i -= len(m.Packet)
		copy(dAtA[i:], m.Packet)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Packet)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FailureType) > 0 {
		i -= len(m.FailureType)
		copy(dAtA[i:], m.FailureType)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FailureType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventIBCTransferStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventIBCTransferStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventIBCTransferStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventICS20Hooks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventICS20Hooks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventICS20Hooks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventBadRevert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FailureType)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Packet)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventIBCTransferStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovEvents(uint64(m.Status))
	}
	return n
}

func (m *EventICS20Hooks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventBadRevert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBadRevert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBadRevert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailureType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventIBCTransferStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventIBCTransferStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventIBCTransferStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= IBCTransferStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventICS20Hooks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventICS20Hooks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventICS20Hooks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
