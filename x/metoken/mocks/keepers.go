// Code generated by go-mockgen 1.3.7; DO NOT EDIT.

package mocks

import (
	"sync"

	math "cosmossdk.io/math"
	types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/umee-network/umee/v5/x/leverage/types"
	metoken "github.com/umee-network/umee/v5/x/metoken"
	types2 "github.com/umee-network/umee/v5/x/oracle/types"
)

// MockBankKeeper is a mock implementation of the BankKeeper interface (from
// the package github.com/umee-network/umee/v5/x/metoken) used for unit
// testing.
type MockBankKeeper struct {
	// BurnCoinsFunc is an instance of a mock function object controlling
	// the behavior of the method BurnCoins.
	BurnCoinsFunc *BankKeeperBurnCoinsFunc
	// MintCoinsFunc is an instance of a mock function object controlling
	// the behavior of the method MintCoins.
	MintCoinsFunc *BankKeeperMintCoinsFunc
	// SendCoinsFromAccountToModuleFunc is an instance of a mock function
	// object controlling the behavior of the method
	// SendCoinsFromAccountToModule.
	SendCoinsFromAccountToModuleFunc *BankKeeperSendCoinsFromAccountToModuleFunc
	// SendCoinsFromModuleToAccountFunc is an instance of a mock function
	// object controlling the behavior of the method
	// SendCoinsFromModuleToAccount.
	SendCoinsFromModuleToAccountFunc *BankKeeperSendCoinsFromModuleToAccountFunc
}

// NewMockBankKeeper creates a new mock of the BankKeeper interface. All
// methods return zero values for all results, unless overwritten.
func NewMockBankKeeper() *MockBankKeeper {
	return &MockBankKeeper{
		BurnCoinsFunc: &BankKeeperBurnCoinsFunc{
			defaultHook: func(types.Context, string, types.Coins) (r0 error) {
				return
			},
		},
		MintCoinsFunc: &BankKeeperMintCoinsFunc{
			defaultHook: func(types.Context, string, types.Coins) (r0 error) {
				return
			},
		},
		SendCoinsFromAccountToModuleFunc: &BankKeeperSendCoinsFromAccountToModuleFunc{
			defaultHook: func(types.Context, types.AccAddress, string, types.Coins) (r0 error) {
				return
			},
		},
		SendCoinsFromModuleToAccountFunc: &BankKeeperSendCoinsFromModuleToAccountFunc{
			defaultHook: func(types.Context, string, types.AccAddress, types.Coins) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockBankKeeper creates a new mock of the BankKeeper interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockBankKeeper() *MockBankKeeper {
	return &MockBankKeeper{
		BurnCoinsFunc: &BankKeeperBurnCoinsFunc{
			defaultHook: func(types.Context, string, types.Coins) error {
				panic("unexpected invocation of MockBankKeeper.BurnCoins")
			},
		},
		MintCoinsFunc: &BankKeeperMintCoinsFunc{
			defaultHook: func(types.Context, string, types.Coins) error {
				panic("unexpected invocation of MockBankKeeper.MintCoins")
			},
		},
		SendCoinsFromAccountToModuleFunc: &BankKeeperSendCoinsFromAccountToModuleFunc{
			defaultHook: func(types.Context, types.AccAddress, string, types.Coins) error {
				panic("unexpected invocation of MockBankKeeper.SendCoinsFromAccountToModule")
			},
		},
		SendCoinsFromModuleToAccountFunc: &BankKeeperSendCoinsFromModuleToAccountFunc{
			defaultHook: func(types.Context, string, types.AccAddress, types.Coins) error {
				panic("unexpected invocation of MockBankKeeper.SendCoinsFromModuleToAccount")
			},
		},
	}
}

// NewMockBankKeeperFrom creates a new mock of the MockBankKeeper interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockBankKeeperFrom(i metoken.BankKeeper) *MockBankKeeper {
	return &MockBankKeeper{
		BurnCoinsFunc: &BankKeeperBurnCoinsFunc{
			defaultHook: i.BurnCoins,
		},
		MintCoinsFunc: &BankKeeperMintCoinsFunc{
			defaultHook: i.MintCoins,
		},
		SendCoinsFromAccountToModuleFunc: &BankKeeperSendCoinsFromAccountToModuleFunc{
			defaultHook: i.SendCoinsFromAccountToModule,
		},
		SendCoinsFromModuleToAccountFunc: &BankKeeperSendCoinsFromModuleToAccountFunc{
			defaultHook: i.SendCoinsFromModuleToAccount,
		},
	}
}

// BankKeeperBurnCoinsFunc describes the behavior when the BurnCoins method
// of the parent MockBankKeeper instance is invoked.
type BankKeeperBurnCoinsFunc struct {
	defaultHook func(types.Context, string, types.Coins) error
	hooks       []func(types.Context, string, types.Coins) error
	history     []BankKeeperBurnCoinsFuncCall
	mutex       sync.Mutex
}

// BurnCoins delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBankKeeper) BurnCoins(v0 types.Context, v1 string, v2 types.Coins) error {
	r0 := m.BurnCoinsFunc.nextHook()(v0, v1, v2)
	m.BurnCoinsFunc.appendCall(BankKeeperBurnCoinsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the BurnCoins method of
// the parent MockBankKeeper instance is invoked and the hook queue is
// empty.
func (f *BankKeeperBurnCoinsFunc) SetDefaultHook(hook func(types.Context, string, types.Coins) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BurnCoins method of the parent MockBankKeeper instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *BankKeeperBurnCoinsFunc) PushHook(hook func(types.Context, string, types.Coins) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BankKeeperBurnCoinsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(types.Context, string, types.Coins) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BankKeeperBurnCoinsFunc) PushReturn(r0 error) {
	f.PushHook(func(types.Context, string, types.Coins) error {
		return r0
	})
}

func (f *BankKeeperBurnCoinsFunc) nextHook() func(types.Context, string, types.Coins) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BankKeeperBurnCoinsFunc) appendCall(r0 BankKeeperBurnCoinsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BankKeeperBurnCoinsFuncCall objects
// describing the invocations of this function.
func (f *BankKeeperBurnCoinsFunc) History() []BankKeeperBurnCoinsFuncCall {
	f.mutex.Lock()
	history := make([]BankKeeperBurnCoinsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BankKeeperBurnCoinsFuncCall is an object that describes an invocation of
// method BurnCoins on an instance of MockBankKeeper.
type BankKeeperBurnCoinsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 types.Coins
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BankKeeperBurnCoinsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BankKeeperBurnCoinsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BankKeeperMintCoinsFunc describes the behavior when the MintCoins method
// of the parent MockBankKeeper instance is invoked.
type BankKeeperMintCoinsFunc struct {
	defaultHook func(types.Context, string, types.Coins) error
	hooks       []func(types.Context, string, types.Coins) error
	history     []BankKeeperMintCoinsFuncCall
	mutex       sync.Mutex
}

// MintCoins delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBankKeeper) MintCoins(v0 types.Context, v1 string, v2 types.Coins) error {
	r0 := m.MintCoinsFunc.nextHook()(v0, v1, v2)
	m.MintCoinsFunc.appendCall(BankKeeperMintCoinsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MintCoins method of
// the parent MockBankKeeper instance is invoked and the hook queue is
// empty.
func (f *BankKeeperMintCoinsFunc) SetDefaultHook(hook func(types.Context, string, types.Coins) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MintCoins method of the parent MockBankKeeper instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *BankKeeperMintCoinsFunc) PushHook(hook func(types.Context, string, types.Coins) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BankKeeperMintCoinsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(types.Context, string, types.Coins) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BankKeeperMintCoinsFunc) PushReturn(r0 error) {
	f.PushHook(func(types.Context, string, types.Coins) error {
		return r0
	})
}

func (f *BankKeeperMintCoinsFunc) nextHook() func(types.Context, string, types.Coins) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BankKeeperMintCoinsFunc) appendCall(r0 BankKeeperMintCoinsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BankKeeperMintCoinsFuncCall objects
// describing the invocations of this function.
func (f *BankKeeperMintCoinsFunc) History() []BankKeeperMintCoinsFuncCall {
	f.mutex.Lock()
	history := make([]BankKeeperMintCoinsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BankKeeperMintCoinsFuncCall is an object that describes an invocation of
// method MintCoins on an instance of MockBankKeeper.
type BankKeeperMintCoinsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 types.Coins
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BankKeeperMintCoinsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BankKeeperMintCoinsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BankKeeperSendCoinsFromAccountToModuleFunc describes the behavior when
// the SendCoinsFromAccountToModule method of the parent MockBankKeeper
// instance is invoked.
type BankKeeperSendCoinsFromAccountToModuleFunc struct {
	defaultHook func(types.Context, types.AccAddress, string, types.Coins) error
	hooks       []func(types.Context, types.AccAddress, string, types.Coins) error
	history     []BankKeeperSendCoinsFromAccountToModuleFuncCall
	mutex       sync.Mutex
}

// SendCoinsFromAccountToModule delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockBankKeeper) SendCoinsFromAccountToModule(v0 types.Context, v1 types.AccAddress, v2 string, v3 types.Coins) error {
	r0 := m.SendCoinsFromAccountToModuleFunc.nextHook()(v0, v1, v2, v3)
	m.SendCoinsFromAccountToModuleFunc.appendCall(BankKeeperSendCoinsFromAccountToModuleFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SendCoinsFromAccountToModule method of the parent MockBankKeeper instance
// is invoked and the hook queue is empty.
func (f *BankKeeperSendCoinsFromAccountToModuleFunc) SetDefaultHook(hook func(types.Context, types.AccAddress, string, types.Coins) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendCoinsFromAccountToModule method of the parent MockBankKeeper instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BankKeeperSendCoinsFromAccountToModuleFunc) PushHook(hook func(types.Context, types.AccAddress, string, types.Coins) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BankKeeperSendCoinsFromAccountToModuleFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(types.Context, types.AccAddress, string, types.Coins) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BankKeeperSendCoinsFromAccountToModuleFunc) PushReturn(r0 error) {
	f.PushHook(func(types.Context, types.AccAddress, string, types.Coins) error {
		return r0
	})
}

func (f *BankKeeperSendCoinsFromAccountToModuleFunc) nextHook() func(types.Context, types.AccAddress, string, types.Coins) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BankKeeperSendCoinsFromAccountToModuleFunc) appendCall(r0 BankKeeperSendCoinsFromAccountToModuleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BankKeeperSendCoinsFromAccountToModuleFuncCall objects describing the
// invocations of this function.
func (f *BankKeeperSendCoinsFromAccountToModuleFunc) History() []BankKeeperSendCoinsFromAccountToModuleFuncCall {
	f.mutex.Lock()
	history := make([]BankKeeperSendCoinsFromAccountToModuleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BankKeeperSendCoinsFromAccountToModuleFuncCall is an object that
// describes an invocation of method SendCoinsFromAccountToModule on an
// instance of MockBankKeeper.
type BankKeeperSendCoinsFromAccountToModuleFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.AccAddress
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 types.Coins
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BankKeeperSendCoinsFromAccountToModuleFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BankKeeperSendCoinsFromAccountToModuleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BankKeeperSendCoinsFromModuleToAccountFunc describes the behavior when
// the SendCoinsFromModuleToAccount method of the parent MockBankKeeper
// instance is invoked.
type BankKeeperSendCoinsFromModuleToAccountFunc struct {
	defaultHook func(types.Context, string, types.AccAddress, types.Coins) error
	hooks       []func(types.Context, string, types.AccAddress, types.Coins) error
	history     []BankKeeperSendCoinsFromModuleToAccountFuncCall
	mutex       sync.Mutex
}

// SendCoinsFromModuleToAccount delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockBankKeeper) SendCoinsFromModuleToAccount(v0 types.Context, v1 string, v2 types.AccAddress, v3 types.Coins) error {
	r0 := m.SendCoinsFromModuleToAccountFunc.nextHook()(v0, v1, v2, v3)
	m.SendCoinsFromModuleToAccountFunc.appendCall(BankKeeperSendCoinsFromModuleToAccountFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SendCoinsFromModuleToAccount method of the parent MockBankKeeper instance
// is invoked and the hook queue is empty.
func (f *BankKeeperSendCoinsFromModuleToAccountFunc) SetDefaultHook(hook func(types.Context, string, types.AccAddress, types.Coins) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendCoinsFromModuleToAccount method of the parent MockBankKeeper instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BankKeeperSendCoinsFromModuleToAccountFunc) PushHook(hook func(types.Context, string, types.AccAddress, types.Coins) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BankKeeperSendCoinsFromModuleToAccountFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(types.Context, string, types.AccAddress, types.Coins) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BankKeeperSendCoinsFromModuleToAccountFunc) PushReturn(r0 error) {
	f.PushHook(func(types.Context, string, types.AccAddress, types.Coins) error {
		return r0
	})
}

func (f *BankKeeperSendCoinsFromModuleToAccountFunc) nextHook() func(types.Context, string, types.AccAddress, types.Coins) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BankKeeperSendCoinsFromModuleToAccountFunc) appendCall(r0 BankKeeperSendCoinsFromModuleToAccountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BankKeeperSendCoinsFromModuleToAccountFuncCall objects describing the
// invocations of this function.
func (f *BankKeeperSendCoinsFromModuleToAccountFunc) History() []BankKeeperSendCoinsFromModuleToAccountFuncCall {
	f.mutex.Lock()
	history := make([]BankKeeperSendCoinsFromModuleToAccountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BankKeeperSendCoinsFromModuleToAccountFuncCall is an object that
// describes an invocation of method SendCoinsFromModuleToAccount on an
// instance of MockBankKeeper.
type BankKeeperSendCoinsFromModuleToAccountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 types.AccAddress
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 types.Coins
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BankKeeperSendCoinsFromModuleToAccountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BankKeeperSendCoinsFromModuleToAccountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockLeverageKeeper is a mock implementation of the LeverageKeeper
// interface (from the package github.com/umee-network/umee/v5/x/metoken)
// used for unit testing.
type MockLeverageKeeper struct {
	// ExchangeTokenFunc is an instance of a mock function object
	// controlling the behavior of the method ExchangeToken.
	ExchangeTokenFunc *LeverageKeeperExchangeTokenFunc
	// ExchangeUTokenFunc is an instance of a mock function object
	// controlling the behavior of the method ExchangeUToken.
	ExchangeUTokenFunc *LeverageKeeperExchangeUTokenFunc
	// GetAllSuppliedFunc is an instance of a mock function object
	// controlling the behavior of the method GetAllSupplied.
	GetAllSuppliedFunc *LeverageKeeperGetAllSuppliedFunc
	// GetTokenSettingsFunc is an instance of a mock function object
	// controlling the behavior of the method GetTokenSettings.
	GetTokenSettingsFunc *LeverageKeeperGetTokenSettingsFunc
	// GetTotalSupplyFunc is an instance of a mock function object
	// controlling the behavior of the method GetTotalSupply.
	GetTotalSupplyFunc *LeverageKeeperGetTotalSupplyFunc
	// ModuleMaxWithdrawFunc is an instance of a mock function object
	// controlling the behavior of the method ModuleMaxWithdraw.
	ModuleMaxWithdrawFunc *LeverageKeeperModuleMaxWithdrawFunc
	// SupplyFromModuleFunc is an instance of a mock function object
	// controlling the behavior of the method SupplyFromModule.
	SupplyFromModuleFunc *LeverageKeeperSupplyFromModuleFunc
	// WithdrawToModuleFunc is an instance of a mock function object
	// controlling the behavior of the method WithdrawToModule.
	WithdrawToModuleFunc *LeverageKeeperWithdrawToModuleFunc
}

// NewMockLeverageKeeper creates a new mock of the LeverageKeeper interface.
// All methods return zero values for all results, unless overwritten.
func NewMockLeverageKeeper() *MockLeverageKeeper {
	return &MockLeverageKeeper{
		ExchangeTokenFunc: &LeverageKeeperExchangeTokenFunc{
			defaultHook: func(types.Context, types.Coin) (r0 types.Coin, r1 error) {
				return
			},
		},
		ExchangeUTokenFunc: &LeverageKeeperExchangeUTokenFunc{
			defaultHook: func(types.Context, types.Coin) (r0 types.Coin, r1 error) {
				return
			},
		},
		GetAllSuppliedFunc: &LeverageKeeperGetAllSuppliedFunc{
			defaultHook: func(types.Context, types.AccAddress) (r0 types.Coins, r1 error) {
				return
			},
		},
		GetTokenSettingsFunc: &LeverageKeeperGetTokenSettingsFunc{
			defaultHook: func(types.Context, string) (r0 types1.Token, r1 error) {
				return
			},
		},
		GetTotalSupplyFunc: &LeverageKeeperGetTotalSupplyFunc{
			defaultHook: func(types.Context, string) (r0 types.Coin, r1 error) {
				return
			},
		},
		ModuleMaxWithdrawFunc: &LeverageKeeperModuleMaxWithdrawFunc{
			defaultHook: func(types.Context, types.Coin) (r0 math.Int, r1 error) {
				return
			},
		},
		SupplyFromModuleFunc: &LeverageKeeperSupplyFromModuleFunc{
			defaultHook: func(types.Context, string, types.Coin) (r0 types.Coin, r1 bool, r2 error) {
				return
			},
		},
		WithdrawToModuleFunc: &LeverageKeeperWithdrawToModuleFunc{
			defaultHook: func(types.Context, string, types.Coin) (r0 types.Coin, r1 bool, r2 error) {
				return
			},
		},
	}
}

// NewStrictMockLeverageKeeper creates a new mock of the LeverageKeeper
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockLeverageKeeper() *MockLeverageKeeper {
	return &MockLeverageKeeper{
		ExchangeTokenFunc: &LeverageKeeperExchangeTokenFunc{
			defaultHook: func(types.Context, types.Coin) (types.Coin, error) {
				panic("unexpected invocation of MockLeverageKeeper.ExchangeToken")
			},
		},
		ExchangeUTokenFunc: &LeverageKeeperExchangeUTokenFunc{
			defaultHook: func(types.Context, types.Coin) (types.Coin, error) {
				panic("unexpected invocation of MockLeverageKeeper.ExchangeUToken")
			},
		},
		GetAllSuppliedFunc: &LeverageKeeperGetAllSuppliedFunc{
			defaultHook: func(types.Context, types.AccAddress) (types.Coins, error) {
				panic("unexpected invocation of MockLeverageKeeper.GetAllSupplied")
			},
		},
		GetTokenSettingsFunc: &LeverageKeeperGetTokenSettingsFunc{
			defaultHook: func(types.Context, string) (types1.Token, error) {
				panic("unexpected invocation of MockLeverageKeeper.GetTokenSettings")
			},
		},
		GetTotalSupplyFunc: &LeverageKeeperGetTotalSupplyFunc{
			defaultHook: func(types.Context, string) (types.Coin, error) {
				panic("unexpected invocation of MockLeverageKeeper.GetTotalSupply")
			},
		},
		ModuleMaxWithdrawFunc: &LeverageKeeperModuleMaxWithdrawFunc{
			defaultHook: func(types.Context, types.Coin) (math.Int, error) {
				panic("unexpected invocation of MockLeverageKeeper.ModuleMaxWithdraw")
			},
		},
		SupplyFromModuleFunc: &LeverageKeeperSupplyFromModuleFunc{
			defaultHook: func(types.Context, string, types.Coin) (types.Coin, bool, error) {
				panic("unexpected invocation of MockLeverageKeeper.SupplyFromModule")
			},
		},
		WithdrawToModuleFunc: &LeverageKeeperWithdrawToModuleFunc{
			defaultHook: func(types.Context, string, types.Coin) (types.Coin, bool, error) {
				panic("unexpected invocation of MockLeverageKeeper.WithdrawToModule")
			},
		},
	}
}

// NewMockLeverageKeeperFrom creates a new mock of the MockLeverageKeeper
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockLeverageKeeperFrom(i metoken.LeverageKeeper) *MockLeverageKeeper {
	return &MockLeverageKeeper{
		ExchangeTokenFunc: &LeverageKeeperExchangeTokenFunc{
			defaultHook: i.ExchangeToken,
		},
		ExchangeUTokenFunc: &LeverageKeeperExchangeUTokenFunc{
			defaultHook: i.ExchangeUToken,
		},
		GetAllSuppliedFunc: &LeverageKeeperGetAllSuppliedFunc{
			defaultHook: i.GetAllSupplied,
		},
		GetTokenSettingsFunc: &LeverageKeeperGetTokenSettingsFunc{
			defaultHook: i.GetTokenSettings,
		},
		GetTotalSupplyFunc: &LeverageKeeperGetTotalSupplyFunc{
			defaultHook: i.GetTotalSupply,
		},
		ModuleMaxWithdrawFunc: &LeverageKeeperModuleMaxWithdrawFunc{
			defaultHook: i.ModuleMaxWithdraw,
		},
		SupplyFromModuleFunc: &LeverageKeeperSupplyFromModuleFunc{
			defaultHook: i.SupplyFromModule,
		},
		WithdrawToModuleFunc: &LeverageKeeperWithdrawToModuleFunc{
			defaultHook: i.WithdrawToModule,
		},
	}
}

// LeverageKeeperExchangeTokenFunc describes the behavior when the
// ExchangeToken method of the parent MockLeverageKeeper instance is
// invoked.
type LeverageKeeperExchangeTokenFunc struct {
	defaultHook func(types.Context, types.Coin) (types.Coin, error)
	hooks       []func(types.Context, types.Coin) (types.Coin, error)
	history     []LeverageKeeperExchangeTokenFuncCall
	mutex       sync.Mutex
}

// ExchangeToken delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockLeverageKeeper) ExchangeToken(v0 types.Context, v1 types.Coin) (types.Coin, error) {
	r0, r1 := m.ExchangeTokenFunc.nextHook()(v0, v1)
	m.ExchangeTokenFunc.appendCall(LeverageKeeperExchangeTokenFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExchangeToken method
// of the parent MockLeverageKeeper instance is invoked and the hook queue
// is empty.
func (f *LeverageKeeperExchangeTokenFunc) SetDefaultHook(hook func(types.Context, types.Coin) (types.Coin, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExchangeToken method of the parent MockLeverageKeeper instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *LeverageKeeperExchangeTokenFunc) PushHook(hook func(types.Context, types.Coin) (types.Coin, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LeverageKeeperExchangeTokenFunc) SetDefaultReturn(r0 types.Coin, r1 error) {
	f.SetDefaultHook(func(types.Context, types.Coin) (types.Coin, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LeverageKeeperExchangeTokenFunc) PushReturn(r0 types.Coin, r1 error) {
	f.PushHook(func(types.Context, types.Coin) (types.Coin, error) {
		return r0, r1
	})
}

func (f *LeverageKeeperExchangeTokenFunc) nextHook() func(types.Context, types.Coin) (types.Coin, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LeverageKeeperExchangeTokenFunc) appendCall(r0 LeverageKeeperExchangeTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LeverageKeeperExchangeTokenFuncCall objects
// describing the invocations of this function.
func (f *LeverageKeeperExchangeTokenFunc) History() []LeverageKeeperExchangeTokenFuncCall {
	f.mutex.Lock()
	history := make([]LeverageKeeperExchangeTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LeverageKeeperExchangeTokenFuncCall is an object that describes an
// invocation of method ExchangeToken on an instance of MockLeverageKeeper.
type LeverageKeeperExchangeTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.Coin
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.Coin
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LeverageKeeperExchangeTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LeverageKeeperExchangeTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LeverageKeeperExchangeUTokenFunc describes the behavior when the
// ExchangeUToken method of the parent MockLeverageKeeper instance is
// invoked.
type LeverageKeeperExchangeUTokenFunc struct {
	defaultHook func(types.Context, types.Coin) (types.Coin, error)
	hooks       []func(types.Context, types.Coin) (types.Coin, error)
	history     []LeverageKeeperExchangeUTokenFuncCall
	mutex       sync.Mutex
}

// ExchangeUToken delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLeverageKeeper) ExchangeUToken(v0 types.Context, v1 types.Coin) (types.Coin, error) {
	r0, r1 := m.ExchangeUTokenFunc.nextHook()(v0, v1)
	m.ExchangeUTokenFunc.appendCall(LeverageKeeperExchangeUTokenFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExchangeUToken
// method of the parent MockLeverageKeeper instance is invoked and the hook
// queue is empty.
func (f *LeverageKeeperExchangeUTokenFunc) SetDefaultHook(hook func(types.Context, types.Coin) (types.Coin, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExchangeUToken method of the parent MockLeverageKeeper instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *LeverageKeeperExchangeUTokenFunc) PushHook(hook func(types.Context, types.Coin) (types.Coin, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LeverageKeeperExchangeUTokenFunc) SetDefaultReturn(r0 types.Coin, r1 error) {
	f.SetDefaultHook(func(types.Context, types.Coin) (types.Coin, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LeverageKeeperExchangeUTokenFunc) PushReturn(r0 types.Coin, r1 error) {
	f.PushHook(func(types.Context, types.Coin) (types.Coin, error) {
		return r0, r1
	})
}

func (f *LeverageKeeperExchangeUTokenFunc) nextHook() func(types.Context, types.Coin) (types.Coin, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LeverageKeeperExchangeUTokenFunc) appendCall(r0 LeverageKeeperExchangeUTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LeverageKeeperExchangeUTokenFuncCall
// objects describing the invocations of this function.
func (f *LeverageKeeperExchangeUTokenFunc) History() []LeverageKeeperExchangeUTokenFuncCall {
	f.mutex.Lock()
	history := make([]LeverageKeeperExchangeUTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LeverageKeeperExchangeUTokenFuncCall is an object that describes an
// invocation of method ExchangeUToken on an instance of MockLeverageKeeper.
type LeverageKeeperExchangeUTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.Coin
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.Coin
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LeverageKeeperExchangeUTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LeverageKeeperExchangeUTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LeverageKeeperGetAllSuppliedFunc describes the behavior when the
// GetAllSupplied method of the parent MockLeverageKeeper instance is
// invoked.
type LeverageKeeperGetAllSuppliedFunc struct {
	defaultHook func(types.Context, types.AccAddress) (types.Coins, error)
	hooks       []func(types.Context, types.AccAddress) (types.Coins, error)
	history     []LeverageKeeperGetAllSuppliedFuncCall
	mutex       sync.Mutex
}

// GetAllSupplied delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLeverageKeeper) GetAllSupplied(v0 types.Context, v1 types.AccAddress) (types.Coins, error) {
	r0, r1 := m.GetAllSuppliedFunc.nextHook()(v0, v1)
	m.GetAllSuppliedFunc.appendCall(LeverageKeeperGetAllSuppliedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetAllSupplied
// method of the parent MockLeverageKeeper instance is invoked and the hook
// queue is empty.
func (f *LeverageKeeperGetAllSuppliedFunc) SetDefaultHook(hook func(types.Context, types.AccAddress) (types.Coins, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAllSupplied method of the parent MockLeverageKeeper instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *LeverageKeeperGetAllSuppliedFunc) PushHook(hook func(types.Context, types.AccAddress) (types.Coins, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LeverageKeeperGetAllSuppliedFunc) SetDefaultReturn(r0 types.Coins, r1 error) {
	f.SetDefaultHook(func(types.Context, types.AccAddress) (types.Coins, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LeverageKeeperGetAllSuppliedFunc) PushReturn(r0 types.Coins, r1 error) {
	f.PushHook(func(types.Context, types.AccAddress) (types.Coins, error) {
		return r0, r1
	})
}

func (f *LeverageKeeperGetAllSuppliedFunc) nextHook() func(types.Context, types.AccAddress) (types.Coins, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LeverageKeeperGetAllSuppliedFunc) appendCall(r0 LeverageKeeperGetAllSuppliedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LeverageKeeperGetAllSuppliedFuncCall
// objects describing the invocations of this function.
func (f *LeverageKeeperGetAllSuppliedFunc) History() []LeverageKeeperGetAllSuppliedFuncCall {
	f.mutex.Lock()
	history := make([]LeverageKeeperGetAllSuppliedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LeverageKeeperGetAllSuppliedFuncCall is an object that describes an
// invocation of method GetAllSupplied on an instance of MockLeverageKeeper.
type LeverageKeeperGetAllSuppliedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.AccAddress
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.Coins
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LeverageKeeperGetAllSuppliedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LeverageKeeperGetAllSuppliedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LeverageKeeperGetTokenSettingsFunc describes the behavior when the
// GetTokenSettings method of the parent MockLeverageKeeper instance is
// invoked.
type LeverageKeeperGetTokenSettingsFunc struct {
	defaultHook func(types.Context, string) (types1.Token, error)
	hooks       []func(types.Context, string) (types1.Token, error)
	history     []LeverageKeeperGetTokenSettingsFuncCall
	mutex       sync.Mutex
}

// GetTokenSettings delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLeverageKeeper) GetTokenSettings(v0 types.Context, v1 string) (types1.Token, error) {
	r0, r1 := m.GetTokenSettingsFunc.nextHook()(v0, v1)
	m.GetTokenSettingsFunc.appendCall(LeverageKeeperGetTokenSettingsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTokenSettings
// method of the parent MockLeverageKeeper instance is invoked and the hook
// queue is empty.
func (f *LeverageKeeperGetTokenSettingsFunc) SetDefaultHook(hook func(types.Context, string) (types1.Token, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTokenSettings method of the parent MockLeverageKeeper instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *LeverageKeeperGetTokenSettingsFunc) PushHook(hook func(types.Context, string) (types1.Token, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LeverageKeeperGetTokenSettingsFunc) SetDefaultReturn(r0 types1.Token, r1 error) {
	f.SetDefaultHook(func(types.Context, string) (types1.Token, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LeverageKeeperGetTokenSettingsFunc) PushReturn(r0 types1.Token, r1 error) {
	f.PushHook(func(types.Context, string) (types1.Token, error) {
		return r0, r1
	})
}

func (f *LeverageKeeperGetTokenSettingsFunc) nextHook() func(types.Context, string) (types1.Token, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LeverageKeeperGetTokenSettingsFunc) appendCall(r0 LeverageKeeperGetTokenSettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LeverageKeeperGetTokenSettingsFuncCall
// objects describing the invocations of this function.
func (f *LeverageKeeperGetTokenSettingsFunc) History() []LeverageKeeperGetTokenSettingsFuncCall {
	f.mutex.Lock()
	history := make([]LeverageKeeperGetTokenSettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LeverageKeeperGetTokenSettingsFuncCall is an object that describes an
// invocation of method GetTokenSettings on an instance of
// MockLeverageKeeper.
type LeverageKeeperGetTokenSettingsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types1.Token
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LeverageKeeperGetTokenSettingsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LeverageKeeperGetTokenSettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LeverageKeeperGetTotalSupplyFunc describes the behavior when the
// GetTotalSupply method of the parent MockLeverageKeeper instance is
// invoked.
type LeverageKeeperGetTotalSupplyFunc struct {
	defaultHook func(types.Context, string) (types.Coin, error)
	hooks       []func(types.Context, string) (types.Coin, error)
	history     []LeverageKeeperGetTotalSupplyFuncCall
	mutex       sync.Mutex
}

// GetTotalSupply delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLeverageKeeper) GetTotalSupply(v0 types.Context, v1 string) (types.Coin, error) {
	r0, r1 := m.GetTotalSupplyFunc.nextHook()(v0, v1)
	m.GetTotalSupplyFunc.appendCall(LeverageKeeperGetTotalSupplyFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTotalSupply
// method of the parent MockLeverageKeeper instance is invoked and the hook
// queue is empty.
func (f *LeverageKeeperGetTotalSupplyFunc) SetDefaultHook(hook func(types.Context, string) (types.Coin, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTotalSupply method of the parent MockLeverageKeeper instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *LeverageKeeperGetTotalSupplyFunc) PushHook(hook func(types.Context, string) (types.Coin, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LeverageKeeperGetTotalSupplyFunc) SetDefaultReturn(r0 types.Coin, r1 error) {
	f.SetDefaultHook(func(types.Context, string) (types.Coin, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LeverageKeeperGetTotalSupplyFunc) PushReturn(r0 types.Coin, r1 error) {
	f.PushHook(func(types.Context, string) (types.Coin, error) {
		return r0, r1
	})
}

func (f *LeverageKeeperGetTotalSupplyFunc) nextHook() func(types.Context, string) (types.Coin, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LeverageKeeperGetTotalSupplyFunc) appendCall(r0 LeverageKeeperGetTotalSupplyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LeverageKeeperGetTotalSupplyFuncCall
// objects describing the invocations of this function.
func (f *LeverageKeeperGetTotalSupplyFunc) History() []LeverageKeeperGetTotalSupplyFuncCall {
	f.mutex.Lock()
	history := make([]LeverageKeeperGetTotalSupplyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LeverageKeeperGetTotalSupplyFuncCall is an object that describes an
// invocation of method GetTotalSupply on an instance of MockLeverageKeeper.
type LeverageKeeperGetTotalSupplyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.Coin
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LeverageKeeperGetTotalSupplyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LeverageKeeperGetTotalSupplyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LeverageKeeperModuleMaxWithdrawFunc describes the behavior when the
// ModuleMaxWithdraw method of the parent MockLeverageKeeper instance is
// invoked.
type LeverageKeeperModuleMaxWithdrawFunc struct {
	defaultHook func(types.Context, types.Coin) (math.Int, error)
	hooks       []func(types.Context, types.Coin) (math.Int, error)
	history     []LeverageKeeperModuleMaxWithdrawFuncCall
	mutex       sync.Mutex
}

// ModuleMaxWithdraw delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLeverageKeeper) ModuleMaxWithdraw(v0 types.Context, v1 types.Coin) (math.Int, error) {
	r0, r1 := m.ModuleMaxWithdrawFunc.nextHook()(v0, v1)
	m.ModuleMaxWithdrawFunc.appendCall(LeverageKeeperModuleMaxWithdrawFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ModuleMaxWithdraw
// method of the parent MockLeverageKeeper instance is invoked and the hook
// queue is empty.
func (f *LeverageKeeperModuleMaxWithdrawFunc) SetDefaultHook(hook func(types.Context, types.Coin) (math.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ModuleMaxWithdraw method of the parent MockLeverageKeeper instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *LeverageKeeperModuleMaxWithdrawFunc) PushHook(hook func(types.Context, types.Coin) (math.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LeverageKeeperModuleMaxWithdrawFunc) SetDefaultReturn(r0 math.Int, r1 error) {
	f.SetDefaultHook(func(types.Context, types.Coin) (math.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LeverageKeeperModuleMaxWithdrawFunc) PushReturn(r0 math.Int, r1 error) {
	f.PushHook(func(types.Context, types.Coin) (math.Int, error) {
		return r0, r1
	})
}

func (f *LeverageKeeperModuleMaxWithdrawFunc) nextHook() func(types.Context, types.Coin) (math.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LeverageKeeperModuleMaxWithdrawFunc) appendCall(r0 LeverageKeeperModuleMaxWithdrawFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LeverageKeeperModuleMaxWithdrawFuncCall
// objects describing the invocations of this function.
func (f *LeverageKeeperModuleMaxWithdrawFunc) History() []LeverageKeeperModuleMaxWithdrawFuncCall {
	f.mutex.Lock()
	history := make([]LeverageKeeperModuleMaxWithdrawFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LeverageKeeperModuleMaxWithdrawFuncCall is an object that describes an
// invocation of method ModuleMaxWithdraw on an instance of
// MockLeverageKeeper.
type LeverageKeeperModuleMaxWithdrawFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.Coin
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 math.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LeverageKeeperModuleMaxWithdrawFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LeverageKeeperModuleMaxWithdrawFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LeverageKeeperSupplyFromModuleFunc describes the behavior when the
// SupplyFromModule method of the parent MockLeverageKeeper instance is
// invoked.
type LeverageKeeperSupplyFromModuleFunc struct {
	defaultHook func(types.Context, string, types.Coin) (types.Coin, bool, error)
	hooks       []func(types.Context, string, types.Coin) (types.Coin, bool, error)
	history     []LeverageKeeperSupplyFromModuleFuncCall
	mutex       sync.Mutex
}

// SupplyFromModule delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLeverageKeeper) SupplyFromModule(v0 types.Context, v1 string, v2 types.Coin) (types.Coin, bool, error) {
	r0, r1, r2 := m.SupplyFromModuleFunc.nextHook()(v0, v1, v2)
	m.SupplyFromModuleFunc.appendCall(LeverageKeeperSupplyFromModuleFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the SupplyFromModule
// method of the parent MockLeverageKeeper instance is invoked and the hook
// queue is empty.
func (f *LeverageKeeperSupplyFromModuleFunc) SetDefaultHook(hook func(types.Context, string, types.Coin) (types.Coin, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SupplyFromModule method of the parent MockLeverageKeeper instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *LeverageKeeperSupplyFromModuleFunc) PushHook(hook func(types.Context, string, types.Coin) (types.Coin, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LeverageKeeperSupplyFromModuleFunc) SetDefaultReturn(r0 types.Coin, r1 bool, r2 error) {
	f.SetDefaultHook(func(types.Context, string, types.Coin) (types.Coin, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LeverageKeeperSupplyFromModuleFunc) PushReturn(r0 types.Coin, r1 bool, r2 error) {
	f.PushHook(func(types.Context, string, types.Coin) (types.Coin, bool, error) {
		return r0, r1, r2
	})
}

func (f *LeverageKeeperSupplyFromModuleFunc) nextHook() func(types.Context, string, types.Coin) (types.Coin, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LeverageKeeperSupplyFromModuleFunc) appendCall(r0 LeverageKeeperSupplyFromModuleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LeverageKeeperSupplyFromModuleFuncCall
// objects describing the invocations of this function.
func (f *LeverageKeeperSupplyFromModuleFunc) History() []LeverageKeeperSupplyFromModuleFuncCall {
	f.mutex.Lock()
	history := make([]LeverageKeeperSupplyFromModuleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LeverageKeeperSupplyFromModuleFuncCall is an object that describes an
// invocation of method SupplyFromModule on an instance of
// MockLeverageKeeper.
type LeverageKeeperSupplyFromModuleFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 types.Coin
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.Coin
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LeverageKeeperSupplyFromModuleFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LeverageKeeperSupplyFromModuleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// LeverageKeeperWithdrawToModuleFunc describes the behavior when the
// WithdrawToModule method of the parent MockLeverageKeeper instance is
// invoked.
type LeverageKeeperWithdrawToModuleFunc struct {
	defaultHook func(types.Context, string, types.Coin) (types.Coin, bool, error)
	hooks       []func(types.Context, string, types.Coin) (types.Coin, bool, error)
	history     []LeverageKeeperWithdrawToModuleFuncCall
	mutex       sync.Mutex
}

// WithdrawToModule delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLeverageKeeper) WithdrawToModule(v0 types.Context, v1 string, v2 types.Coin) (types.Coin, bool, error) {
	r0, r1, r2 := m.WithdrawToModuleFunc.nextHook()(v0, v1, v2)
	m.WithdrawToModuleFunc.appendCall(LeverageKeeperWithdrawToModuleFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the WithdrawToModule
// method of the parent MockLeverageKeeper instance is invoked and the hook
// queue is empty.
func (f *LeverageKeeperWithdrawToModuleFunc) SetDefaultHook(hook func(types.Context, string, types.Coin) (types.Coin, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithdrawToModule method of the parent MockLeverageKeeper instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *LeverageKeeperWithdrawToModuleFunc) PushHook(hook func(types.Context, string, types.Coin) (types.Coin, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LeverageKeeperWithdrawToModuleFunc) SetDefaultReturn(r0 types.Coin, r1 bool, r2 error) {
	f.SetDefaultHook(func(types.Context, string, types.Coin) (types.Coin, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LeverageKeeperWithdrawToModuleFunc) PushReturn(r0 types.Coin, r1 bool, r2 error) {
	f.PushHook(func(types.Context, string, types.Coin) (types.Coin, bool, error) {
		return r0, r1, r2
	})
}

func (f *LeverageKeeperWithdrawToModuleFunc) nextHook() func(types.Context, string, types.Coin) (types.Coin, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LeverageKeeperWithdrawToModuleFunc) appendCall(r0 LeverageKeeperWithdrawToModuleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LeverageKeeperWithdrawToModuleFuncCall
// objects describing the invocations of this function.
func (f *LeverageKeeperWithdrawToModuleFunc) History() []LeverageKeeperWithdrawToModuleFuncCall {
	f.mutex.Lock()
	history := make([]LeverageKeeperWithdrawToModuleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LeverageKeeperWithdrawToModuleFuncCall is an object that describes an
// invocation of method WithdrawToModule on an instance of
// MockLeverageKeeper.
type LeverageKeeperWithdrawToModuleFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 types.Coin
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.Coin
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LeverageKeeperWithdrawToModuleFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LeverageKeeperWithdrawToModuleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// MockOracleKeeper is a mock implementation of the OracleKeeper interface
// (from the package github.com/umee-network/umee/v5/x/metoken) used for
// unit testing.
type MockOracleKeeper struct {
	// AllMedianPricesFunc is an instance of a mock function object
	// controlling the behavior of the method AllMedianPrices.
	AllMedianPricesFunc *OracleKeeperAllMedianPricesFunc
}

// NewMockOracleKeeper creates a new mock of the OracleKeeper interface. All
// methods return zero values for all results, unless overwritten.
func NewMockOracleKeeper() *MockOracleKeeper {
	return &MockOracleKeeper{
		AllMedianPricesFunc: &OracleKeeperAllMedianPricesFunc{
			defaultHook: func(types.Context) (r0 types2.Prices) {
				return
			},
		},
	}
}

// NewStrictMockOracleKeeper creates a new mock of the OracleKeeper
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockOracleKeeper() *MockOracleKeeper {
	return &MockOracleKeeper{
		AllMedianPricesFunc: &OracleKeeperAllMedianPricesFunc{
			defaultHook: func(types.Context) types2.Prices {
				panic("unexpected invocation of MockOracleKeeper.AllMedianPrices")
			},
		},
	}
}

// NewMockOracleKeeperFrom creates a new mock of the MockOracleKeeper
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockOracleKeeperFrom(i metoken.OracleKeeper) *MockOracleKeeper {
	return &MockOracleKeeper{
		AllMedianPricesFunc: &OracleKeeperAllMedianPricesFunc{
			defaultHook: i.AllMedianPrices,
		},
	}
}

// OracleKeeperAllMedianPricesFunc describes the behavior when the
// AllMedianPrices method of the parent MockOracleKeeper instance is
// invoked.
type OracleKeeperAllMedianPricesFunc struct {
	defaultHook func(types.Context) types2.Prices
	hooks       []func(types.Context) types2.Prices
	history     []OracleKeeperAllMedianPricesFuncCall
	mutex       sync.Mutex
}

// AllMedianPrices delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockOracleKeeper) AllMedianPrices(v0 types.Context) types2.Prices {
	r0 := m.AllMedianPricesFunc.nextHook()(v0)
	m.AllMedianPricesFunc.appendCall(OracleKeeperAllMedianPricesFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AllMedianPrices
// method of the parent MockOracleKeeper instance is invoked and the hook
// queue is empty.
func (f *OracleKeeperAllMedianPricesFunc) SetDefaultHook(hook func(types.Context) types2.Prices) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AllMedianPrices method of the parent MockOracleKeeper instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OracleKeeperAllMedianPricesFunc) PushHook(hook func(types.Context) types2.Prices) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OracleKeeperAllMedianPricesFunc) SetDefaultReturn(r0 types2.Prices) {
	f.SetDefaultHook(func(types.Context) types2.Prices {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OracleKeeperAllMedianPricesFunc) PushReturn(r0 types2.Prices) {
	f.PushHook(func(types.Context) types2.Prices {
		return r0
	})
}

func (f *OracleKeeperAllMedianPricesFunc) nextHook() func(types.Context) types2.Prices {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OracleKeeperAllMedianPricesFunc) appendCall(r0 OracleKeeperAllMedianPricesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OracleKeeperAllMedianPricesFuncCall objects
// describing the invocations of this function.
func (f *OracleKeeperAllMedianPricesFunc) History() []OracleKeeperAllMedianPricesFuncCall {
	f.mutex.Lock()
	history := make([]OracleKeeperAllMedianPricesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OracleKeeperAllMedianPricesFuncCall is an object that describes an
// invocation of method AllMedianPrices on an instance of MockOracleKeeper.
type OracleKeeperAllMedianPricesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types2.Prices
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OracleKeeperAllMedianPricesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OracleKeeperAllMedianPricesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
