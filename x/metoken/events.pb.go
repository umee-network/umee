// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/metoken/v1/events.proto

package metoken

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventSwap is emitted on Msg/Swap
type EventSwap struct {
	// meToken recipient bech32 address.
	Recipient string `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// Asset provided for the swap.
	Asset types.Coin `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset"`
	// meToken received by the recipient in exchange for the provided asset.
	Metoken types.Coin `protobuf:"bytes,3,opt,name=metoken,proto3" json:"metoken"`
	// Fee provided for the swap.
	Fee types.Coin `protobuf:"bytes,4,opt,name=fee,proto3" json:"fee"`
}

func (m *EventSwap) Reset()         { *m = EventSwap{} }
func (m *EventSwap) String() string { return proto.CompactTextString(m) }
func (*EventSwap) ProtoMessage()    {}
func (*EventSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_503099fd3bb02aa5, []int{0}
}
func (m *EventSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSwap.Merge(m, src)
}
func (m *EventSwap) XXX_Size() int {
	return m.Size()
}
func (m *EventSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSwap.DiscardUnknown(m)
}

var xxx_messageInfo_EventSwap proto.InternalMessageInfo

// EventRedeem is emitted on Msg/Redeem
type EventRedeem struct {
	// Asset recipient bech32 address.
	Recipient string `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// meToken provided for the redemption.
	Metoken types.Coin `protobuf:"bytes,2,opt,name=metoken,proto3" json:"metoken"`
	// Asset received by the recipient in exchange for the provided meToken.
	Asset types.Coin `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset"`
	// Fee provided for the redemption.
	Fee types.Coin `protobuf:"bytes,4,opt,name=fee,proto3" json:"fee"`
}

func (m *EventRedeem) Reset()         { *m = EventRedeem{} }
func (m *EventRedeem) String() string { return proto.CompactTextString(m) }
func (*EventRedeem) ProtoMessage()    {}
func (*EventRedeem) Descriptor() ([]byte, []int) {
	return fileDescriptor_503099fd3bb02aa5, []int{1}
}
func (m *EventRedeem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRedeem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRedeem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRedeem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRedeem.Merge(m, src)
}
func (m *EventRedeem) XXX_Size() int {
	return m.Size()
}
func (m *EventRedeem) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRedeem.DiscardUnknown(m)
}

var xxx_messageInfo_EventRedeem proto.InternalMessageInfo

// EventRebalancing is emitted when a reserve re-balancing occurs.
type EventRebalancing struct {
	// RebalancingResults of every asset in every Index.
	Results []RebalancingResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results"`
}

func (m *EventRebalancing) Reset()         { *m = EventRebalancing{} }
func (m *EventRebalancing) String() string { return proto.CompactTextString(m) }
func (*EventRebalancing) ProtoMessage()    {}
func (*EventRebalancing) Descriptor() ([]byte, []int) {
	return fileDescriptor_503099fd3bb02aa5, []int{2}
}
func (m *EventRebalancing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRebalancing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRebalancing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRebalancing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRebalancing.Merge(m, src)
}
func (m *EventRebalancing) XXX_Size() int {
	return m.Size()
}
func (m *EventRebalancing) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRebalancing.DiscardUnknown(m)
}

var xxx_messageInfo_EventRebalancing proto.InternalMessageInfo

// RebalancingResult of a specific Index with initial and result balances of underlying assets.
type RebalancingResult struct {
	MetokenDenom string `protobuf:"bytes,1,opt,name=metoken_denom,json=metokenDenom,proto3" json:"metoken_denom,omitempty"`
	//Initial balance of an asset in the Index before re-balancing.
	InitialBalance []types.Coin `protobuf:"bytes,2,rep,name=initial_balance,json=initialBalance,proto3" json:"initial_balance"`
	// Result balance of an asset in the Index after re-balancing.
	ResultBalance []types.Coin `protobuf:"bytes,3,rep,name=result_balance,json=resultBalance,proto3" json:"result_balance"`
}

func (m *RebalancingResult) Reset()         { *m = RebalancingResult{} }
func (m *RebalancingResult) String() string { return proto.CompactTextString(m) }
func (*RebalancingResult) ProtoMessage()    {}
func (*RebalancingResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_503099fd3bb02aa5, []int{3}
}
func (m *RebalancingResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RebalancingResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RebalancingResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RebalancingResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RebalancingResult.Merge(m, src)
}
func (m *RebalancingResult) XXX_Size() int {
	return m.Size()
}
func (m *RebalancingResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RebalancingResult.DiscardUnknown(m)
}

var xxx_messageInfo_RebalancingResult proto.InternalMessageInfo

// EventInterestClaim is emitted when the accrued interest was claimed from x/leverage
type EventInterestClaim struct {
	// The denom and amount of successfully claimed interest
	ClaimedAsset []types.Coin `protobuf:"bytes,1,rep,name=claimed_asset,json=claimedAsset,proto3" json:"claimed_asset"`
}

func (m *EventInterestClaim) Reset()         { *m = EventInterestClaim{} }
func (m *EventInterestClaim) String() string { return proto.CompactTextString(m) }
func (*EventInterestClaim) ProtoMessage()    {}
func (*EventInterestClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_503099fd3bb02aa5, []int{4}
}
func (m *EventInterestClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventInterestClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventInterestClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventInterestClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventInterestClaim.Merge(m, src)
}
func (m *EventInterestClaim) XXX_Size() int {
	return m.Size()
}
func (m *EventInterestClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_EventInterestClaim.DiscardUnknown(m)
}

var xxx_messageInfo_EventInterestClaim proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EventSwap)(nil), "umee.metoken.v1.EventSwap")
	proto.RegisterType((*EventRedeem)(nil), "umee.metoken.v1.EventRedeem")
	proto.RegisterType((*EventRebalancing)(nil), "umee.metoken.v1.EventRebalancing")
	proto.RegisterType((*RebalancingResult)(nil), "umee.metoken.v1.RebalancingResult")
	proto.RegisterType((*EventInterestClaim)(nil), "umee.metoken.v1.EventInterestClaim")
}

func init() { proto.RegisterFile("umee/metoken/v1/events.proto", fileDescriptor_503099fd3bb02aa5) }

var fileDescriptor_503099fd3bb02aa5 = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0x8f, 0x9b, 0xc1, 0x54, 0x77, 0xdd, 0xc0, 0xda, 0x21, 0x9b, 0x50, 0xa8, 0xc2, 0xa5, 0x1c,
	0x16, 0x2b, 0x43, 0x4c, 0xe2, 0xb8, 0x6c, 0xfc, 0xbb, 0x66, 0x12, 0x87, 0x5d, 0xaa, 0xfc, 0x79,
	0x04, 0x6b, 0x8d, 0x5d, 0xc5, 0x6e, 0xc6, 0xc7, 0xe0, 0xc3, 0xf0, 0x21, 0x2a, 0x4e, 0x13, 0x27,
	0x4e, 0x08, 0xda, 0x0b, 0xe2, 0x53, 0x20, 0xc7, 0xee, 0x98, 0xe0, 0xb0, 0xae, 0x37, 0x3f, 0xff,
	0xfe, 0xbc, 0xf7, 0x7b, 0x6e, 0x83, 0x1f, 0x4d, 0x2b, 0x00, 0x5a, 0x81, 0x12, 0x17, 0xc0, 0x69,
	0x13, 0x51, 0x68, 0x80, 0x2b, 0x19, 0x4e, 0x6a, 0xa1, 0x04, 0xd9, 0xd1, 0x68, 0x68, 0xd1, 0xb0,
	0x89, 0xf6, 0x77, 0x4b, 0x51, 0x8a, 0x16, 0xa3, 0xfa, 0x64, 0x68, 0xfb, 0x7b, 0xb9, 0x90, 0x95,
	0x90, 0x23, 0x03, 0x98, 0xc2, 0x42, 0xbe, 0xa9, 0x68, 0x96, 0x4a, 0xa0, 0x4d, 0x94, 0x81, 0x4a,
	0x23, 0x9a, 0x0b, 0xc6, 0x0d, 0x1e, 0xfc, 0x42, 0xb8, 0xfb, 0x52, 0xb7, 0x3c, 0xbb, 0x4c, 0x27,
	0xe4, 0x08, 0x77, 0x6b, 0xc8, 0xd9, 0x84, 0x01, 0x57, 0x1e, 0x1a, 0xa0, 0x61, 0x37, 0xf6, 0xbe,
	0x7e, 0x3e, 0xd8, 0xb5, 0x96, 0xc7, 0x45, 0x51, 0x83, 0x94, 0x67, 0xaa, 0x66, 0xbc, 0x4c, 0xfe,
	0x52, 0xc9, 0x73, 0x7c, 0x2f, 0x95, 0x12, 0x94, 0xd7, 0x19, 0xa0, 0x61, 0xef, 0x70, 0x2f, 0xb4,
	0x02, 0xdd, 0x35, 0xb4, 0x5d, 0xc3, 0x13, 0xc1, 0x78, 0xbc, 0x31, 0xfb, 0xfe, 0xd8, 0x49, 0x0c,
	0x9b, 0xbc, 0xc0, 0x9b, 0x36, 0x9b, 0xe7, 0xae, 0x26, 0x5c, 0xf2, 0x49, 0x84, 0xdd, 0xf7, 0x00,
	0xde, 0xc6, 0x6a, 0x32, 0xcd, 0x0d, 0x7e, 0x23, 0xdc, 0x6b, 0xa3, 0x26, 0x50, 0x00, 0x54, 0x6b,
	0x87, 0xbd, 0x31, 0x75, 0xe7, 0x8e, 0x53, 0x5f, 0xef, 0xc9, 0xbd, 0xd3, 0x9e, 0xd6, 0x08, 0xfb,
	0x0e, 0x3f, 0xb0, 0x59, 0xb3, 0x74, 0x9c, 0xf2, 0x9c, 0xf1, 0x92, 0xc4, 0x78, 0xb3, 0x06, 0x39,
	0x1d, 0x2b, 0xe9, 0xa1, 0x81, 0x3b, 0xec, 0x1d, 0x06, 0xe1, 0x3f, 0xbf, 0xaf, 0xf0, 0x06, 0x3d,
	0x69, 0xa9, 0xcb, 0x04, 0x56, 0x18, 0x7c, 0x41, 0xf8, 0xe1, 0x7f, 0x24, 0xf2, 0x04, 0xf7, 0xad,
	0xc9, 0xa8, 0x00, 0x2e, 0x2a, 0xb3, 0xce, 0x64, 0xcb, 0x5e, 0x9e, 0xea, 0x3b, 0xf2, 0x06, 0xef,
	0x30, 0xce, 0x14, 0x4b, 0xc7, 0x23, 0xa3, 0x07, 0xaf, 0xd3, 0x8e, 0x71, 0x6b, 0xa2, 0x6d, 0xab,
	0x8b, 0x8d, 0x8c, 0xbc, 0xc2, 0xdb, 0x66, 0x9e, 0x6b, 0x23, 0x77, 0x35, 0xa3, 0xbe, 0x91, 0x59,
	0x9f, 0xe0, 0x1c, 0x93, 0x76, 0x49, 0x6f, 0xb9, 0x82, 0x1a, 0xa4, 0x3a, 0x19, 0xa7, 0xac, 0x22,
	0xa7, 0xb8, 0x9f, 0xeb, 0x03, 0x14, 0x23, 0xf3, 0x58, 0x68, 0x35, 0xf3, 0x2d, 0xab, 0x3a, 0xd6,
	0xa2, 0xf8, 0xf5, 0xec, 0xa7, 0xef, 0xcc, 0xe6, 0x3e, 0xba, 0x9a, 0xfb, 0xe8, 0xc7, 0xdc, 0x47,
	0x9f, 0x16, 0xbe, 0x73, 0xb5, 0xf0, 0x9d, 0x6f, 0x0b, 0xdf, 0x39, 0x7f, 0x5a, 0x32, 0xf5, 0x61,
	0x9a, 0x85, 0xb9, 0xa8, 0xa8, 0x7e, 0x83, 0x03, 0x0e, 0xea, 0x52, 0xd4, 0x17, 0x6d, 0x41, 0x9b,
	0x23, 0xfa, 0x71, 0xf9, 0x4d, 0xc8, 0xee, 0xb7, 0x7f, 0xd4, 0x67, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x6e, 0x73, 0xaa, 0xc4, 0x2a, 0x04, 0x00, 0x00,
}

func (m *EventSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Metoken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRedeem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRedeem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRedeem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Metoken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRebalancing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRebalancing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRebalancing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RebalancingResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RebalancingResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RebalancingResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResultBalance) > 0 {
		for iNdEx := len(m.ResultBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResultBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.InitialBalance) > 0 {
		for iNdEx := len(m.InitialBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InitialBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MetokenDenom) > 0 {
		i -= len(m.MetokenDenom)
		copy(dAtA[i:], m.MetokenDenom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MetokenDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventInterestClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventInterestClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventInterestClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimedAsset) > 0 {
		for iNdEx := len(m.ClaimedAsset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClaimedAsset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Asset.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Metoken.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Fee.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventRedeem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Metoken.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Asset.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Fee.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventRebalancing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *RebalancingResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetokenDenom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.InitialBalance) > 0 {
		for _, e := range m.InitialBalance {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.ResultBalance) > 0 {
		for _, e := range m.ResultBalance {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventInterestClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClaimedAsset) > 0 {
		for _, e := range m.ClaimedAsset {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metoken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metoken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRedeem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRedeem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRedeem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metoken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metoken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRebalancing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRebalancing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRebalancing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, RebalancingResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RebalancingResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RebalancingResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RebalancingResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialBalance = append(m.InitialBalance, types.Coin{})
			if err := m.InitialBalance[len(m.InitialBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultBalance = append(m.ResultBalance, types.Coin{})
			if err := m.ResultBalance[len(m.ResultBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventInterestClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventInterestClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventInterestClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedAsset = append(m.ClaimedAsset, types.Coin{})
			if err := m.ClaimedAsset[len(m.ClaimedAsset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
