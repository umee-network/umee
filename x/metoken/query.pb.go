// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/metoken/v1/query.proto

package metoken

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParams defines the request structure for the Params gRPC service
// handler.
type QueryParams struct {
}

func (m *QueryParams) Reset()         { *m = QueryParams{} }
func (m *QueryParams) String() string { return proto.CompactTextString(m) }
func (*QueryParams) ProtoMessage()    {}
func (*QueryParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{0}
}
func (m *QueryParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParams.Merge(m, src)
}
func (m *QueryParams) XXX_Size() int {
	return m.Size()
}
func (m *QueryParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParams proto.InternalMessageInfo

// QueryParamsResponse defines the response structure for the Params gRPC
// service handler.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

// QueryIndexes defines the request structure for the Indexes gRPC service handler.
// metoken_denom param is optional, if it is not informed the query will return all the Indexes.
type QueryIndexes struct {
	MetokenDenom string `protobuf:"bytes,1,opt,name=metoken_denom,json=metokenDenom,proto3" json:"metoken_denom,omitempty"`
}

func (m *QueryIndexes) Reset()         { *m = QueryIndexes{} }
func (m *QueryIndexes) String() string { return proto.CompactTextString(m) }
func (*QueryIndexes) ProtoMessage()    {}
func (*QueryIndexes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{2}
}
func (m *QueryIndexes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIndexes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIndexes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIndexes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIndexes.Merge(m, src)
}
func (m *QueryIndexes) XXX_Size() int {
	return m.Size()
}
func (m *QueryIndexes) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIndexes.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIndexes proto.InternalMessageInfo

// QueryIndexesResponse defines the response structure for the Indexes gRPC service handler.
type QueryIndexesResponse struct {
	Registry []Index `protobuf:"bytes,1,rep,name=registry,proto3" json:"registry"`
}

func (m *QueryIndexesResponse) Reset()         { *m = QueryIndexesResponse{} }
func (m *QueryIndexesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIndexesResponse) ProtoMessage()    {}
func (*QueryIndexesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{3}
}
func (m *QueryIndexesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIndexesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIndexesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIndexesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIndexesResponse.Merge(m, src)
}
func (m *QueryIndexesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIndexesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIndexesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIndexesResponse proto.InternalMessageInfo

// QuerySwapFee defines the request structure for the SwapFee gRPC service handler.
type QuerySwapFee struct {
	Asset        types.Coin `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset"`
	MetokenDenom string     `protobuf:"bytes,2,opt,name=metoken_denom,json=metokenDenom,proto3" json:"metoken_denom,omitempty"`
}

func (m *QuerySwapFee) Reset()         { *m = QuerySwapFee{} }
func (m *QuerySwapFee) String() string { return proto.CompactTextString(m) }
func (*QuerySwapFee) ProtoMessage()    {}
func (*QuerySwapFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{4}
}
func (m *QuerySwapFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySwapFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySwapFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySwapFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySwapFee.Merge(m, src)
}
func (m *QuerySwapFee) XXX_Size() int {
	return m.Size()
}
func (m *QuerySwapFee) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySwapFee.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySwapFee proto.InternalMessageInfo

// QuerySwapFeeResponse defines the response structure for the SwapFee gRPC service handler.
type QuerySwapFeeResponse struct {
	Asset types.Coin `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset"`
}

func (m *QuerySwapFeeResponse) Reset()         { *m = QuerySwapFeeResponse{} }
func (m *QuerySwapFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySwapFeeResponse) ProtoMessage()    {}
func (*QuerySwapFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{5}
}
func (m *QuerySwapFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySwapFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySwapFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySwapFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySwapFeeResponse.Merge(m, src)
}
func (m *QuerySwapFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySwapFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySwapFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySwapFeeResponse proto.InternalMessageInfo

// QueryRedeemFee defines the request structure for the RedeemFee gRPC service handler.
type QueryRedeemFee struct {
	Metoken    types.Coin `protobuf:"bytes,1,opt,name=metoken,proto3" json:"metoken"`
	AssetDenom string     `protobuf:"bytes,2,opt,name=asset_denom,json=assetDenom,proto3" json:"asset_denom,omitempty"`
}

func (m *QueryRedeemFee) Reset()         { *m = QueryRedeemFee{} }
func (m *QueryRedeemFee) String() string { return proto.CompactTextString(m) }
func (*QueryRedeemFee) ProtoMessage()    {}
func (*QueryRedeemFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{6}
}
func (m *QueryRedeemFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedeemFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedeemFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedeemFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedeemFee.Merge(m, src)
}
func (m *QueryRedeemFee) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedeemFee) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedeemFee.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedeemFee proto.InternalMessageInfo

// QueryRedeemFeeResponse defines the response structure for the RedeemFee gRPC service handler.
type QueryRedeemFeeResponse struct {
	Asset types.Coin `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset"`
}

func (m *QueryRedeemFeeResponse) Reset()         { *m = QueryRedeemFeeResponse{} }
func (m *QueryRedeemFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRedeemFeeResponse) ProtoMessage()    {}
func (*QueryRedeemFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{7}
}
func (m *QueryRedeemFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedeemFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedeemFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedeemFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedeemFeeResponse.Merge(m, src)
}
func (m *QueryRedeemFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedeemFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedeemFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedeemFeeResponse proto.InternalMessageInfo

// QueryIndexBalances defines the request structure for the IndexBalances gRPC service handler.
// metoken_denom param is optional, if it is not informed the query will return all the Indexes.
type QueryIndexBalances struct {
	MetokenDenom string `protobuf:"bytes,1,opt,name=metoken_denom,json=metokenDenom,proto3" json:"metoken_denom,omitempty"`
}

func (m *QueryIndexBalances) Reset()         { *m = QueryIndexBalances{} }
func (m *QueryIndexBalances) String() string { return proto.CompactTextString(m) }
func (*QueryIndexBalances) ProtoMessage()    {}
func (*QueryIndexBalances) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{8}
}
func (m *QueryIndexBalances) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIndexBalances) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIndexBalances.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIndexBalances) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIndexBalances.Merge(m, src)
}
func (m *QueryIndexBalances) XXX_Size() int {
	return m.Size()
}
func (m *QueryIndexBalances) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIndexBalances.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIndexBalances proto.InternalMessageInfo

// QueryIndexBalanceResponse defines the response structure for the IndexBalances gRPC service handler.
type QueryIndexBalancesResponse struct {
	IndexBalances []IndexBalances `protobuf:"bytes,1,rep,name=index_balances,json=indexBalances,proto3" json:"index_balances"`
}

func (m *QueryIndexBalancesResponse) Reset()         { *m = QueryIndexBalancesResponse{} }
func (m *QueryIndexBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIndexBalancesResponse) ProtoMessage()    {}
func (*QueryIndexBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{9}
}
func (m *QueryIndexBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIndexBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIndexBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIndexBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIndexBalancesResponse.Merge(m, src)
}
func (m *QueryIndexBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIndexBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIndexBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIndexBalancesResponse proto.InternalMessageInfo

// QueryIndexePrice defines the request structure for the IndexPrice gRPC service handler.
// metoken_denom param is optional, if it is not informed the query will return all the Index's prices.
type QueryIndexPrice struct {
	MetokenDenom string `protobuf:"bytes,1,opt,name=metoken_denom,json=metokenDenom,proto3" json:"metoken_denom,omitempty"`
}

func (m *QueryIndexPrice) Reset()         { *m = QueryIndexPrice{} }
func (m *QueryIndexPrice) String() string { return proto.CompactTextString(m) }
func (*QueryIndexPrice) ProtoMessage()    {}
func (*QueryIndexPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{10}
}
func (m *QueryIndexPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIndexPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIndexPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIndexPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIndexPrice.Merge(m, src)
}
func (m *QueryIndexPrice) XXX_Size() int {
	return m.Size()
}
func (m *QueryIndexPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIndexPrice.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIndexPrice proto.InternalMessageInfo

// QueryIndexPriceResponse defines the response structure for the IndexPrice gRPC service handler.
type QueryIndexPriceResponse struct {
	Prices []Price `protobuf:"bytes,1,rep,name=prices,proto3" json:"prices"`
}

func (m *QueryIndexPriceResponse) Reset()         { *m = QueryIndexPriceResponse{} }
func (m *QueryIndexPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIndexPriceResponse) ProtoMessage()    {}
func (*QueryIndexPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{11}
}
func (m *QueryIndexPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIndexPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIndexPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIndexPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIndexPriceResponse.Merge(m, src)
}
func (m *QueryIndexPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIndexPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIndexPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIndexPriceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryParams)(nil), "umeenetwork.umee.metoken.v1.QueryParams")
	proto.RegisterType((*QueryParamsResponse)(nil), "umeenetwork.umee.metoken.v1.QueryParamsResponse")
	proto.RegisterType((*QueryIndexes)(nil), "umeenetwork.umee.metoken.v1.QueryIndexes")
	proto.RegisterType((*QueryIndexesResponse)(nil), "umeenetwork.umee.metoken.v1.QueryIndexesResponse")
	proto.RegisterType((*QuerySwapFee)(nil), "umeenetwork.umee.metoken.v1.QuerySwapFee")
	proto.RegisterType((*QuerySwapFeeResponse)(nil), "umeenetwork.umee.metoken.v1.QuerySwapFeeResponse")
	proto.RegisterType((*QueryRedeemFee)(nil), "umeenetwork.umee.metoken.v1.QueryRedeemFee")
	proto.RegisterType((*QueryRedeemFeeResponse)(nil), "umeenetwork.umee.metoken.v1.QueryRedeemFeeResponse")
	proto.RegisterType((*QueryIndexBalances)(nil), "umeenetwork.umee.metoken.v1.QueryIndexBalances")
	proto.RegisterType((*QueryIndexBalancesResponse)(nil), "umeenetwork.umee.metoken.v1.QueryIndexBalancesResponse")
	proto.RegisterType((*QueryIndexPrice)(nil), "umeenetwork.umee.metoken.v1.QueryIndexPrice")
	proto.RegisterType((*QueryIndexPriceResponse)(nil), "umeenetwork.umee.metoken.v1.QueryIndexPriceResponse")
}

func init() { proto.RegisterFile("umee/metoken/v1/query.proto", fileDescriptor_2f141a376167f31d) }

var fileDescriptor_2f141a376167f31d = []byte{
	// 697 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xcf, 0x4f, 0xd4, 0x40,
	0x14, 0xc7, 0xb7, 0x28, 0x8b, 0xbc, 0x65, 0x31, 0x19, 0x89, 0x40, 0x81, 0x2e, 0x14, 0x13, 0xc1,
	0x1f, 0xad, 0x0b, 0xa2, 0xe1, 0xa6, 0x48, 0x34, 0x1e, 0x8c, 0xb8, 0x1e, 0x34, 0x6a, 0x42, 0xba,
	0xcb, 0xb3, 0x56, 0xe8, 0x4c, 0xed, 0x74, 0x17, 0xb8, 0x9a, 0x78, 0xd0, 0x93, 0xd1, 0xc4, 0x3f,
	0xc0, 0xbf, 0x86, 0x23, 0x89, 0x17, 0x4f, 0x46, 0xc1, 0xff, 0xc2, 0x8b, 0xe9, 0x74, 0x3a, 0x2c,
	0xbb, 0xb0, 0x74, 0xf5, 0x56, 0xde, 0xbc, 0xef, 0xf7, 0x7d, 0x5e, 0x3b, 0x5f, 0x16, 0xc6, 0xea,
	0x3e, 0xa2, 0xed, 0x63, 0xc4, 0xd6, 0x91, 0xda, 0x8d, 0xb2, 0xfd, 0xa6, 0x8e, 0xe1, 0xb6, 0x15,
	0x84, 0x2c, 0x62, 0x44, 0x1c, 0x52, 0x8c, 0x36, 0x59, 0xb8, 0x6e, 0xc5, 0xcf, 0x96, 0x6c, 0xb4,
	0x1a, 0x65, 0x7d, 0xdc, 0x65, 0xcc, 0xdd, 0x40, 0xdb, 0x09, 0x3c, 0xdb, 0xa1, 0x94, 0x45, 0x4e,
	0xe4, 0x31, 0xca, 0x13, 0xa9, 0x3e, 0xe4, 0x32, 0x97, 0x89, 0x47, 0x3b, 0x7e, 0x92, 0x55, 0xa3,
	0xc6, 0xb8, 0xcf, 0xb8, 0x5d, 0x75, 0x38, 0xda, 0x8d, 0x72, 0x15, 0x23, 0xa7, 0x6c, 0xd7, 0x98,
	0x47, 0xe5, 0xf9, 0x44, 0x2b, 0x4d, 0x3a, 0xef, 0x98, 0x63, 0x17, 0x29, 0x72, 0x4f, 0xce, 0x34,
	0x8b, 0x50, 0x78, 0x14, 0xd3, 0xaf, 0x38, 0xa1, 0xe3, 0x73, 0xf3, 0x29, 0x9c, 0x6b, 0xfa, 0xb3,
	0x82, 0x3c, 0x60, 0x94, 0x23, 0xb9, 0x0d, 0xf9, 0x40, 0x54, 0x46, 0xb4, 0x49, 0x6d, 0xa6, 0x30,
	0x37, 0x6d, 0x75, 0xd8, 0xd2, 0x4a, 0xc4, 0x4b, 0xa7, 0x77, 0x7e, 0x94, 0x72, 0x15, 0x29, 0x34,
	0xe7, 0x61, 0x40, 0x38, 0xdf, 0xa7, 0x6b, 0xb8, 0x85, 0x9c, 0x4c, 0x43, 0x51, 0x4a, 0x56, 0xd7,
	0x90, 0x32, 0x5f, 0x38, 0xf7, 0x57, 0x06, 0x64, 0x71, 0x39, 0xae, 0x99, 0x2f, 0x60, 0xa8, 0x59,
	0xa4, 0x78, 0x96, 0xe1, 0x4c, 0x88, 0xae, 0xc7, 0xa3, 0x70, 0x7b, 0x44, 0x9b, 0x3c, 0x35, 0x53,
	0x98, 0x33, 0x3b, 0x12, 0x09, 0xbd, 0x04, 0x52, 0x4a, 0xf3, 0xb5, 0x44, 0x7a, 0xbc, 0xe9, 0x04,
	0x77, 0x11, 0xc9, 0x02, 0xf4, 0x3a, 0x9c, 0x63, 0x24, 0x97, 0x1c, 0xb5, 0x92, 0x37, 0x6f, 0xc5,
	0x6f, 0xde, 0x92, 0x6f, 0xde, 0xba, 0xc3, 0x3c, 0x2a, 0x9d, 0x92, 0xee, 0xf6, 0x4d, 0x7a, 0x8e,
	0xd8, 0xe4, 0x81, 0xdc, 0x44, 0xce, 0x52, 0x9b, 0xfc, 0xdb, 0x4c, 0x73, 0x03, 0x06, 0x85, 0x5d,
	0x05, 0xd7, 0x10, 0xfd, 0x18, 0x7e, 0x11, 0xfa, 0xe4, 0xc0, 0xac, 0x56, 0x69, 0x3f, 0x29, 0x41,
	0x41, 0xb8, 0x1e, 0xc2, 0x07, 0x51, 0x4a, 0xe0, 0x1f, 0xc2, 0xf9, 0xc3, 0xd3, 0xfe, 0x17, 0x7f,
	0x11, 0xc8, 0xc1, 0x77, 0x5d, 0x72, 0x36, 0x1c, 0x5a, 0xcb, 0x7a, 0x25, 0xea, 0xa0, 0xb7, 0x4b,
	0x15, 0xcf, 0x13, 0x18, 0xf4, 0xe2, 0x83, 0xd5, 0xaa, 0x3c, 0x91, 0xd7, 0xe3, 0x52, 0x86, 0xeb,
	0x21, 0x15, 0x92, 0xb4, 0xe8, 0x35, 0x17, 0xcd, 0x1b, 0x70, 0xf6, 0x60, 0xec, 0x4a, 0xe8, 0xd5,
	0x30, 0x1b, 0xee, 0x73, 0x18, 0x6e, 0xd1, 0x29, 0xd6, 0x5b, 0x90, 0x0f, 0xe2, 0x02, 0xcf, 0x74,
	0x85, 0x85, 0x56, 0x65, 0x4a, 0xe8, 0xe6, 0xfe, 0xe4, 0xa1, 0x57, 0xb8, 0x93, 0x77, 0x1a, 0xe4,
	0x93, 0xd8, 0x91, 0x99, 0x8e, 0x36, 0x4d, 0xe9, 0xd6, 0xaf, 0x65, 0xed, 0x4c, 0x91, 0xcd, 0xd2,
	0xdb, 0x6f, 0xbf, 0x3f, 0xf7, 0x8c, 0x92, 0x61, 0xbb, 0xf5, 0xbf, 0x4a, 0x92, 0x72, 0xf2, 0x5e,
	0x83, 0xbe, 0x34, 0xe1, 0xb3, 0x27, 0xdb, 0xcb, 0x56, 0xbd, 0x9c, 0xb9, 0x55, 0xa1, 0x4c, 0x0a,
	0x14, 0x9d, 0x8c, 0xb4, 0xa1, 0x78, 0x72, 0xfe, 0x07, 0x0d, 0xfa, 0xd2, 0x68, 0x67, 0x60, 0x91,
	0xad, 0x59, 0x58, 0x5a, 0x42, 0x6c, 0x4e, 0x09, 0x96, 0x31, 0x32, 0xda, 0xc6, 0xc2, 0x37, 0x9d,
	0x60, 0xf5, 0x25, 0x22, 0xf9, 0xa4, 0x41, 0xff, 0x41, 0x58, 0x2f, 0x9f, 0x3c, 0x43, 0x35, 0xeb,
	0xf3, 0x5d, 0x34, 0x2b, 0xa4, 0x69, 0x81, 0x34, 0x41, 0xc6, 0xda, 0x90, 0x42, 0xd1, 0x2b, 0xa0,
	0xbe, 0x6a, 0x50, 0x3c, 0x1c, 0x41, 0x3b, 0xe3, 0x87, 0x48, 0x05, 0xfa, 0xcd, 0x2e, 0x05, 0x0a,
	0xf0, 0xa2, 0x00, 0x9c, 0x22, 0xa5, 0xa3, 0xbf, 0x9f, 0x0a, 0x30, 0xf9, 0xa2, 0x01, 0x34, 0xa5,
	0xee, 0x4a, 0xc6, 0x81, 0xa2, 0x5b, 0xbf, 0xde, 0x4d, 0xb7, 0x62, 0xbb, 0x20, 0xd8, 0x0c, 0x32,
	0x7e, 0x0c, 0x9b, 0x88, 0xdf, 0xd2, 0xbd, 0x9d, 0x5f, 0x46, 0x6e, 0x67, 0xcf, 0xd0, 0x76, 0xf7,
	0x0c, 0xed, 0xe7, 0x9e, 0xa1, 0x7d, 0xdc, 0x37, 0x72, 0xbb, 0xfb, 0x46, 0xee, 0xfb, 0xbe, 0x91,
	0x7b, 0x36, 0xeb, 0x7a, 0xd1, 0xab, 0x7a, 0xd5, 0xaa, 0x31, 0x5f, 0xb8, 0x5c, 0x95, 0x10, 0x89,
	0x65, 0x63, 0xc1, 0xde, 0x4a, 0x7d, 0xab, 0x79, 0xf1, 0x53, 0x3c, 0xff, 0x37, 0x00, 0x00, 0xff,
	0xff, 0x76, 0x0d, 0xea, 0xa1, 0x58, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the x/metoken module.
	Params(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Indexes queries for a specific or all the registered indexes.
	Indexes(ctx context.Context, in *QueryIndexes, opts ...grpc.CallOption) (*QueryIndexesResponse, error)
	// SwapFee computes fee that would be applied when executing MsgSwap.
	SwapFee(ctx context.Context, in *QuerySwapFee, opts ...grpc.CallOption) (*QuerySwapFeeResponse, error)
	// RedeemFee computes a fee that would be applied when executing MsgRedeem.
	RedeemFee(ctx context.Context, in *QueryRedeemFee, opts ...grpc.CallOption) (*QueryRedeemFeeResponse, error)
	// IndexBalances queries for Index's balances of a specific or all the registered indexes.
	IndexBalances(ctx context.Context, in *QueryIndexBalances, opts ...grpc.CallOption) (*QueryIndexBalancesResponse, error)
	// IndexPrice queries for Index's price of a specific or all the registered indexes.
	IndexPrice(ctx context.Context, in *QueryIndexPrice, opts ...grpc.CallOption) (*QueryIndexPriceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.metoken.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Indexes(ctx context.Context, in *QueryIndexes, opts ...grpc.CallOption) (*QueryIndexesResponse, error) {
	out := new(QueryIndexesResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.metoken.v1.Query/Indexes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SwapFee(ctx context.Context, in *QuerySwapFee, opts ...grpc.CallOption) (*QuerySwapFeeResponse, error) {
	out := new(QuerySwapFeeResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.metoken.v1.Query/SwapFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RedeemFee(ctx context.Context, in *QueryRedeemFee, opts ...grpc.CallOption) (*QueryRedeemFeeResponse, error) {
	out := new(QueryRedeemFeeResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.metoken.v1.Query/RedeemFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IndexBalances(ctx context.Context, in *QueryIndexBalances, opts ...grpc.CallOption) (*QueryIndexBalancesResponse, error) {
	out := new(QueryIndexBalancesResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.metoken.v1.Query/IndexBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IndexPrice(ctx context.Context, in *QueryIndexPrice, opts ...grpc.CallOption) (*QueryIndexPriceResponse, error) {
	out := new(QueryIndexPriceResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.metoken.v1.Query/IndexPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the x/metoken module.
	Params(context.Context, *QueryParams) (*QueryParamsResponse, error)
	// Indexes queries for a specific or all the registered indexes.
	Indexes(context.Context, *QueryIndexes) (*QueryIndexesResponse, error)
	// SwapFee computes fee that would be applied when executing MsgSwap.
	SwapFee(context.Context, *QuerySwapFee) (*QuerySwapFeeResponse, error)
	// RedeemFee computes a fee that would be applied when executing MsgRedeem.
	RedeemFee(context.Context, *QueryRedeemFee) (*QueryRedeemFeeResponse, error)
	// IndexBalances queries for Index's balances of a specific or all the registered indexes.
	IndexBalances(context.Context, *QueryIndexBalances) (*QueryIndexBalancesResponse, error)
	// IndexPrice queries for Index's price of a specific or all the registered indexes.
	IndexPrice(context.Context, *QueryIndexPrice) (*QueryIndexPriceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParams) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Indexes(ctx context.Context, req *QueryIndexes) (*QueryIndexesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Indexes not implemented")
}
func (*UnimplementedQueryServer) SwapFee(ctx context.Context, req *QuerySwapFee) (*QuerySwapFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapFee not implemented")
}
func (*UnimplementedQueryServer) RedeemFee(ctx context.Context, req *QueryRedeemFee) (*QueryRedeemFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemFee not implemented")
}
func (*UnimplementedQueryServer) IndexBalances(ctx context.Context, req *QueryIndexBalances) (*QueryIndexBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexBalances not implemented")
}
func (*UnimplementedQueryServer) IndexPrice(ctx context.Context, req *QueryIndexPrice) (*QueryIndexPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexPrice not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.metoken.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Indexes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIndexes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Indexes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.metoken.v1.Query/Indexes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Indexes(ctx, req.(*QueryIndexes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SwapFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySwapFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SwapFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.metoken.v1.Query/SwapFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SwapFee(ctx, req.(*QuerySwapFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RedeemFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRedeemFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RedeemFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.metoken.v1.Query/RedeemFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RedeemFee(ctx, req.(*QueryRedeemFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IndexBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIndexBalances)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IndexBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.metoken.v1.Query/IndexBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IndexBalances(ctx, req.(*QueryIndexBalances))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IndexPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIndexPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IndexPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.metoken.v1.Query/IndexPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IndexPrice(ctx, req.(*QueryIndexPrice))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "umeenetwork.umee.metoken.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Indexes",
			Handler:    _Query_Indexes_Handler,
		},
		{
			MethodName: "SwapFee",
			Handler:    _Query_SwapFee_Handler,
		},
		{
			MethodName: "RedeemFee",
			Handler:    _Query_RedeemFee_Handler,
		},
		{
			MethodName: "IndexBalances",
			Handler:    _Query_IndexBalances_Handler,
		},
		{
			MethodName: "IndexPrice",
			Handler:    _Query_IndexPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "umee/metoken/v1/query.proto",
}

func (m *QueryParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryIndexes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIndexes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIndexes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetokenDenom) > 0 {
		i -= len(m.MetokenDenom)
		copy(dAtA[i:], m.MetokenDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MetokenDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIndexesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIndexesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIndexesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Registry) > 0 {
		for iNdEx := len(m.Registry) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Registry[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySwapFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySwapFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySwapFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetokenDenom) > 0 {
		i -= len(m.MetokenDenom)
		copy(dAtA[i:], m.MetokenDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MetokenDenom)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySwapFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySwapFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySwapFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRedeemFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedeemFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedeemFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetDenom) > 0 {
		i -= len(m.AssetDenom)
		copy(dAtA[i:], m.AssetDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetDenom)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Metoken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRedeemFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedeemFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedeemFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryIndexBalances) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIndexBalances) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIndexBalances) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetokenDenom) > 0 {
		i -= len(m.MetokenDenom)
		copy(dAtA[i:], m.MetokenDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MetokenDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIndexBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIndexBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIndexBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IndexBalances) > 0 {
		for iNdEx := len(m.IndexBalances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IndexBalances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIndexPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIndexPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIndexPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetokenDenom) > 0 {
		i -= len(m.MetokenDenom)
		copy(dAtA[i:], m.MetokenDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MetokenDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIndexPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIndexPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIndexPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prices) > 0 {
		for iNdEx := len(m.Prices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryIndexes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetokenDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIndexesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Registry) > 0 {
		for _, e := range m.Registry {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySwapFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Asset.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.MetokenDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySwapFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Asset.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRedeemFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metoken.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.AssetDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRedeemFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Asset.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryIndexBalances) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetokenDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIndexBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IndexBalances) > 0 {
		for _, e := range m.IndexBalances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryIndexPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetokenDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIndexPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Prices) > 0 {
		for _, e := range m.Prices {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIndexes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIndexes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIndexes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIndexesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIndexesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIndexesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registry = append(m.Registry, Index{})
			if err := m.Registry[len(m.Registry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySwapFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySwapFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySwapFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySwapFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySwapFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySwapFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedeemFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedeemFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedeemFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metoken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metoken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedeemFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedeemFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedeemFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIndexBalances) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIndexBalances: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIndexBalances: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIndexBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIndexBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIndexBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexBalances = append(m.IndexBalances, IndexBalances{})
			if err := m.IndexBalances[len(m.IndexBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIndexPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIndexPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIndexPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIndexPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIndexPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIndexPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prices = append(m.Prices, Price{})
			if err := m.Prices[len(m.Prices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
