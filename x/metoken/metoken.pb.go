// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/metoken/v1/metoken.proto

package metoken

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the metoken module.
type Params struct {
	// Reserves Re-balancing Frequency in seconds, determines how often the re-balancing of the module reserves will be
	// triggered
	RebalancingFrequency int64 `protobuf:"varint,1,opt,name=rebalancing_frequency,json=rebalancingFrequency,proto3" json:"rebalancing_frequency,omitempty"`
	// Interest claiming frequency in seconds, determines how often metoken module will claim accrued interest from
	// leverage module
	ClaimingFrequency int64 `protobuf:"varint,2,opt,name=claiming_frequency,json=claimingFrequency,proto3" json:"claiming_frequency,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_dda977db8ad52437, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetRebalancingFrequency() int64 {
	if m != nil {
		return m.RebalancingFrequency
	}
	return 0
}

func (m *Params) GetClaimingFrequency() int64 {
	if m != nil {
		return m.ClaimingFrequency
	}
	return 0
}

// Index defines an index of assets that are allowed to swap and redeem for the Index's meToken,
// along with its metadata and parameters.
type Index struct {
	// Denom is the denomination of the Index's meToken denom that will be given to user in exchange of accepted
	// assets.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// MaxSupply is the maximum amount of Index's meTokens can be minted.
	// A swap that requires to mint more Index's meToken than this value will result in an error.
	// Must be a non negative value. 0 means that there is no limit.
	MaxSupply cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=max_supply,json=maxSupply,proto3,customtype=cosmossdk.io/math.Int" json:"max_supply"`
	// Exponent is the power of ten by which to multiply, in order to convert
	// an amount of the meToken for the exchange operations.
	// Valid value: must be the same as the oracle.Denom.exponent.
	Exponent uint32 `protobuf:"varint,3,opt,name=exponent,proto3" json:"exponent,omitempty"`
	// Fee contains fee parameters used for swap and redemption fee calculations for all underlying
	// assets in this index.
	Fee Fee `protobuf:"bytes,4,opt,name=fee,proto3" json:"fee"`
	// Accepted Assets is the list of underlying Tokens that can be swapped and redeemed for the Index's meToken,
	// along with their token-specific parameters.
	AcceptedAssets []AcceptedAsset `protobuf:"bytes,5,rep,name=accepted_assets,json=acceptedAssets,proto3" json:"accepted_assets"`
}

func (m *Index) Reset()         { *m = Index{} }
func (m *Index) String() string { return proto.CompactTextString(m) }
func (*Index) ProtoMessage()    {}
func (*Index) Descriptor() ([]byte, []int) {
	return fileDescriptor_dda977db8ad52437, []int{1}
}
func (m *Index) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Index) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Index.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Index) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Index.Merge(m, src)
}
func (m *Index) XXX_Size() int {
	return m.Size()
}
func (m *Index) XXX_DiscardUnknown() {
	xxx_messageInfo_Index.DiscardUnknown(m)
}

var xxx_messageInfo_Index proto.InternalMessageInfo

func (m *Index) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Index) GetExponent() uint32 {
	if m != nil {
		return m.Exponent
	}
	return 0
}

func (m *Index) GetFee() Fee {
	if m != nil {
		return m.Fee
	}
	return Fee{}
}

func (m *Index) GetAcceptedAssets() []AcceptedAsset {
	if m != nil {
		return m.AcceptedAssets
	}
	return nil
}

// Fee are the parameters used for the calculation of the fee to be applied for swaps and redemptions and charged to
// the user. The usage of these parameters is explained here:
// https://github.com/umee-network/umee/tree/main/x/metoken#dynamic-fee
type Fee struct {
	// Min fee is the minimum fee to be charged to the user. The applied fee will tend to decrease down to this value,
	// when the accepted asset is undersupplied in the index. It must be less than Balanced and Max fees.
	// Valid values: 0-1.
	MinFee github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=min_fee,json=minFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_fee"`
	// Balanced fee is the fee to be charged to the user when the index is balanced. It must be greater than min_fee and
	// lower than max_fee
	// Valid values: 0-1.
	BalancedFee github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=balanced_fee,json=balancedFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"balanced_fee"`
	// Max fee is the maximum fee to be charged to the user. The applied fee will tend to increase up to this value,
	// when the accepted asset is oversupplied in the index. It must be greater than Min and Balanced fee.
	// Valid values: 0-1.
	MaxFee github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=max_fee,json=maxFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_fee"`
}

func (m *Fee) Reset()         { *m = Fee{} }
func (m *Fee) String() string { return proto.CompactTextString(m) }
func (*Fee) ProtoMessage()    {}
func (*Fee) Descriptor() ([]byte, []int) {
	return fileDescriptor_dda977db8ad52437, []int{2}
}
func (m *Fee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fee.Merge(m, src)
}
func (m *Fee) XXX_Size() int {
	return m.Size()
}
func (m *Fee) XXX_DiscardUnknown() {
	xxx_messageInfo_Fee.DiscardUnknown(m)
}

var xxx_messageInfo_Fee proto.InternalMessageInfo

// AcceptedAsset is an asset that is accepted to participate in the Index's swaps and redemptions, along with its
// metadata and parameters
type AcceptedAsset struct {
	// Denom is the denomination of the underlying asset. Must be the base
	// denom as registered in the Bank module (so IBC denom for IBC tokens).
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// Reserve portion is the portion of swapped assets that will be kept in the metoken module as reserves,
	// instead of supplied to the leverage module. It is also the
	// portion that will be taken from metoken module reserves when a redemption occurs.
	// Valid values: 0-1.
	ReservePortion github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=reserve_portion,json=reservePortion,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reserve_portion"`
	// Target allocation is the portion of an accepted asset the Index is targeting to have. The sum of
	// target allocations of every accepted asset in the Index should be equal to 1.
	// Valid values: 0-1.
	TargetAllocation github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=target_allocation,json=targetAllocation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"target_allocation"`
}

func (m *AcceptedAsset) Reset()         { *m = AcceptedAsset{} }
func (m *AcceptedAsset) String() string { return proto.CompactTextString(m) }
func (*AcceptedAsset) ProtoMessage()    {}
func (*AcceptedAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_dda977db8ad52437, []int{3}
}
func (m *AcceptedAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcceptedAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptedAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcceptedAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptedAsset.Merge(m, src)
}
func (m *AcceptedAsset) XXX_Size() int {
	return m.Size()
}
func (m *AcceptedAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptedAsset.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptedAsset proto.InternalMessageInfo

func (m *AcceptedAsset) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// Price is used to inform meToken price and exponent.
type Price struct {
	// meToken denomination.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// Price in USD of one unit of meToken, expressed in decimals.
	Price github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
	// Exponent is the power of ten by which to multiply, in order to convert
	// an amount of the meToken for the exchange operations.
	Exponent uint32 `protobuf:"varint,3,opt,name=exponent,proto3" json:"exponent,omitempty"`
}

func (m *Price) Reset()         { *m = Price{} }
func (m *Price) String() string { return proto.CompactTextString(m) }
func (*Price) ProtoMessage()    {}
func (*Price) Descriptor() ([]byte, []int) {
	return fileDescriptor_dda977db8ad52437, []int{4}
}
func (m *Price) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Price) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Price.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Price) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Price.Merge(m, src)
}
func (m *Price) XXX_Size() int {
	return m.Size()
}
func (m *Price) XXX_DiscardUnknown() {
	xxx_messageInfo_Price.DiscardUnknown(m)
}

var xxx_messageInfo_Price proto.InternalMessageInfo

func (m *Price) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Price) GetExponent() uint32 {
	if m != nil {
		return m.Exponent
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "umeenetwork.umee.metoken.v1.Params")
	proto.RegisterType((*Index)(nil), "umeenetwork.umee.metoken.v1.Index")
	proto.RegisterType((*Fee)(nil), "umeenetwork.umee.metoken.v1.Fee")
	proto.RegisterType((*AcceptedAsset)(nil), "umeenetwork.umee.metoken.v1.AcceptedAsset")
	proto.RegisterType((*Price)(nil), "umeenetwork.umee.metoken.v1.Price")
}

func init() { proto.RegisterFile("umee/metoken/v1/metoken.proto", fileDescriptor_dda977db8ad52437) }

var fileDescriptor_dda977db8ad52437 = []byte{
	// 540 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4f, 0x6f, 0x12, 0x41,
	0x18, 0xc6, 0x19, 0x16, 0x50, 0x06, 0xdb, 0xda, 0x09, 0x4d, 0x48, 0x4d, 0x17, 0xd2, 0x83, 0x41,
	0x13, 0x76, 0xd3, 0x36, 0x26, 0xc6, 0x78, 0x01, 0x1b, 0x4c, 0x6f, 0xb8, 0x1e, 0x8c, 0x7a, 0xd8,
	0x0c, 0xbb, 0x6f, 0xe9, 0x06, 0x66, 0x66, 0x9d, 0x19, 0x70, 0xfb, 0x01, 0xbc, 0x1b, 0x3f, 0x81,
	0x1f, 0xa7, 0xc7, 0x1e, 0x8d, 0x87, 0x46, 0xe1, 0xe2, 0xd1, 0x8f, 0xd0, 0xec, 0x3f, 0x42, 0x0f,
	0xe5, 0xc0, 0x89, 0x19, 0x9e, 0x79, 0x7e, 0xf3, 0x3e, 0xef, 0xbe, 0x19, 0x7c, 0x30, 0x65, 0x00,
	0x36, 0x03, 0x2d, 0xc6, 0xc0, 0xed, 0xd9, 0x51, 0xbe, 0xb4, 0x42, 0x29, 0xb4, 0x20, 0x4f, 0x62,
	0x99, 0x83, 0xfe, 0x2a, 0xe4, 0xd8, 0x8a, 0xd7, 0x56, 0xae, 0xcf, 0x8e, 0xf6, 0xeb, 0x23, 0x31,
	0x12, 0xc9, 0x39, 0x3b, 0x5e, 0xa5, 0x96, 0x43, 0x89, 0x2b, 0x03, 0x2a, 0x29, 0x53, 0xe4, 0x04,
	0xef, 0x49, 0x18, 0xd2, 0x09, 0xe5, 0x5e, 0xc0, 0x47, 0xee, 0xb9, 0x84, 0x2f, 0x53, 0xe0, 0xde,
	0x65, 0x03, 0xb5, 0x50, 0xdb, 0x70, 0xea, 0x2b, 0x62, 0x3f, 0xd7, 0x48, 0x07, 0x13, 0x6f, 0x42,
	0x03, 0x76, 0xd7, 0x51, 0x4c, 0x1c, 0xbb, 0xb9, 0xb2, 0x3c, 0xfe, 0xaa, 0xf4, 0xef, 0x67, 0x13,
	0x1d, 0xfe, 0x28, 0xe2, 0xf2, 0x19, 0xf7, 0x21, 0x22, 0x75, 0x5c, 0xf6, 0x81, 0x0b, 0x96, 0xdc,
	0x51, 0x75, 0xd2, 0x0d, 0x79, 0x8d, 0x31, 0xa3, 0x91, 0xab, 0xa6, 0x61, 0x38, 0x49, 0x61, 0xd5,
	0xde, 0xc1, 0xd5, 0x4d, 0xb3, 0xf0, 0xfb, 0xa6, 0xb9, 0xe7, 0x09, 0xc5, 0x84, 0x52, 0xfe, 0xd8,
	0x0a, 0x84, 0xcd, 0xa8, 0xbe, 0xb0, 0xce, 0xb8, 0x76, 0xaa, 0x8c, 0x46, 0xef, 0x93, 0xf3, 0x64,
	0x1f, 0x3f, 0x84, 0x28, 0x14, 0x1c, 0xb8, 0x6e, 0x18, 0x2d, 0xd4, 0xde, 0x72, 0x96, 0x7b, 0xf2,
	0x12, 0x1b, 0xe7, 0x00, 0x8d, 0x52, 0x0b, 0xb5, 0x6b, 0xc7, 0x2d, 0x6b, 0x4d, 0xbb, 0xac, 0x3e,
	0x40, 0xaf, 0x14, 0x5f, 0xea, 0xc4, 0x16, 0xf2, 0x11, 0xef, 0x50, 0xcf, 0x83, 0x50, 0x83, 0xef,
	0x52, 0xa5, 0x40, 0xab, 0x46, 0xb9, 0x65, 0xb4, 0x6b, 0xc7, 0xcf, 0xd7, 0x52, 0xba, 0x99, 0xa7,
	0x1b, 0x5b, 0x32, 0xde, 0x36, 0x5d, 0xfd, 0x53, 0x65, 0x4d, 0xf9, 0x8f, 0xb0, 0xd1, 0x07, 0x20,
	0x6f, 0xf1, 0x03, 0x16, 0x70, 0x37, 0x2e, 0x33, 0x69, 0x4a, 0xcf, 0xca, 0x92, 0x3f, 0x1d, 0x05,
	0xfa, 0x62, 0x3a, 0xb4, 0x3c, 0xc1, 0xec, 0xb4, 0x09, 0xd9, 0x4f, 0x47, 0xf9, 0x63, 0x5b, 0x5f,
	0x86, 0xa0, 0xac, 0x53, 0xf0, 0x9c, 0x0a, 0x0b, 0x78, 0x0c, 0x7a, 0x87, 0x1f, 0xa5, 0x1f, 0x0c,
	0xfc, 0x84, 0x56, 0xdc, 0x88, 0x56, 0xcb, 0x19, 0x79, 0x6d, 0x34, 0x4a, 0x68, 0xc6, 0x86, 0xb5,
	0xd1, 0xa8, 0x0f, 0x90, 0x45, 0xfe, 0x8b, 0xf0, 0xd6, 0x9d, 0x06, 0xdd, 0x33, 0x0f, 0x1f, 0xf0,
	0x8e, 0x04, 0x05, 0x72, 0x06, 0x6e, 0x28, 0xa4, 0x0e, 0x04, 0xdf, 0x30, 0xcc, 0x76, 0x86, 0x19,
	0xa4, 0x14, 0xf2, 0x19, 0xef, 0x6a, 0x2a, 0x47, 0xa0, 0x5d, 0x3a, 0x99, 0x08, 0x8f, 0x26, 0xe8,
	0xcd, 0x92, 0x3d, 0x4e, 0x41, 0xdd, 0x25, 0x27, 0xcb, 0xf8, 0x0d, 0xe1, 0xf2, 0x40, 0x06, 0x1e,
	0xdc, 0x93, 0xed, 0x14, 0x97, 0xc3, 0x58, 0xde, 0x30, 0x51, 0x6a, 0x5e, 0x37, 0xf3, 0x69, 0x1d,
	0xbd, 0x37, 0x57, 0x73, 0x13, 0x5d, 0xcf, 0x4d, 0xf4, 0x67, 0x6e, 0xa2, 0xef, 0x0b, 0xb3, 0x70,
	0xbd, 0x30, 0x0b, 0xbf, 0x16, 0x66, 0xe1, 0xd3, 0xb3, 0x95, 0xab, 0xe2, 0xf1, 0xed, 0x64, 0xb3,
	0x9c, 0x6c, 0xec, 0xd9, 0x0b, 0x3b, 0xca, 0x5f, 0x99, 0x61, 0x25, 0x79, 0x33, 0x4e, 0x6e, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x2e, 0xd5, 0x79, 0x3a, 0x87, 0x04, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RebalancingFrequency != that1.RebalancingFrequency {
		return false
	}
	if this.ClaimingFrequency != that1.ClaimingFrequency {
		return false
	}
	return true
}
func (this *Index) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Index)
	if !ok {
		that2, ok := that.(Index)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if !this.MaxSupply.Equal(that1.MaxSupply) {
		return false
	}
	if this.Exponent != that1.Exponent {
		return false
	}
	if !this.Fee.Equal(&that1.Fee) {
		return false
	}
	if len(this.AcceptedAssets) != len(that1.AcceptedAssets) {
		return false
	}
	for i := range this.AcceptedAssets {
		if !this.AcceptedAssets[i].Equal(&that1.AcceptedAssets[i]) {
			return false
		}
	}
	return true
}
func (this *Fee) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Fee)
	if !ok {
		that2, ok := that.(Fee)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MinFee.Equal(that1.MinFee) {
		return false
	}
	if !this.BalancedFee.Equal(that1.BalancedFee) {
		return false
	}
	if !this.MaxFee.Equal(that1.MaxFee) {
		return false
	}
	return true
}
func (this *AcceptedAsset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AcceptedAsset)
	if !ok {
		that2, ok := that.(AcceptedAsset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if !this.ReservePortion.Equal(that1.ReservePortion) {
		return false
	}
	if !this.TargetAllocation.Equal(that1.TargetAllocation) {
		return false
	}
	return true
}
func (this *Price) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Price)
	if !ok {
		that2, ok := that.(Price)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if !this.Price.Equal(that1.Price) {
		return false
	}
	if this.Exponent != that1.Exponent {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimingFrequency != 0 {
		i = encodeVarintMetoken(dAtA, i, uint64(m.ClaimingFrequency))
		i--
		dAtA[i] = 0x10
	}
	if m.RebalancingFrequency != 0 {
		i = encodeVarintMetoken(dAtA, i, uint64(m.RebalancingFrequency))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Index) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Index) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Index) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AcceptedAssets) > 0 {
		for iNdEx := len(m.AcceptedAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AcceptedAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetoken(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetoken(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Exponent != 0 {
		i = encodeVarintMetoken(dAtA, i, uint64(m.Exponent))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.MaxSupply.Size()
		i -= size
		if _, err := m.MaxSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetoken(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMetoken(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Fee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxFee.Size()
		i -= size
		if _, err := m.MaxFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetoken(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.BalancedFee.Size()
		i -= size
		if _, err := m.BalancedFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetoken(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.MinFee.Size()
		i -= size
		if _, err := m.MinFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetoken(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AcceptedAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptedAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcceptedAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TargetAllocation.Size()
		i -= size
		if _, err := m.TargetAllocation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetoken(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ReservePortion.Size()
		i -= size
		if _, err := m.ReservePortion.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetoken(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMetoken(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Price) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Price) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Price) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exponent != 0 {
		i = encodeVarintMetoken(dAtA, i, uint64(m.Exponent))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetoken(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMetoken(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetoken(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetoken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RebalancingFrequency != 0 {
		n += 1 + sovMetoken(uint64(m.RebalancingFrequency))
	}
	if m.ClaimingFrequency != 0 {
		n += 1 + sovMetoken(uint64(m.ClaimingFrequency))
	}
	return n
}

func (m *Index) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMetoken(uint64(l))
	}
	l = m.MaxSupply.Size()
	n += 1 + l + sovMetoken(uint64(l))
	if m.Exponent != 0 {
		n += 1 + sovMetoken(uint64(m.Exponent))
	}
	l = m.Fee.Size()
	n += 1 + l + sovMetoken(uint64(l))
	if len(m.AcceptedAssets) > 0 {
		for _, e := range m.AcceptedAssets {
			l = e.Size()
			n += 1 + l + sovMetoken(uint64(l))
		}
	}
	return n
}

func (m *Fee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MinFee.Size()
	n += 1 + l + sovMetoken(uint64(l))
	l = m.BalancedFee.Size()
	n += 1 + l + sovMetoken(uint64(l))
	l = m.MaxFee.Size()
	n += 1 + l + sovMetoken(uint64(l))
	return n
}

func (m *AcceptedAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMetoken(uint64(l))
	}
	l = m.ReservePortion.Size()
	n += 1 + l + sovMetoken(uint64(l))
	l = m.TargetAllocation.Size()
	n += 1 + l + sovMetoken(uint64(l))
	return n
}

func (m *Price) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMetoken(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovMetoken(uint64(l))
	if m.Exponent != 0 {
		n += 1 + sovMetoken(uint64(m.Exponent))
	}
	return n
}

func sovMetoken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetoken(x uint64) (n int) {
	return sovMetoken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetoken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebalancingFrequency", wireType)
			}
			m.RebalancingFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RebalancingFrequency |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimingFrequency", wireType)
			}
			m.ClaimingFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimingFrequency |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetoken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetoken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Index) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetoken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Index: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Index: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetoken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetoken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetoken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetoken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exponent", wireType)
			}
			m.Exponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exponent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetoken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetoken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetoken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetoken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedAssets = append(m.AcceptedAssets, AcceptedAsset{})
			if err := m.AcceptedAssets[len(m.AcceptedAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetoken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetoken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetoken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetoken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetoken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalancedFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetoken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetoken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BalancedFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetoken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetoken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetoken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetoken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptedAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetoken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptedAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptedAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetoken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetoken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservePortion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetoken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetoken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReservePortion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAllocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetoken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetoken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetAllocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetoken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetoken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Price) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetoken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Price: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Price: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetoken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetoken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetoken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetoken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exponent", wireType)
			}
			m.Exponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exponent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetoken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetoken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetoken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetoken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetoken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetoken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetoken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetoken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetoken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetoken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetoken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetoken = fmt.Errorf("proto: unexpected end of group")
)
