// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/historacle/v1/historacle.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/umee-network/umee/v3/x/oracle/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the historacle module.
type Params struct {
	StampPeriod uint64 `protobuf:"varint,1,opt,name=stamp_period,json=stampPeriod,proto3" json:"stamp_period,omitempty"`
	PrunePeriod uint64 `protobuf:"varint,2,opt,name=prune_period,json=prunePeriod,proto3" json:"prune_period,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_586677562f8011f9, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// HistoricPrice is an instance of a price "stamp"
type HistoricPrice struct {
	ExchangeRates types.ExchangeRateTuple `protobuf:"bytes,1,opt,name=exchange_rates,json=exchangeRates,proto3,castrepeated=ExchangeRateTuples" json:"exchange_rates"`
	BlockNum      uint64                  `protobuf:"varint,2,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
}

func (m *HistoricPrice) Reset()         { *m = HistoricPrice{} }
func (m *HistoricPrice) String() string { return proto.CompactTextString(m) }
func (*HistoricPrice) ProtoMessage()    {}
func (*HistoricPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_586677562f8011f9, []int{1}
}
func (m *HistoricPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoricPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoricPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoricPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricPrice.Merge(m, src)
}
func (m *HistoricPrice) XXX_Size() int {
	return m.Size()
}
func (m *HistoricPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricPrice.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricPrice proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "umee.historacle.v1.Params")
	proto.RegisterType((*HistoricPrice)(nil), "umee.historacle.v1.HistoricPrice")
}

func init() {
	proto.RegisterFile("umee/historacle/v1/historacle.proto", fileDescriptor_586677562f8011f9)
}

var fileDescriptor_586677562f8011f9 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x3f, 0x4f, 0xf3, 0x30,
	0x10, 0x87, 0xe3, 0x57, 0xaf, 0xaa, 0x92, 0x52, 0x86, 0x88, 0x01, 0xb5, 0x92, 0x43, 0xcb, 0xc2,
	0x42, 0xac, 0xb6, 0x1b, 0x63, 0x25, 0x24, 0x26, 0x14, 0x55, 0x0c, 0x88, 0xa5, 0x72, 0xdc, 0x53,
	0x1a, 0xb5, 0xce, 0x45, 0xb6, 0x53, 0xca, 0xb7, 0x40, 0x4c, 0x8c, 0x9d, 0xf9, 0x24, 0x1d, 0x3b,
	0x32, 0xf1, 0xa7, 0x5d, 0xf8, 0x18, 0x28, 0x6e, 0x81, 0x48, 0x6c, 0xbe, 0xe7, 0x1e, 0xf9, 0x77,
	0x67, 0xbb, 0x27, 0xb9, 0x04, 0x60, 0xe3, 0x44, 0x1b, 0x54, 0x5c, 0x4c, 0x81, 0xcd, 0x3a, 0xa5,
	0x2a, 0xc8, 0x14, 0x1a, 0xf4, 0xbc, 0x42, 0x0a, 0x4a, 0x78, 0xd6, 0x69, 0x1c, 0xc6, 0x18, 0xa3,
	0x6d, 0xb3, 0xe2, 0xb4, 0x35, 0x1b, 0x54, 0xa0, 0x96, 0xa8, 0x59, 0xc4, 0x75, 0x71, 0x55, 0x04,
	0x86, 0x77, 0x98, 0xc0, 0x24, 0xdd, 0xf5, 0x9b, 0x36, 0xee, 0x37, 0xaa, 0x1c, 0xd3, 0xbe, 0x71,
	0x2b, 0x21, 0x57, 0x5c, 0x6a, 0xaf, 0xe5, 0xee, 0x6b, 0xc3, 0x65, 0x36, 0xcc, 0x40, 0x25, 0x38,
	0x3a, 0x22, 0xc7, 0xe4, 0xf4, 0xff, 0xa0, 0x66, 0x59, 0x68, 0x51, 0xa1, 0x64, 0x2a, 0x4f, 0xe1,
	0x5b, 0xf9, 0xb7, 0x55, 0x2c, 0xdb, 0x2a, 0xe7, 0xd5, 0xa7, 0x85, 0xef, 0x7c, 0x2e, 0x7c, 0xd2,
	0x7e, 0x24, 0x6e, 0xfd, 0xd2, 0x8e, 0x9f, 0x88, 0x50, 0x25, 0x02, 0xbc, 0x91, 0x7b, 0x00, 0x73,
	0x31, 0xe6, 0x69, 0x0c, 0x43, 0xc5, 0x0d, 0x68, 0x9b, 0x51, 0xeb, 0xb6, 0x02, 0xbb, 0xeb, 0xcf,
	0x9e, 0xc1, 0xc5, 0xce, 0x1a, 0x70, 0x03, 0xd7, 0x79, 0x36, 0x85, 0x7e, 0x63, 0xf9, 0xea, 0x3b,
	0xcf, 0x6f, 0xbe, 0xf7, 0xa7, 0xa5, 0x07, 0x75, 0x28, 0x31, 0xed, 0x35, 0xdd, 0xbd, 0x68, 0x8a,
	0x62, 0x32, 0x4c, 0x73, 0xb9, 0x9b, 0xb0, 0x6a, 0xc1, 0x55, 0x2e, 0xfb, 0xe1, 0xf2, 0x83, 0x3a,
	0xcb, 0x35, 0x25, 0xab, 0x35, 0x25, 0xef, 0x6b, 0x4a, 0x1e, 0x36, 0xd4, 0x59, 0x6d, 0xa8, 0xf3,
	0xb2, 0xa1, 0xce, 0x6d, 0x37, 0x4e, 0xcc, 0x38, 0x8f, 0x02, 0x81, 0x92, 0x15, 0x23, 0x9d, 0xa5,
	0x60, 0xee, 0x50, 0x4d, 0x6c, 0xc1, 0x66, 0x3d, 0x36, 0x2f, 0xff, 0x9a, 0xb9, 0xcf, 0x40, 0x47,
	0x15, 0xfb, 0x8e, 0xbd, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x89, 0x7e, 0x47, 0x45, 0xd5, 0x01,
	0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StampPeriod != that1.StampPeriod {
		return false
	}
	if this.PrunePeriod != that1.PrunePeriod {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrunePeriod != 0 {
		i = encodeVarintHistoracle(dAtA, i, uint64(m.PrunePeriod))
		i--
		dAtA[i] = 0x10
	}
	if m.StampPeriod != 0 {
		i = encodeVarintHistoracle(dAtA, i, uint64(m.StampPeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HistoricPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoricPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoricPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNum != 0 {
		i = encodeVarintHistoracle(dAtA, i, uint64(m.BlockNum))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ExchangeRates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHistoracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintHistoracle(dAtA []byte, offset int, v uint64) int {
	offset -= sovHistoracle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StampPeriod != 0 {
		n += 1 + sovHistoracle(uint64(m.StampPeriod))
	}
	if m.PrunePeriod != 0 {
		n += 1 + sovHistoracle(uint64(m.PrunePeriod))
	}
	return n
}

func (m *HistoricPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExchangeRates.Size()
	n += 1 + l + sovHistoracle(uint64(l))
	if m.BlockNum != 0 {
		n += 1 + sovHistoracle(uint64(m.BlockNum))
	}
	return n
}

func sovHistoracle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHistoracle(x uint64) (n int) {
	return sovHistoracle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistoracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StampPeriod", wireType)
			}
			m.StampPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StampPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrunePeriod", wireType)
			}
			m.PrunePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrunePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHistoracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistoracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoricPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistoracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoricPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoricPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistoracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistoracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangeRates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNum", wireType)
			}
			m.BlockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHistoracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistoracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHistoracle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHistoracle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHistoracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHistoracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHistoracle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHistoracle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHistoracle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHistoracle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHistoracle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHistoracle = fmt.Errorf("proto: unexpected end of group")
)
