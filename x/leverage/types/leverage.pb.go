// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/leverage/v1/leverage.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the leverage module.
type Params struct {
	// Complete Liquidation Threshold determines how far over their borrow
	// limit a borrower must be in order for their positions to be liquidated
	// fully in a single event.
	CompleteLiquidationThreshold github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=complete_liquidation_threshold,json=completeLiquidationThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"complete_liquidation_threshold" yaml:"complete_liquidation_threshold"`
	// Minimum Close Factor determines the portion of a borrower's position
	// that can be liquidated in a single event, when the borrower is just barely
	// over their borrow limit.
	MinimumCloseFactor github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=minimum_close_factor,json=minimumCloseFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"minimum_close_factor" yaml:"minimum_close_factor"`
	// Oracle Reward Factor determines the portion of interest accrued on
	// borrows that is sent to the oracle module to fund its reward pool.
	OracleRewardFactor github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=oracle_reward_factor,json=oracleRewardFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"oracle_reward_factor" yaml:"oracle_reward_factor"`
	// Small Liquidation Size determines the USD value at which a borrow is
	// considered small enough to be liquidated in a single transaction, bypassing
	// dynamic close factor.
	SmallLiquidationSize github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=small_liquidation_size,json=smallLiquidationSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"small_liquidation_size" yaml:"small_liquidation_size"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cb1bf9ea641ecc6, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// Token defines a token, along with its metadata and parameters, in the Umee
// capital facility that can be supplied and borrowed.
type Token struct {
	// Base Denom is the denomination of the underlying base token.
	BaseDenom string `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty" yaml:"base_denom"`
	// Reserve Factor defines what portion of accrued interest goes to reserves
	// when this token is borrowed.
	ReserveFactor github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=reserve_factor,json=reserveFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reserve_factor" yaml:"reserve_factor"`
	// Collateral Weight defines what portion of the total value of the asset
	// can contribute to a users borrowing power. If the collateral weight is
	// zero, using this asset as collateral against borrowing will be disabled.
	CollateralWeight github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=collateral_weight,json=collateralWeight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"collateral_weight" yaml:"collateral_weight"`
	// Liquidation Threshold defines what amount of the total value of the
	// asset can contribute to a user's liquidation threshold (above which they
	// become eligible for liquidation).
	LiquidationThreshold github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=liquidation_threshold,json=liquidationThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_threshold" yaml:"liquidation_threshold"`
	// Base Borrow Rate defines the minimum interest rate for borrowing this
	// asset.
	BaseBorrowRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=base_borrow_rate,json=baseBorrowRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"base_borrow_rate" yaml:"base_borrow_rate"`
	// Kink Borrow Rate defines the interest rate for borrowing this
	// asset when supply utilization is equal to 'kink_utilization'.
	KinkBorrowRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=kink_borrow_rate,json=kinkBorrowRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"kink_borrow_rate" yaml:"kink_borrow_rate"`
	// Max Borrow Rate defines the interest rate for borrowing this
	// asset when supply utilization is at its maximum.
	MaxBorrowRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=max_borrow_rate,json=maxBorrowRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_borrow_rate" yaml:"max_borrow_rate"`
	// Kink Utilization defines the supply utilization value where
	// the kink in the borrow interest rate function occurs.
	KinkUtilization github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=kink_utilization,json=kinkUtilization,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"kink_utilization" yaml:"kink_utilization"`
	// Liquidation Incentive determines the portion of bonus collateral of
	// a token type liquidators receive as a liquidation reward.
	LiquidationIncentive github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=liquidation_incentive,json=liquidationIncentive,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_incentive" yaml:"liquidation_incentive"`
	// Symbol Denom is the human readable denomination of this token.
	SymbolDenom string `protobuf:"bytes,10,opt,name=symbol_denom,json=symbolDenom,proto3" json:"symbol_denom,omitempty" yaml:"symbol_denom"`
	// Exponent is the power of ten by which to multiply, in order to convert
	// an amount of the token denoted in its symbol denom to the actual amount
	// of its base denom.
	Exponent uint32 `protobuf:"varint,11,opt,name=exponent,proto3" json:"exponent,omitempty" yaml:"exponent"`
	// EnableMsgSupply allows supplying for lending or collateral using this
	// token. Note that withdrawing is always enabled. Disabling supplying would
	// be one step in phasing out an asset type.
	EnableMsgSupply bool `protobuf:"varint,12,opt,name=enable_msg_supply,json=enableMsgSupply,proto3" json:"enable_msg_supply,omitempty" yaml:"enable_msg_supply"`
	// EnableMsgBorrow allows borrowing of this token. Note that repaying is
	// always enabled. Disabling borrowing would be one step in phasing out an
	// asset type, but could also be used from the start for asset types meant
	// to be collateral only, like meTokens.
	EnableMsgBorrow bool `protobuf:"varint,13,opt,name=enable_msg_borrow,json=enableMsgBorrow,proto3" json:"enable_msg_borrow,omitempty" yaml:"enable_msg_borrow"`
	// Blacklist should only be used to eliminate an asset completely. A blacklisted
	// asset is treated as though its oracle price is zero, and thus ignored by
	// calculations such as collateral value and borrow limit. Can still be repaid
	// or withdrawn, but not liquidated. A blacklisted token must have enable_msg_supply
	// and enable_msg_borrow set to false. Such tokens can be safely removed from the
	// oracle and price feeder as well.
	Blacklist bool `protobuf:"varint,14,opt,name=blacklist,proto3" json:"blacklist,omitempty"`
	// Max Collateral Share specifies how much of the system's overall collateral
	// can be provided by a given token. 1.0 means that the token has no restriction.
	// 0.1 means maximum 10% of system's total collateral value can provided by this token.
	MaxCollateralShare github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,15,opt,name=max_collateral_share,json=maxCollateralShare,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_collateral_share" yaml:"max_collateral_share"`
	// Max Supply Utilization specifies the maximum supply utilization a token is
	// allowed to reach as a direct result of user borrowing. It can still be exceeded
	// due to withdrawals, interest, and liquidations.
	MaxSupplyUtilization github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,16,opt,name=max_supply_utilization,json=maxSupplyUtilization,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_supply_utilization" yaml:"max_supply_utilization"`
	// Min Collateral Liquidity specifies the minimum collateral liquidity a token is
	// allowed to reach as a direct result of users borrowing, collateralizing, or
	// withdrawing assets. Liquidity can only drop below this value due to interest
	// or liquidations.
	MinCollateralLiquidity github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,17,opt,name=min_collateral_liquidity,json=minCollateralLiquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_collateral_liquidity" yaml:"min_collateral_liquidity"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cb1bf9ea641ecc6, []int{1}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Token.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return m.Size()
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "umee.leverage.v1.Params")
	proto.RegisterType((*Token)(nil), "umee.leverage.v1.Token")
}

func init() { proto.RegisterFile("umee/leverage/v1/leverage.proto", fileDescriptor_8cb1bf9ea641ecc6) }

var fileDescriptor_8cb1bf9ea641ecc6 = []byte{
	// 845 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x6f, 0x1c, 0x35,
	0x1c, 0xdd, 0x81, 0x34, 0x24, 0x6e, 0x37, 0x9b, 0x4c, 0x37, 0xe9, 0x08, 0xc2, 0x4e, 0x64, 0x09,
	0x94, 0x4b, 0x33, 0x14, 0x38, 0xe5, 0xb8, 0xad, 0xa0, 0x45, 0x6d, 0x01, 0xa7, 0xa8, 0x12, 0x97,
	0x91, 0x77, 0xd6, 0xec, 0x5a, 0x6b, 0x8f, 0x17, 0xdb, 0xfb, 0x2f, 0x17, 0x0e, 0x88, 0x13, 0x17,
	0x8e, 0x5c, 0x90, 0xfa, 0x31, 0x38, 0x72, 0xcc, 0xb1, 0x47, 0xc4, 0x61, 0x05, 0xc9, 0x85, 0x73,
	0x3e, 0x01, 0x1a, 0x7b, 0xfe, 0x6d, 0x3a, 0x54, 0x1a, 0xa5, 0xa7, 0x9d, 0x79, 0x3f, 0xef, 0x7b,
	0x6f, 0xec, 0x67, 0xff, 0x0c, 0xfc, 0x09, 0x27, 0x24, 0x60, 0x64, 0x4a, 0x24, 0x1e, 0x90, 0x60,
	0x7a, 0x2f, 0x7f, 0x3e, 0x1a, 0x4b, 0xa1, 0x85, 0xbb, 0x9d, 0x0c, 0x38, 0xca, 0xc1, 0xe9, 0xbd,
	0x77, 0xdb, 0x03, 0x31, 0x10, 0xa6, 0x18, 0x24, 0x4f, 0x76, 0x1c, 0xfc, 0x7d, 0x0d, 0xac, 0x7f,
	0x85, 0x25, 0xe6, 0xca, 0xfd, 0xcd, 0x01, 0x9d, 0x48, 0xf0, 0x31, 0x23, 0x9a, 0x84, 0x8c, 0x7e,
	0x3f, 0xa1, 0x7d, 0xac, 0xa9, 0x88, 0x43, 0x3d, 0x94, 0x44, 0x0d, 0x05, 0xeb, 0x7b, 0x6f, 0x1d,
	0x38, 0x87, 0x9b, 0xdd, 0xe7, 0x67, 0x4b, 0xbf, 0xf1, 0xd7, 0xd2, 0xff, 0x70, 0x40, 0xf5, 0x70,
	0xd2, 0x3b, 0x8a, 0x04, 0x0f, 0x22, 0xa1, 0xb8, 0x50, 0xe9, 0xcf, 0x5d, 0xd5, 0x1f, 0x05, 0x7a,
	0x31, 0x26, 0xea, 0xe8, 0x01, 0x89, 0x2e, 0x97, 0xfe, 0x07, 0x0b, 0xcc, 0xd9, 0x31, 0x7c, 0x3d,
	0x3b, 0x44, 0xfb, 0xd9, 0x80, 0xc7, 0x45, 0xfd, 0x59, 0x56, 0x76, 0x7f, 0x00, 0x6d, 0x4e, 0x63,
	0xca, 0x27, 0x3c, 0x8c, 0x98, 0x50, 0x24, 0xfc, 0x0e, 0x47, 0x5a, 0x48, 0xef, 0x6d, 0x63, 0xea,
	0x49, 0x6d, 0x53, 0xef, 0x59, 0x53, 0x55, 0x9c, 0x10, 0xb9, 0x29, 0x7c, 0x3f, 0x41, 0x3f, 0x33,
	0x60, 0x62, 0x40, 0x48, 0x1c, 0x31, 0x12, 0x4a, 0x32, 0xc3, 0xb2, 0x9f, 0x19, 0x58, 0xbb, 0x9e,
	0x81, 0x2a, 0x4e, 0x88, 0x5c, 0x0b, 0x23, 0x83, 0xa6, 0x06, 0x7e, 0x72, 0xc0, 0x9e, 0xe2, 0x98,
	0xb1, 0x95, 0x09, 0x54, 0xf4, 0x94, 0x78, 0x37, 0x8c, 0x87, 0x2f, 0x6b, 0x7b, 0x78, 0xdf, 0x7a,
	0xa8, 0x66, 0x85, 0xa8, 0x6d, 0x0a, 0xa5, 0xe5, 0x38, 0xa1, 0xa7, 0xe4, 0x78, 0xed, 0xd7, 0x17,
	0x7e, 0x03, 0xfe, 0xd1, 0x04, 0x37, 0x9e, 0x89, 0x11, 0x89, 0xdd, 0x4f, 0x01, 0xe8, 0x61, 0x45,
	0xc2, 0x3e, 0x89, 0x05, 0xf7, 0x1c, 0x63, 0x65, 0xf7, 0x72, 0xe9, 0xef, 0x58, 0xf2, 0xa2, 0x06,
	0xd1, 0x66, 0xf2, 0xf2, 0x20, 0x79, 0x76, 0x63, 0xb0, 0x25, 0x89, 0x22, 0x72, 0x9a, 0xaf, 0xa4,
	0x8d, 0xd7, 0xe7, 0xb5, 0x3f, 0x62, 0xd7, 0xea, 0xac, 0xb2, 0x41, 0xd4, 0x4c, 0x81, 0x74, 0xf6,
	0x66, 0x60, 0x27, 0x12, 0x8c, 0x61, 0x4d, 0x24, 0x66, 0xe1, 0x8c, 0xd0, 0xc1, 0x50, 0xa7, 0xe1,
	0xf9, 0xa2, 0xb6, 0xa4, 0x97, 0x25, 0xfa, 0x0a, 0x21, 0x44, 0xdb, 0x05, 0xf6, 0xdc, 0x40, 0xee,
	0x8f, 0x0e, 0xd8, 0xad, 0xde, 0x4f, 0x36, 0x39, 0x4f, 0x6b, 0xab, 0xef, 0x5b, 0xf5, 0xff, 0xd9,
	0x46, 0x6d, 0x56, 0xb5, 0x7d, 0x14, 0xd8, 0x36, 0x0b, 0xd1, 0x13, 0x52, 0x8a, 0x59, 0x28, 0xb1,
	0xce, 0x52, 0xf3, 0xa8, 0xb6, 0xfe, 0x9d, 0xd2, 0xc2, 0x96, 0xf8, 0x20, 0xda, 0x4a, 0xa0, 0xae,
	0x41, 0x10, 0xd6, 0x24, 0x11, 0x1d, 0xd1, 0x78, 0xb4, 0x22, 0xba, 0x7e, 0x3d, 0xd1, 0xab, 0x7c,
	0x10, 0x6d, 0x25, 0x50, 0x49, 0x74, 0x0c, 0x5a, 0x1c, 0xcf, 0x57, 0x34, 0xdf, 0x31, 0x9a, 0x0f,
	0x6b, 0x6b, 0xee, 0xa5, 0x67, 0xc4, 0x2a, 0x1d, 0x44, 0x4d, 0x8e, 0xe7, 0x25, 0x45, 0x9d, 0x7e,
	0xe6, 0x44, 0x53, 0x46, 0x4f, 0xcd, 0xc4, 0x7b, 0x1b, 0x6f, 0xe0, 0x33, 0x4b, 0x7c, 0x10, 0xb5,
	0x12, 0xe8, 0x9b, 0x02, 0x79, 0x25, 0x57, 0x34, 0x8e, 0x48, 0xac, 0xe9, 0x94, 0x78, 0x9b, 0x6f,
	0x2e, 0x57, 0x39, 0xe9, 0x6a, 0xae, 0x1e, 0x65, 0xb0, 0x7b, 0x0c, 0x6e, 0xa9, 0x05, 0xef, 0x09,
	0x96, 0x6e, 0x7f, 0x60, 0xb4, 0xef, 0x5c, 0x2e, 0xfd, 0xdb, 0xe9, 0xd9, 0x52, 0xaa, 0x42, 0x74,
	0xd3, 0xbe, 0xda, 0x23, 0x20, 0x00, 0x1b, 0x64, 0x3e, 0x16, 0x31, 0x89, 0xb5, 0x77, 0xf3, 0xc0,
	0x39, 0x6c, 0x76, 0x6f, 0x5f, 0x2e, 0xfd, 0x96, 0xfd, 0x5f, 0x56, 0x81, 0x28, 0x1f, 0xe4, 0x3e,
	0x04, 0x3b, 0x24, 0xc6, 0x3d, 0x46, 0x42, 0xae, 0x06, 0xa1, 0x9a, 0x8c, 0xc7, 0x6c, 0xe1, 0xdd,
	0x3a, 0x70, 0x0e, 0x37, 0xba, 0xfb, 0xc5, 0xae, 0x7c, 0x65, 0x08, 0x44, 0x2d, 0x8b, 0x3d, 0x51,
	0x83, 0x13, 0x83, 0x5c, 0x61, 0xb2, 0x8b, 0xeb, 0x35, 0x5f, 0xc3, 0x64, 0x87, 0x94, 0x99, 0x6c,
	0x00, 0xdc, 0x7d, 0xb0, 0xd9, 0x63, 0x38, 0x1a, 0x31, 0xaa, 0xb4, 0xb7, 0x95, 0x30, 0xa0, 0x02,
	0x30, 0x5d, 0x0b, 0xcf, 0xc3, 0xd2, 0x41, 0xa1, 0x86, 0x58, 0x12, 0xaf, 0x75, 0xcd, 0xae, 0x55,
	0xc1, 0x99, 0x74, 0x2d, 0x3c, 0xbf, 0x9f, 0xa3, 0x27, 0x09, 0x68, 0x9a, 0x46, 0x29, 0xbf, 0xe5,
	0x88, 0x6e, 0x5f, 0xaf, 0x69, 0x54, 0xb3, 0x42, 0xd4, 0xce, 0x37, 0x47, 0x39, 0xad, 0x3f, 0x3b,
	0xc0, 0xe3, 0x34, 0x2e, 0xbb, 0xb6, 0x79, 0xa2, 0x7a, 0xe1, 0xed, 0x18, 0x27, 0x5f, 0xd7, 0x76,
	0xe2, 0xe7, 0x3d, 0xbc, 0x92, 0x17, 0xa2, 0x3d, 0x4e, 0xe3, 0x62, 0x46, 0x1e, 0x67, 0x85, 0xe3,
	0xb5, 0x7f, 0x5f, 0xf8, 0x4e, 0xf7, 0xe9, 0xd9, 0x3f, 0x9d, 0xc6, 0xd9, 0x79, 0xc7, 0x79, 0x79,
	0xde, 0x71, 0xfe, 0x3e, 0xef, 0x38, 0xbf, 0x5c, 0x74, 0x1a, 0x2f, 0x2f, 0x3a, 0x8d, 0x3f, 0x2f,
	0x3a, 0x8d, 0x6f, 0x3f, 0x2a, 0xd9, 0x48, 0xae, 0x53, 0x77, 0x63, 0xa2, 0x67, 0x42, 0x8e, 0xcc,
	0x4b, 0x30, 0xfd, 0x38, 0x98, 0x17, 0x37, 0x30, 0x63, 0xaa, 0xb7, 0x6e, 0x2e, 0x55, 0x9f, 0xfc,
	0x17, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x2a, 0x49, 0xb5, 0x9f, 0x09, 0x00, 0x00,
}

func (this *Token) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Token)
	if !ok {
		that2, ok := that.(Token)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BaseDenom != that1.BaseDenom {
		return false
	}
	if !this.ReserveFactor.Equal(that1.ReserveFactor) {
		return false
	}
	if !this.CollateralWeight.Equal(that1.CollateralWeight) {
		return false
	}
	if !this.LiquidationThreshold.Equal(that1.LiquidationThreshold) {
		return false
	}
	if !this.BaseBorrowRate.Equal(that1.BaseBorrowRate) {
		return false
	}
	if !this.KinkBorrowRate.Equal(that1.KinkBorrowRate) {
		return false
	}
	if !this.MaxBorrowRate.Equal(that1.MaxBorrowRate) {
		return false
	}
	if !this.KinkUtilization.Equal(that1.KinkUtilization) {
		return false
	}
	if !this.LiquidationIncentive.Equal(that1.LiquidationIncentive) {
		return false
	}
	if this.SymbolDenom != that1.SymbolDenom {
		return false
	}
	if this.Exponent != that1.Exponent {
		return false
	}
	if this.EnableMsgSupply != that1.EnableMsgSupply {
		return false
	}
	if this.EnableMsgBorrow != that1.EnableMsgBorrow {
		return false
	}
	if this.Blacklist != that1.Blacklist {
		return false
	}
	if !this.MaxCollateralShare.Equal(that1.MaxCollateralShare) {
		return false
	}
	if !this.MaxSupplyUtilization.Equal(that1.MaxSupplyUtilization) {
		return false
	}
	if !this.MinCollateralLiquidity.Equal(that1.MinCollateralLiquidity) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SmallLiquidationSize.Size()
		i -= size
		if _, err := m.SmallLiquidationSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.OracleRewardFactor.Size()
		i -= size
		if _, err := m.OracleRewardFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.MinimumCloseFactor.Size()
		i -= size
		if _, err := m.MinimumCloseFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.CompleteLiquidationThreshold.Size()
		i -= size
		if _, err := m.CompleteLiquidationThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func (m *Token) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinCollateralLiquidity.Size()
		i -= size
		if _, err := m.MinCollateralLiquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size := m.MaxSupplyUtilization.Size()
		i -= size
		if _, err := m.MaxSupplyUtilization.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size := m.MaxCollateralShare.Size()
		i -= size
		if _, err := m.MaxCollateralShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if m.Blacklist {
		i--
		if m.Blacklist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.EnableMsgBorrow {
		i--
		if m.EnableMsgBorrow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.EnableMsgSupply {
		i--
		if m.EnableMsgSupply {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.Exponent != 0 {
		i = encodeVarintLeverage(dAtA, i, uint64(m.Exponent))
		i--
		dAtA[i] = 0x58
	}
	if len(m.SymbolDenom) > 0 {
		i -= len(m.SymbolDenom)
		copy(dAtA[i:], m.SymbolDenom)
		i = encodeVarintLeverage(dAtA, i, uint64(len(m.SymbolDenom)))
		i--
		dAtA[i] = 0x52
	}
	{
		size := m.LiquidationIncentive.Size()
		i -= size
		if _, err := m.LiquidationIncentive.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.KinkUtilization.Size()
		i -= size
		if _, err := m.KinkUtilization.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.MaxBorrowRate.Size()
		i -= size
		if _, err := m.MaxBorrowRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.KinkBorrowRate.Size()
		i -= size
		if _, err := m.KinkBorrowRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.BaseBorrowRate.Size()
		i -= size
		if _, err := m.BaseBorrowRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.LiquidationThreshold.Size()
		i -= size
		if _, err := m.LiquidationThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.CollateralWeight.Size()
		i -= size
		if _, err := m.CollateralWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ReserveFactor.Size()
		i -= size
		if _, err := m.ReserveFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintLeverage(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLeverage(dAtA []byte, offset int, v uint64) int {
	offset -= sovLeverage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CompleteLiquidationThreshold.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.MinimumCloseFactor.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.OracleRewardFactor.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.SmallLiquidationSize.Size()
	n += 1 + l + sovLeverage(uint64(l))
	return n
}

func (m *Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovLeverage(uint64(l))
	}
	l = m.ReserveFactor.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.CollateralWeight.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.LiquidationThreshold.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.BaseBorrowRate.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.KinkBorrowRate.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.MaxBorrowRate.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.KinkUtilization.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.LiquidationIncentive.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = len(m.SymbolDenom)
	if l > 0 {
		n += 1 + l + sovLeverage(uint64(l))
	}
	if m.Exponent != 0 {
		n += 1 + sovLeverage(uint64(m.Exponent))
	}
	if m.EnableMsgSupply {
		n += 2
	}
	if m.EnableMsgBorrow {
		n += 2
	}
	if m.Blacklist {
		n += 2
	}
	l = m.MaxCollateralShare.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.MaxSupplyUtilization.Size()
	n += 2 + l + sovLeverage(uint64(l))
	l = m.MinCollateralLiquidity.Size()
	n += 2 + l + sovLeverage(uint64(l))
	return n
}

func sovLeverage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLeverage(x uint64) (n int) {
	return sovLeverage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeverage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteLiquidationThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CompleteLiquidationThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumCloseFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumCloseFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleRewardFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OracleRewardFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallLiquidationSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SmallLiquidationSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLeverage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLeverage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeverage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReserveFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseBorrowRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseBorrowRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KinkBorrowRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KinkBorrowRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBorrowRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxBorrowRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KinkUtilization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KinkUtilization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationIncentive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationIncentive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymbolDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SymbolDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exponent", wireType)
			}
			m.Exponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exponent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableMsgSupply", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableMsgSupply = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableMsgBorrow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableMsgBorrow = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blacklist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Blacklist = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCollateralShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxCollateralShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupplyUtilization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSupplyUtilization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCollateralLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinCollateralLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLeverage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLeverage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLeverage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLeverage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLeverage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLeverage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLeverage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLeverage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLeverage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLeverage = fmt.Errorf("proto: unexpected end of group")
)
