// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/leverage/v1/leverage.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the leverage module.
type Params struct {
	// The complete_liquidation_threshold determines how far over their borrow limit a borrower
	// must be in order for their positions to be liquidated fully in a single event.
	CompleteLiquidationThreshold github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=complete_liquidation_threshold,json=completeLiquidationThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"complete_liquidation_threshold" yaml:"complete_liquidation_threshold"`
	// The minimum_close_factor determines the portion of a borrower's position that can be
	// liquidated in a single event, when the borrower is just barely over their borrow limit.
	MinimumCloseFactor github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=minimum_close_factor,json=minimumCloseFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"minimum_close_factor" yaml:"minimum_close_factor"`
	// The oracle_reward_factor determines the portion of interest accrued on borrows that is
	// sent to the oracle module to fund its reward pool.
	OracleRewardFactor github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=oracle_reward_factor,json=oracleRewardFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"oracle_reward_factor" yaml:"oracle_reward_factor"`
	// The small_liquidation_size determines the USD value at which a borrow is considered small
	// enough to be liquidated in a single transaction, bypassing dynamic close factor.
	SmallLiquidationSize github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=small_liquidation_size,json=smallLiquidationSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"small_liquidation_size" yaml:"small_liquidation_size"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cb1bf9ea641ecc6, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// Token defines a token, along with its capital metadata, in the Umee capital
// facility that can be loaned and borrowed.
type Token struct {
	// The base_denom defines the denomination of the underlying base token.
	BaseDenom string `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty" yaml:"base_denom"`
	// The reserve factor defines what portion of accrued interest of the asset type
	// goes to reserves.
	ReserveFactor github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=reserve_factor,json=reserveFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reserve_factor" yaml:"reserve_factor"`
	// The collateral_weight defines what amount of the total value of the asset
	// can contribute to a users borrowing power. If the collateral_weight is zero,
	// using this asset as collateral against borrowing will be disabled.
	CollateralWeight github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=collateral_weight,json=collateralWeight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"collateral_weight" yaml:"collateral_weight"`
	// The liquidation_threshold defines what amount of the total value of the asset
	// can contribute to a user's liquidation threshold (above which they become
	// eligible for liquidation).
	LiquidationThreshold github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=liquidation_threshold,json=liquidationThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_threshold" yaml:"liquidation_threshold"`
	// The base_borrow_rate defines the base interest rate for borrowing this
	// asset.
	BaseBorrowRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=base_borrow_rate,json=baseBorrowRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"base_borrow_rate" yaml:"base_borrow_rate"`
	// The kink_borrow_rate defines the interest rate for borrowing this
	// asset when utilization is at the 'kink' utilization value as defined
	// on the utilization:interest graph.
	KinkBorrowRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=kink_borrow_rate,json=kinkBorrowRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"kink_borrow_rate" yaml:"kink_borrow_rate"`
	// The max_borrow_rate defines the interest rate for borrowing this
	// asset (seen when utilization is 100%).
	MaxBorrowRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=max_borrow_rate,json=maxBorrowRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_borrow_rate" yaml:"max_borrow_rate"`
	// The kink_utilization_rate defines the borrow utilization rate for this
	// asset where the 'kink' on the utilization:interest graph occurs.
	KinkUtilizationRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=kink_utilization_rate,json=kinkUtilizationRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"kink_utilization_rate" yaml:"kink_utilization_rate"`
	// The liquidation_incentive determines the portion of bonus collateral of
	// a token type liquidators receive as a liquidation reward.
	LiquidationIncentive github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=liquidation_incentive,json=liquidationIncentive,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_incentive" yaml:"liquidation_incentive"`
	// The symbol_denom and exponent are solely used to update the oracle's accept
	// list of allowed tokens.
	SymbolDenom string `protobuf:"bytes,10,opt,name=symbol_denom,json=symbolDenom,proto3" json:"symbol_denom,omitempty" yaml:"symbol_denom"`
	Exponent    uint32 `protobuf:"varint,11,opt,name=exponent,proto3" json:"exponent,omitempty" yaml:"exponent"`
	// Allows lending of this token. Note that withdrawing is always enabled.
	// Disabling lending would be one step in phasing out an asset type.
	EnableLend bool `protobuf:"varint,12,opt,name=enable_lend,json=enableLend,proto3" json:"enable_lend,omitempty"`
	// Allows borrowing of this token. Note that repaying is always enabled.
	// Disabling borrowing would be one step in phasing out an asset type, but
	// could also be used from the start for asset types meant to be collateral
	// only, like meTokens.
	EnableBorrow bool `protobuf:"varint,13,opt,name=enable_borrow,json=enableBorrow,proto3" json:"enable_borrow,omitempty"`
	// This should only be used to eliminate an asset completely. A blacklisted
	// asset is treated as though its oracle price is zero, and thus ignored by
	// calculations such as collateral value and borrow limit. Can still be repaid
	// or withdrawn, but not liquidated. A blacklisted token must have enable_lend
	// and enable_borrow set to false. Such tokens can be safely removed from the
	// oracle and price feeder as well.
	Blacklist bool `protobuf:"varint,14,opt,name=blacklist,proto3" json:"blacklist,omitempty"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cb1bf9ea641ecc6, []int{1}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Token.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return m.Size()
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *Token) GetSymbolDenom() string {
	if m != nil {
		return m.SymbolDenom
	}
	return ""
}

func (m *Token) GetExponent() uint32 {
	if m != nil {
		return m.Exponent
	}
	return 0
}

func (m *Token) GetEnableLend() bool {
	if m != nil {
		return m.EnableLend
	}
	return false
}

func (m *Token) GetEnableBorrow() bool {
	if m != nil {
		return m.EnableBorrow
	}
	return false
}

func (m *Token) GetBlacklist() bool {
	if m != nil {
		return m.Blacklist
	}
	return false
}

func init() {
	proto.RegisterType((*Params)(nil), "umeenetwork.umee.leverage.v1.Params")
	proto.RegisterType((*Token)(nil), "umeenetwork.umee.leverage.v1.Token")
}

func init() { proto.RegisterFile("umee/leverage/v1/leverage.proto", fileDescriptor_8cb1bf9ea641ecc6) }

var fileDescriptor_8cb1bf9ea641ecc6 = []byte{
	// 754 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4d, 0x6f, 0xd3, 0x4a,
	0x14, 0x8d, 0xdf, 0x4b, 0xfb, 0x9a, 0x69, 0x93, 0xb6, 0x6e, 0xd2, 0x5a, 0xef, 0xe5, 0xc5, 0xd5,
	0x20, 0x50, 0x37, 0x8d, 0x29, 0xb0, 0xca, 0x32, 0x54, 0x40, 0xab, 0xf2, 0xa1, 0xa1, 0xa8, 0x12,
	0x1b, 0x6b, 0xe2, 0x5c, 0x12, 0x2b, 0x63, 0x4f, 0xb0, 0x27, 0x1f, 0xed, 0x06, 0x09, 0xc4, 0x9e,
	0x25, 0x1b, 0xa4, 0xfe, 0x0c, 0x7e, 0x42, 0x97, 0x5d, 0x22, 0x16, 0x11, 0x6a, 0x37, 0x88, 0x65,
	0x7e, 0x01, 0xf2, 0x8c, 0xf3, 0x55, 0x05, 0xa4, 0xa8, 0xac, 0x32, 0x73, 0xee, 0xf5, 0x39, 0x27,
	0x73, 0xef, 0xcc, 0x45, 0x66, 0xcb, 0x03, 0xb0, 0x18, 0xb4, 0x21, 0xa0, 0x35, 0xb0, 0xda, 0x3b,
	0xc3, 0x75, 0xb1, 0x19, 0x70, 0xc1, 0xf5, 0x7c, 0x94, 0xe0, 0x83, 0xe8, 0xf0, 0xa0, 0x51, 0x8c,
	0xd6, 0xc5, 0x61, 0x42, 0x7b, 0xe7, 0xdf, 0x6c, 0x8d, 0xd7, 0xb8, 0x4c, 0xb4, 0xa2, 0x95, 0xfa,
	0x06, 0x7f, 0x4e, 0xa2, 0xf9, 0x67, 0x34, 0xa0, 0x5e, 0xa8, 0x7f, 0xd2, 0x50, 0xc1, 0xe1, 0x5e,
	0x93, 0x81, 0x00, 0x9b, 0xb9, 0xaf, 0x5b, 0x6e, 0x95, 0x0a, 0x97, 0xfb, 0xb6, 0xa8, 0x07, 0x10,
	0xd6, 0x39, 0xab, 0x1a, 0x7f, 0x6d, 0x6a, 0x5b, 0xa9, 0xf2, 0xd1, 0x59, 0xcf, 0x4c, 0x7c, 0xed,
	0x99, 0xb7, 0x6a, 0xae, 0xa8, 0xb7, 0x2a, 0x45, 0x87, 0x7b, 0x96, 0xc3, 0x43, 0x8f, 0x87, 0xf1,
	0xcf, 0x76, 0x58, 0x6d, 0x58, 0xe2, 0xb8, 0x09, 0x61, 0x71, 0x17, 0x9c, 0x7e, 0xcf, 0xbc, 0x79,
	0x4c, 0x3d, 0x56, 0xc2, 0xbf, 0x67, 0xc7, 0x24, 0x3f, 0x48, 0x38, 0x18, 0xc5, 0x0f, 0x07, 0x61,
	0xfd, 0x0d, 0xca, 0x7a, 0xae, 0xef, 0x7a, 0x2d, 0xcf, 0x76, 0x18, 0x0f, 0xc1, 0x7e, 0x45, 0x1d,
	0xc1, 0x03, 0xe3, 0x6f, 0x69, 0xea, 0xf1, 0xcc, 0xa6, 0xfe, 0x53, 0xa6, 0xa6, 0x71, 0x62, 0xa2,
	0xc7, 0xf0, 0xfd, 0x08, 0x7d, 0x20, 0xc1, 0xc8, 0x00, 0x0f, 0xa8, 0xc3, 0xc0, 0x0e, 0xa0, 0x43,
	0x83, 0xea, 0xc0, 0x40, 0xf2, 0x7a, 0x06, 0xa6, 0x71, 0x62, 0xa2, 0x2b, 0x98, 0x48, 0x34, 0x36,
	0xf0, 0x5e, 0x43, 0xeb, 0xa1, 0x47, 0x19, 0x9b, 0x38, 0xc0, 0xd0, 0x3d, 0x01, 0x63, 0x4e, 0x7a,
	0x78, 0x3a, 0xb3, 0x87, 0xff, 0x95, 0x87, 0xe9, 0xac, 0x98, 0x64, 0x65, 0x60, 0xac, 0x1c, 0xcf,
	0xdd, 0x13, 0x28, 0x25, 0x3f, 0x9e, 0x9a, 0x09, 0xfc, 0x23, 0x85, 0xe6, 0x0e, 0x79, 0x03, 0x7c,
	0xfd, 0x1e, 0x42, 0x15, 0x1a, 0x82, 0x5d, 0x05, 0x9f, 0x7b, 0x86, 0x26, 0xad, 0xe4, 0xfa, 0x3d,
	0x73, 0x55, 0x91, 0x8f, 0x62, 0x98, 0xa4, 0xa2, 0xcd, 0x6e, 0xb4, 0xd6, 0x7d, 0x94, 0x09, 0x20,
	0x84, 0xa0, 0x3d, 0xac, 0xa4, 0x6a, 0xaf, 0x87, 0x33, 0xff, 0x89, 0x9c, 0xd2, 0x99, 0x64, 0xc3,
	0x24, 0x1d, 0x03, 0xf1, 0xe9, 0x75, 0xd0, 0xaa, 0xc3, 0x19, 0xa3, 0x02, 0x02, 0xca, 0xec, 0x0e,
	0xb8, 0xb5, 0xba, 0x88, 0x9b, 0x67, 0x7f, 0x66, 0x49, 0x63, 0xd0, 0xd1, 0x57, 0x08, 0x31, 0x59,
	0x19, 0x61, 0x47, 0x12, 0xd2, 0xdf, 0x69, 0x28, 0x37, 0xfd, 0x3e, 0xa9, 0xce, 0x79, 0x32, 0xb3,
	0x7a, 0x5e, 0xa9, 0xff, 0xe2, 0x1a, 0x65, 0xd9, 0xb4, 0xeb, 0x13, 0xa2, 0x15, 0x59, 0x88, 0x0a,
	0x0f, 0x02, 0xde, 0xb1, 0x03, 0x2a, 0x06, 0x5d, 0xb3, 0x37, 0xb3, 0xfe, 0xc6, 0x58, 0x61, 0xc7,
	0xf8, 0x30, 0xc9, 0x44, 0x50, 0x59, 0x22, 0x84, 0x0a, 0x88, 0x44, 0x1b, 0xae, 0xdf, 0x98, 0x10,
	0x9d, 0xbf, 0x9e, 0xe8, 0x55, 0x3e, 0x4c, 0x32, 0x11, 0x34, 0x26, 0xda, 0x44, 0xcb, 0x1e, 0xed,
	0x4e, 0x68, 0xfe, 0x23, 0x35, 0x1f, 0xcd, 0xac, 0xb9, 0x1e, 0xbf, 0x11, 0x93, 0x74, 0x98, 0xa4,
	0x3d, 0xda, 0x1d, 0x53, 0x7c, 0xab, 0xa1, 0x9c, 0xf4, 0xd5, 0x12, 0x2e, 0x73, 0x4f, 0x54, 0x45,
	0xa4, 0xf0, 0xc2, 0xf5, 0x2a, 0x3c, 0x95, 0x14, 0x93, 0xb5, 0x08, 0x7f, 0x31, 0x82, 0xa5, 0x89,
	0xab, 0x6d, 0xe6, 0xfa, 0x0e, 0xf8, 0xc2, 0x6d, 0x83, 0x91, 0xfa, 0x73, 0x6d, 0x36, 0x24, 0x9d,
	0x6c, 0xb3, 0xbd, 0x01, 0xac, 0x97, 0xd0, 0x52, 0x78, 0xec, 0x55, 0x38, 0x8b, 0x5f, 0x03, 0x24,
	0xb5, 0x37, 0xfa, 0x3d, 0x73, 0x2d, 0x7e, 0x6a, 0xc6, 0xa2, 0x98, 0x2c, 0xaa, 0xad, 0x7a, 0x11,
	0x2c, 0xb4, 0x00, 0xdd, 0x26, 0xf7, 0xc1, 0x17, 0xc6, 0xe2, 0xa6, 0xb6, 0x95, 0x2e, 0xaf, 0xf5,
	0x7b, 0xe6, 0xb2, 0xfa, 0x6e, 0x10, 0xc1, 0x64, 0x98, 0xa4, 0x9b, 0x68, 0x11, 0x7c, 0x5a, 0x61,
	0x60, 0x33, 0xf0, 0xab, 0xc6, 0xd2, 0xa6, 0xb6, 0xb5, 0x40, 0x90, 0x82, 0x0e, 0xc0, 0xaf, 0xea,
	0x37, 0x50, 0x3a, 0x4e, 0x50, 0xe5, 0x33, 0xd2, 0x32, 0x65, 0x49, 0x81, 0xaa, 0x82, 0x7a, 0x1e,
	0xa5, 0x2a, 0x8c, 0x3a, 0x0d, 0xe6, 0x86, 0xc2, 0xc8, 0xc8, 0x84, 0x11, 0x50, 0x4a, 0x7e, 0x3f,
	0x35, 0xb5, 0xf2, 0xfe, 0xd9, 0x45, 0x41, 0x3b, 0xbf, 0x28, 0x68, 0xdf, 0x2e, 0x0a, 0xda, 0x87,
	0xcb, 0x42, 0xe2, 0xfc, 0xb2, 0x90, 0xf8, 0x72, 0x59, 0x48, 0xbc, 0xbc, 0x3d, 0x76, 0x9c, 0xd1,
	0xd0, 0xdd, 0x8e, 0x27, 0xb0, 0xdc, 0x58, 0xed, 0x3b, 0x56, 0x77, 0x34, 0xb3, 0xe5, 0xe1, 0x56,
	0xe6, 0xe5, 0xe8, 0xbd, 0xfb, 0x33, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x44, 0xbb, 0xf0, 0xd1, 0x07,
	0x00, 0x00,
}

func (this *Token) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Token)
	if !ok {
		that2, ok := that.(Token)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BaseDenom != that1.BaseDenom {
		return false
	}
	if !this.ReserveFactor.Equal(that1.ReserveFactor) {
		return false
	}
	if !this.CollateralWeight.Equal(that1.CollateralWeight) {
		return false
	}
	if !this.LiquidationThreshold.Equal(that1.LiquidationThreshold) {
		return false
	}
	if !this.BaseBorrowRate.Equal(that1.BaseBorrowRate) {
		return false
	}
	if !this.KinkBorrowRate.Equal(that1.KinkBorrowRate) {
		return false
	}
	if !this.MaxBorrowRate.Equal(that1.MaxBorrowRate) {
		return false
	}
	if !this.KinkUtilizationRate.Equal(that1.KinkUtilizationRate) {
		return false
	}
	if !this.LiquidationIncentive.Equal(that1.LiquidationIncentive) {
		return false
	}
	if this.SymbolDenom != that1.SymbolDenom {
		return false
	}
	if this.Exponent != that1.Exponent {
		return false
	}
	if this.EnableLend != that1.EnableLend {
		return false
	}
	if this.EnableBorrow != that1.EnableBorrow {
		return false
	}
	if this.Blacklist != that1.Blacklist {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SmallLiquidationSize.Size()
		i -= size
		if _, err := m.SmallLiquidationSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.OracleRewardFactor.Size()
		i -= size
		if _, err := m.OracleRewardFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.MinimumCloseFactor.Size()
		i -= size
		if _, err := m.MinimumCloseFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.CompleteLiquidationThreshold.Size()
		i -= size
		if _, err := m.CompleteLiquidationThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func (m *Token) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Blacklist {
		i--
		if m.Blacklist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.EnableBorrow {
		i--
		if m.EnableBorrow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.EnableLend {
		i--
		if m.EnableLend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.Exponent != 0 {
		i = encodeVarintLeverage(dAtA, i, uint64(m.Exponent))
		i--
		dAtA[i] = 0x58
	}
	if len(m.SymbolDenom) > 0 {
		i -= len(m.SymbolDenom)
		copy(dAtA[i:], m.SymbolDenom)
		i = encodeVarintLeverage(dAtA, i, uint64(len(m.SymbolDenom)))
		i--
		dAtA[i] = 0x52
	}
	{
		size := m.LiquidationIncentive.Size()
		i -= size
		if _, err := m.LiquidationIncentive.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.KinkUtilizationRate.Size()
		i -= size
		if _, err := m.KinkUtilizationRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.MaxBorrowRate.Size()
		i -= size
		if _, err := m.MaxBorrowRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.KinkBorrowRate.Size()
		i -= size
		if _, err := m.KinkBorrowRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.BaseBorrowRate.Size()
		i -= size
		if _, err := m.BaseBorrowRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.LiquidationThreshold.Size()
		i -= size
		if _, err := m.LiquidationThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.CollateralWeight.Size()
		i -= size
		if _, err := m.CollateralWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ReserveFactor.Size()
		i -= size
		if _, err := m.ReserveFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintLeverage(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLeverage(dAtA []byte, offset int, v uint64) int {
	offset -= sovLeverage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CompleteLiquidationThreshold.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.MinimumCloseFactor.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.OracleRewardFactor.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.SmallLiquidationSize.Size()
	n += 1 + l + sovLeverage(uint64(l))
	return n
}

func (m *Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovLeverage(uint64(l))
	}
	l = m.ReserveFactor.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.CollateralWeight.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.LiquidationThreshold.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.BaseBorrowRate.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.KinkBorrowRate.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.MaxBorrowRate.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.KinkUtilizationRate.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.LiquidationIncentive.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = len(m.SymbolDenom)
	if l > 0 {
		n += 1 + l + sovLeverage(uint64(l))
	}
	if m.Exponent != 0 {
		n += 1 + sovLeverage(uint64(m.Exponent))
	}
	if m.EnableLend {
		n += 2
	}
	if m.EnableBorrow {
		n += 2
	}
	if m.Blacklist {
		n += 2
	}
	return n
}

func sovLeverage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLeverage(x uint64) (n int) {
	return sovLeverage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeverage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteLiquidationThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CompleteLiquidationThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumCloseFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumCloseFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleRewardFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OracleRewardFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallLiquidationSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SmallLiquidationSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLeverage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLeverage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeverage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReserveFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseBorrowRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseBorrowRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KinkBorrowRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KinkBorrowRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBorrowRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxBorrowRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KinkUtilizationRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KinkUtilizationRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationIncentive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationIncentive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymbolDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SymbolDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exponent", wireType)
			}
			m.Exponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exponent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableLend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableLend = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableBorrow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableBorrow = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blacklist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Blacklist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLeverage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLeverage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLeverage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLeverage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLeverage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLeverage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLeverage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLeverage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLeverage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLeverage = fmt.Errorf("proto: unexpected end of group")
)
