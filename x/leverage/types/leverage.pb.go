// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/leverage/v1beta1/leverage.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the leverage module.
type Params struct {
	// The interest epoch determines how many blocks pass between borrow interest calculations.
	InterestEpoch github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=interest_epoch,json=interestEpoch,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"interest_epoch" yaml:"interest_epoch"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aab5daf3352690, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// Token defines a token, along with its capital metadata, in the Umee capital
// facility that can be loaned and borrowed.
//
// TODO: Determine what additional parameters might be needed.
type Token struct {
	// The base_denom defines the denomination of the underlying base token.
	BaseDenom string `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty" yaml:"base_denom"`
	// The reserve factor defines what portion of accrued interest of the asset type
	// goes to reserves.
	ReserveFactor github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=reserve_factor,json=reserveFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reserve_factor" yaml:"reserve_factor"`
	// The collateral_weight defines what amount of the total value of the asset
	// can contribute to a users borrowing power. If the collateral_weight is zero,
	// using this asset as collateral against borrowing will be disabled.
	CollateralWeight github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=collateral_weight,json=collateralWeight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"collateral_weight" yaml:"collateral_weight"`
	// The base_borrow_rate defines the base interest rate for borrowing this
	// asset.
	BaseBorrowRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=base_borrow_rate,json=baseBorrowRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"base_borrow_rate" yaml:"base_borrow_rate"`
	// The kink_borrow_rate defines the interest rate for borrowing this
	// asset when utilization is at the 'kink' utilization value as defined
	// on the utilization:interest graph.
	KinkBorrowRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=kink_borrow_rate,json=kinkBorrowRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"kink_borrow_rate" yaml:"kink_borrow_rate"`
	// The max_borrow_rate defines the interest rate for borrowing this
	// asset (seen when utilization is 100%).
	MaxBorrowRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=max_borrow_rate,json=maxBorrowRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_borrow_rate" yaml:"max_borrow_rate"`
	// The kink_utilization_rate defines the borrow utilization rate for this
	// asset where the 'kink' on the utilization:interest graph occurs.
	KinkUtilizationRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=kink_utilization_rate,json=kinkUtilizationRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"kink_utilization_rate" yaml:"kink_utilization_rate"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aab5daf3352690, []int{1}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Token.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return m.Size()
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "umeenetwork.umee.leverage.v1beta1.Params")
	proto.RegisterType((*Token)(nil), "umeenetwork.umee.leverage.v1beta1.Token")
}

func init() {
	proto.RegisterFile("umee/leverage/v1beta1/leverage.proto", fileDescriptor_f9aab5daf3352690)
}

var fileDescriptor_f9aab5daf3352690 = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x63, 0x48, 0x83, 0x7a, 0x52, 0x42, 0x6b, 0x08, 0x58, 0x08, 0xd9, 0x70, 0x42, 0x88,
	0x25, 0xb6, 0x2a, 0x98, 0x32, 0x46, 0x85, 0x52, 0x06, 0x84, 0x4e, 0x20, 0x24, 0x16, 0xeb, 0xec,
	0x3e, 0x1c, 0xcb, 0x3f, 0x2e, 0xba, 0xbb, 0xfc, 0x28, 0x03, 0x03, 0x3b, 0x12, 0x23, 0x63, 0xff,
	0x9c, 0x8e, 0x1d, 0x11, 0x43, 0x84, 0x92, 0x85, 0xb9, 0x7f, 0x01, 0xba, 0xb3, 0xa9, 0x9d, 0x30,
	0x59, 0x4c, 0x7e, 0xef, 0xeb, 0x77, 0xdf, 0xcf, 0xd7, 0x27, 0x3d, 0xa3, 0x47, 0xd3, 0x0c, 0xc0,
	0x4b, 0x61, 0x06, 0x9c, 0x46, 0xe0, 0xcd, 0x0e, 0x02, 0x90, 0xf4, 0xe0, 0x4a, 0x70, 0x27, 0x9c,
	0x49, 0x66, 0x3e, 0x54, 0x53, 0x39, 0xc8, 0x39, 0xe3, 0x89, 0xab, 0x6a, 0xf7, 0x6a, 0xa0, 0x3c,
	0x71, 0xef, 0x76, 0xc4, 0x22, 0xa6, 0xa7, 0x3d, 0x55, 0x15, 0x07, 0xf1, 0x67, 0xd4, 0x79, 0x43,
	0x39, 0xcd, 0x84, 0x99, 0xa3, 0x5e, 0x9c, 0x4b, 0xe0, 0x20, 0xa4, 0x0f, 0x13, 0x16, 0x8e, 0x2d,
	0xe3, 0x81, 0xf1, 0x64, 0x77, 0x74, 0x74, 0xbe, 0x74, 0x5a, 0x3f, 0x97, 0xce, 0xe3, 0x28, 0x96,
	0xe3, 0x69, 0xe0, 0x86, 0x2c, 0xf3, 0x42, 0x26, 0x32, 0x26, 0xca, 0xc7, 0x40, 0x9c, 0x24, 0x9e,
	0x3c, 0x9d, 0x80, 0x70, 0x8f, 0x73, 0x79, 0xb9, 0x74, 0xfa, 0xa7, 0x34, 0x4b, 0x87, 0x78, 0xd3,
	0x0d, 0x93, 0xee, 0x5f, 0xe1, 0xb9, 0xea, 0x87, 0xed, 0xef, 0x67, 0x4e, 0x0b, 0x7f, 0xed, 0xa0,
	0x9d, 0xb7, 0x2c, 0x81, 0xdc, 0x7c, 0x86, 0x50, 0x40, 0x05, 0xf8, 0x27, 0x90, 0xb3, 0xac, 0x64,
	0xf7, 0x2f, 0x97, 0xce, 0x7e, 0xe1, 0x56, 0xbd, 0xc3, 0x64, 0x57, 0x35, 0x87, 0xaa, 0x56, 0xa9,
	0x39, 0x08, 0xe0, 0x33, 0xf0, 0x3f, 0xd2, 0x50, 0x32, 0x6e, 0x5d, 0x6b, 0x9c, 0xfa, 0x10, 0xc2,
	0x2a, 0xf5, 0xa6, 0x1b, 0x26, 0xdd, 0x52, 0x78, 0xa1, 0x7b, 0x73, 0x8e, 0xf6, 0x43, 0x96, 0xa6,
	0x54, 0x02, 0xa7, 0xa9, 0x3f, 0x87, 0x38, 0x1a, 0x4b, 0xeb, 0xba, 0x46, 0xbe, 0x6a, 0x8c, 0xb4,
	0x0a, 0xe4, 0x3f, 0x86, 0x98, 0xec, 0x55, 0xda, 0x7b, 0x2d, 0x99, 0x02, 0xed, 0xe9, 0x2b, 0x08,
	0x18, 0xe7, 0x6c, 0xee, 0x73, 0x2a, 0xc1, 0x6a, 0x6b, 0xee, 0x71, 0x63, 0xee, 0xdd, 0xda, 0x95,
	0xd6, 0xfc, 0x30, 0xe9, 0x29, 0x69, 0xa4, 0x15, 0x42, 0x25, 0x28, 0x68, 0x12, 0xe7, 0xc9, 0x06,
	0x74, 0xe7, 0xff, 0xa0, 0xdb, 0x7e, 0x98, 0xf4, 0x94, 0x54, 0x83, 0x4e, 0xd0, 0xcd, 0x8c, 0x2e,
	0x36, 0x98, 0x1d, 0xcd, 0x7c, 0xd9, 0x98, 0x79, 0xa7, 0x60, 0x6e, 0xd9, 0x61, 0xd2, 0xcd, 0xe8,
	0xa2, 0x46, 0xfc, 0x62, 0xa0, 0xbe, 0xce, 0x35, 0x95, 0x71, 0x1a, 0x7f, 0xa2, 0x32, 0x66, 0x79,
	0x01, 0xbe, 0xa1, 0xc1, 0xaf, 0x1b, 0x83, 0xef, 0xd7, 0x3e, 0x76, 0xdb, 0x14, 0x93, 0x5b, 0x4a,
	0x7f, 0x57, 0xc9, 0x2a, 0xc4, 0xb0, 0xfd, 0xfb, 0xcc, 0x31, 0x46, 0x47, 0xe7, 0x2b, 0xdb, 0xb8,
	0x58, 0xd9, 0xc6, 0xaf, 0x95, 0x6d, 0x7c, 0x5b, 0xdb, 0xad, 0x8b, 0xb5, 0xdd, 0xfa, 0xb1, 0xb6,
	0x5b, 0x1f, 0x06, 0x35, 0xb8, 0xda, 0xf0, 0x41, 0xb9, 0xee, 0xba, 0xf1, 0x16, 0xd5, 0x2f, 0x42,
	0xe7, 0x08, 0x3a, 0x7a, 0xbf, 0x9f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xe5, 0xf4, 0x63,
	0x40, 0x04, 0x00, 0x00,
}

func (this *Token) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Token)
	if !ok {
		that2, ok := that.(Token)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BaseDenom != that1.BaseDenom {
		return false
	}
	if !this.ReserveFactor.Equal(that1.ReserveFactor) {
		return false
	}
	if !this.CollateralWeight.Equal(that1.CollateralWeight) {
		return false
	}
	if !this.BaseBorrowRate.Equal(that1.BaseBorrowRate) {
		return false
	}
	if !this.KinkBorrowRate.Equal(that1.KinkBorrowRate) {
		return false
	}
	if !this.MaxBorrowRate.Equal(that1.MaxBorrowRate) {
		return false
	}
	if !this.KinkUtilizationRate.Equal(that1.KinkUtilizationRate) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.InterestEpoch.Size()
		i -= size
		if _, err := m.InterestEpoch.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Token) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.KinkUtilizationRate.Size()
		i -= size
		if _, err := m.KinkUtilizationRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.MaxBorrowRate.Size()
		i -= size
		if _, err := m.MaxBorrowRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.KinkBorrowRate.Size()
		i -= size
		if _, err := m.KinkBorrowRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.BaseBorrowRate.Size()
		i -= size
		if _, err := m.BaseBorrowRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.CollateralWeight.Size()
		i -= size
		if _, err := m.CollateralWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ReserveFactor.Size()
		i -= size
		if _, err := m.ReserveFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLeverage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintLeverage(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLeverage(dAtA []byte, offset int, v uint64) int {
	offset -= sovLeverage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InterestEpoch.Size()
	n += 1 + l + sovLeverage(uint64(l))
	return n
}

func (m *Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovLeverage(uint64(l))
	}
	l = m.ReserveFactor.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.CollateralWeight.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.BaseBorrowRate.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.KinkBorrowRate.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.MaxBorrowRate.Size()
	n += 1 + l + sovLeverage(uint64(l))
	l = m.KinkUtilizationRate.Size()
	n += 1 + l + sovLeverage(uint64(l))
	return n
}

func sovLeverage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLeverage(x uint64) (n int) {
	return sovLeverage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeverage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestEpoch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLeverage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLeverage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeverage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReserveFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseBorrowRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseBorrowRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KinkBorrowRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KinkBorrowRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBorrowRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxBorrowRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KinkUtilizationRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KinkUtilizationRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLeverage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLeverage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLeverage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLeverage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLeverage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLeverage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLeverage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLeverage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLeverage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLeverage = fmt.Errorf("proto: unexpected end of group")
)
