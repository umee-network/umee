// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/lend.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgLendAsset struct {
	Lender string     `protobuf:"bytes,1,opt,name=lender,proto3" json:"lender,omitempty"`
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgLendAsset) Reset()         { *m = MsgLendAsset{} }
func (m *MsgLendAsset) String() string { return proto.CompactTextString(m) }
func (*MsgLendAsset) ProtoMessage()    {}
func (*MsgLendAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_a608129e17e10d2e, []int{0}
}
func (m *MsgLendAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLendAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLendAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLendAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLendAsset.Merge(m, src)
}
func (m *MsgLendAsset) XXX_Size() int {
	return m.Size()
}
func (m *MsgLendAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLendAsset.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLendAsset proto.InternalMessageInfo

func (m *MsgLendAsset) GetLender() string {
	if m != nil {
		return m.Lender
	}
	return ""
}

func (m *MsgLendAsset) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type MsgWithdrawAsset struct {
	Lender string     `protobuf:"bytes,1,opt,name=lender,proto3" json:"lender,omitempty"`
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgWithdrawAsset) Reset()         { *m = MsgWithdrawAsset{} }
func (m *MsgWithdrawAsset) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawAsset) ProtoMessage()    {}
func (*MsgWithdrawAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_a608129e17e10d2e, []int{1}
}
func (m *MsgWithdrawAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawAsset.Merge(m, src)
}
func (m *MsgWithdrawAsset) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawAsset.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawAsset proto.InternalMessageInfo

func (m *MsgWithdrawAsset) GetLender() string {
	if m != nil {
		return m.Lender
	}
	return ""
}

func (m *MsgWithdrawAsset) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*MsgLendAsset)(nil), "umeenetwork.umee.leverage.MsgLendAsset")
	proto.RegisterType((*MsgWithdrawAsset)(nil), "umeenetwork.umee.leverage.MsgWithdrawAsset")
}

func init() { proto.RegisterFile("umee/lend.proto", fileDescriptor_a608129e17e10d2e) }

var fileDescriptor_a608129e17e10d2e = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x90, 0xb1, 0x4a, 0x03, 0x41,
	0x10, 0x86, 0x6f, 0x45, 0x02, 0xae, 0x82, 0x72, 0x88, 0x24, 0x29, 0xd6, 0x90, 0x2a, 0x4d, 0x76,
	0x88, 0x16, 0xd6, 0xc6, 0xc2, 0xc6, 0x34, 0x69, 0x04, 0x1b, 0xd9, 0xbb, 0x1b, 0x36, 0x87, 0xb9,
	0x9d, 0xb0, 0xbb, 0x97, 0xe8, 0x5b, 0xf8, 0x58, 0x29, 0x53, 0x5a, 0x89, 0xdc, 0xbd, 0x88, 0xec,
	0xdd, 0xf9, 0x08, 0x76, 0xff, 0xff, 0x33, 0xc3, 0x07, 0x1f, 0x3f, 0x2f, 0x0b, 0x44, 0x58, 0xa3,
	0xc9, 0xe4, 0xc6, 0x92, 0xa7, 0x78, 0x10, 0x06, 0x83, 0x7e, 0x47, 0xf6, 0x4d, 0x86, 0x2c, 0xd7,
	0xb8, 0x45, 0xab, 0x34, 0x0e, 0x45, 0x4a, 0xae, 0x20, 0x07, 0x89, 0x72, 0x08, 0xdb, 0x59, 0x82,
	0x5e, 0xcd, 0x20, 0xa5, 0xdc, 0xb4, 0xaf, 0xc3, 0x4b, 0x4d, 0x9a, 0x9a, 0x08, 0x21, 0xb5, 0xeb,
	0xf8, 0x95, 0x9f, 0x2d, 0x9c, 0x7e, 0x42, 0x93, 0xdd, 0x3b, 0x87, 0x3e, 0xbe, 0xe2, 0xbd, 0x80,
	0x43, 0xdb, 0x67, 0x23, 0x36, 0x39, 0x59, 0x76, 0x2d, 0xbe, 0xe3, 0x3d, 0x55, 0x50, 0x69, 0x7c,
	0xff, 0x68, 0xc4, 0x26, 0xa7, 0x37, 0x03, 0xd9, 0xe2, 0x64, 0xc0, 0xc9, 0x0e, 0x27, 0x1f, 0x28,
	0x37, 0xf3, 0xe3, 0xfd, 0xf7, 0x75, 0xb4, 0xec, 0xce, 0xc7, 0x29, 0xbf, 0x58, 0x38, 0xfd, 0x9c,
	0xfb, 0x55, 0x66, 0xd5, 0xee, 0x7f, 0x20, 0xf3, 0xc7, 0x7d, 0x25, 0xd8, 0xa1, 0x12, 0xec, 0xa7,
	0x12, 0xec, 0xb3, 0x16, 0xd1, 0xa1, 0x16, 0xd1, 0x57, 0x2d, 0xa2, 0x97, 0xa9, 0xce, 0xfd, 0xaa,
	0x4c, 0x64, 0x4a, 0x05, 0x04, 0x5f, 0xd3, 0x4e, 0x5e, 0x53, 0xe0, 0x1d, 0xfe, 0xf4, 0x81, 0xff,
	0xd8, 0xa0, 0x4b, 0x7a, 0x8d, 0x95, 0xdb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x34, 0x10,
	0x95, 0x79, 0x01, 0x00, 0x00,
}

func (m *MsgLendAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLendAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLendAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Lender) > 0 {
		i -= len(m.Lender)
		copy(dAtA[i:], m.Lender)
		i = encodeVarintLend(dAtA, i, uint64(len(m.Lender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Lender) > 0 {
		i -= len(m.Lender)
		copy(dAtA[i:], m.Lender)
		i = encodeVarintLend(dAtA, i, uint64(len(m.Lender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLend(dAtA []byte, offset int, v uint64) int {
	offset -= sovLend(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgLendAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Lender)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLend(uint64(l))
	return n
}

func (m *MsgWithdrawAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Lender)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLend(uint64(l))
	return n
}

func sovLend(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLend(x uint64) (n int) {
	return sovLend(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgLendAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLendAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLendAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLend(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLend
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLend
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLend
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLend
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLend        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLend          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLend = fmt.Errorf("proto: unexpected end of group")
)
