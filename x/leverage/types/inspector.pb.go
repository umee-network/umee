// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/leverage/v1/inspector.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryInspect defines the request structure for the Inspect gRPC service handler.
type QueryInspect struct {
	// Mode is a string which selects the logic behind the inspector query.
	Mode string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	// Symbol optionally selects a symbol denom for query modes that allow one to be specified.
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Sort is an optional string which controls how accounts are sorted.
	Sort string `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	// Mode minimum is the mode value below which accounts will be filtered. For example,
	// in collateral mode this is the minimum collateral value an account must have to
	// be displayed.
	ModeMin github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=mode_min,json=modeMin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mode_min"`
	// Sort minimum is the sorted value below which accounts will be filtered. For example,
	// in risk mode this is the minimum LTV an account must have to be displayed.
	SortMin github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=sort_min,json=sortMin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"sort_min"`
}

func (m *QueryInspect) Reset()         { *m = QueryInspect{} }
func (m *QueryInspect) String() string { return proto.CompactTextString(m) }
func (*QueryInspect) ProtoMessage()    {}
func (*QueryInspect) Descriptor() ([]byte, []int) {
	return fileDescriptor_e28247c0efa3108d, []int{0}
}
func (m *QueryInspect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInspect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInspect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInspect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInspect.Merge(m, src)
}
func (m *QueryInspect) XXX_Size() int {
	return m.Size()
}
func (m *QueryInspect) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInspect.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInspect proto.InternalMessageInfo

// QueryInspectNeat defines the request structure for the InspectNeat gRPC service handler.
type QueryInspectNeat struct {
	// Mode is a string which selects the logic behind the inspector query.
	Mode string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	// Symbol optionally selects a symbol denom for query modes that allow one to be specified.
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Sort is an optional string which controls how accounts are sorted.
	Sort string `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	// Mode minimum is the mode value below which accounts will be filtered. For example,
	// in collateral mode this is the minimum collateral value an account must have to
	// be displayed.
	ModeMin github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=mode_min,json=modeMin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mode_min"`
	// Sort minimum is the sorted value below which accounts will be filtered. For example,
	// in risk mode this is the minimum LTV an account must have to be displayed.
	SortMin github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=sort_min,json=sortMin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"sort_min"`
}

func (m *QueryInspectNeat) Reset()         { *m = QueryInspectNeat{} }
func (m *QueryInspectNeat) String() string { return proto.CompactTextString(m) }
func (*QueryInspectNeat) ProtoMessage()    {}
func (*QueryInspectNeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_e28247c0efa3108d, []int{1}
}
func (m *QueryInspectNeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInspectNeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInspectNeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInspectNeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInspectNeat.Merge(m, src)
}
func (m *QueryInspectNeat) XXX_Size() int {
	return m.Size()
}
func (m *QueryInspectNeat) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInspectNeat.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInspectNeat proto.InternalMessageInfo

// QueryInspectResponse defines the response structure for the Inspect gRPC service handler.
type QueryInspectResponse struct {
	Borrowers []BorrowerSummary `protobuf:"bytes,1,rep,name=borrowers,proto3" json:"borrowers"`
}

func (m *QueryInspectResponse) Reset()         { *m = QueryInspectResponse{} }
func (m *QueryInspectResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInspectResponse) ProtoMessage()    {}
func (*QueryInspectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e28247c0efa3108d, []int{2}
}
func (m *QueryInspectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInspectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInspectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInspectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInspectResponse.Merge(m, src)
}
func (m *QueryInspectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInspectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInspectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInspectResponse proto.InternalMessageInfo

// QueryInspectNeatResponse defines the response structure for the InspectNeat gRPC service handler.
type QueryInspectNeatResponse struct {
	Borrowers []BorrowerSummaryNeat `protobuf:"bytes,1,rep,name=borrowers,proto3" json:"borrowers"`
}

func (m *QueryInspectNeatResponse) Reset()         { *m = QueryInspectNeatResponse{} }
func (m *QueryInspectNeatResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInspectNeatResponse) ProtoMessage()    {}
func (*QueryInspectNeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e28247c0efa3108d, []int{3}
}
func (m *QueryInspectNeatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInspectNeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInspectNeatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInspectNeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInspectNeatResponse.Merge(m, src)
}
func (m *QueryInspectNeatResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInspectNeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInspectNeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInspectNeatResponse proto.InternalMessageInfo

// BorrowerSummary defines a borrower's address and account health.
type BorrowerSummary struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Supplied Value is the total USD value of all tokens the account has supplied, includng interest earned.
	SuppliedValue github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=supplied_value,json=suppliedValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"supplied_value"`
	// Collateral Value is the total USD value of the account's collateral.
	CollateralValue github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=collateral_value,json=collateralValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"collateral_value"`
	// Borrowed Value is the total USD value of all tokens the account has borrowed, including interest owed.
	BorrowedValue github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=borrowed_value,json=borrowedValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"borrowed_value"`
	// Borrow Limit is the maximum Borrowed Value the account is allowed to reach through direct borrowing.
	BorrowLimit github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=borrow_limit,json=borrowLimit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"borrow_limit"`
	// Liquidation Threshold is the Borrowed Value at which the account becomes eligible for liquidation.
	LiquidationThreshold github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=liquidation_threshold,json=liquidationThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_threshold"`
	// SpecificCollateralValue is the amount of Collateral Value which is the result of a specified collateral denom.
	SpecificCollateralValue github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=specific_collateral_value,json=specificCollateralValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"specific_collateral_value"`
	// SpecificBorrowValue is the amount of Borrowed Value which is the result of a specified borrowed denom.
	SpecificBorrowValue github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=specific_borrow_value,json=specificBorrowValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"specific_borrow_value"`
}

func (m *BorrowerSummary) Reset()         { *m = BorrowerSummary{} }
func (m *BorrowerSummary) String() string { return proto.CompactTextString(m) }
func (*BorrowerSummary) ProtoMessage()    {}
func (*BorrowerSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_e28247c0efa3108d, []int{4}
}
func (m *BorrowerSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BorrowerSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BorrowerSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BorrowerSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BorrowerSummary.Merge(m, src)
}
func (m *BorrowerSummary) XXX_Size() int {
	return m.Size()
}
func (m *BorrowerSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_BorrowerSummary.DiscardUnknown(m)
}

var xxx_messageInfo_BorrowerSummary proto.InternalMessageInfo

// BorrowerSummaryNeat defines a borrower's address and account health without requiring sdk.Dec formatting
type BorrowerSummaryNeat struct {
	Account string `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
	// Borrowed is account's borrowed value, either in total or just a specified denom.
	Borrowed float64 `protobuf:"fixed64,2,opt,name=Borrowed,proto3" json:"Borrowed,omitempty"`
	// L is borrowed value as a portion of borrow limit.
	L float64 `protobuf:"fixed64,3,opt,name=L,proto3" json:"L,omitempty"`
	// T is borrowed value as a portion of liquidation threshold.
	T float64 `protobuf:"fixed64,4,opt,name=T,proto3" json:"T,omitempty"`
	// V is the borrowed value as a portion of collateral value.
	V float64 `protobuf:"fixed64,5,opt,name=V,proto3" json:"V,omitempty"`
}

func (m *BorrowerSummaryNeat) Reset()         { *m = BorrowerSummaryNeat{} }
func (m *BorrowerSummaryNeat) String() string { return proto.CompactTextString(m) }
func (*BorrowerSummaryNeat) ProtoMessage()    {}
func (*BorrowerSummaryNeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_e28247c0efa3108d, []int{5}
}
func (m *BorrowerSummaryNeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BorrowerSummaryNeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BorrowerSummaryNeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BorrowerSummaryNeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BorrowerSummaryNeat.Merge(m, src)
}
func (m *BorrowerSummaryNeat) XXX_Size() int {
	return m.Size()
}
func (m *BorrowerSummaryNeat) XXX_DiscardUnknown() {
	xxx_messageInfo_BorrowerSummaryNeat.DiscardUnknown(m)
}

var xxx_messageInfo_BorrowerSummaryNeat proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryInspect)(nil), "umee.leverage.v1.QueryInspect")
	proto.RegisterType((*QueryInspectNeat)(nil), "umee.leverage.v1.QueryInspectNeat")
	proto.RegisterType((*QueryInspectResponse)(nil), "umee.leverage.v1.QueryInspectResponse")
	proto.RegisterType((*QueryInspectNeatResponse)(nil), "umee.leverage.v1.QueryInspectNeatResponse")
	proto.RegisterType((*BorrowerSummary)(nil), "umee.leverage.v1.BorrowerSummary")
	proto.RegisterType((*BorrowerSummaryNeat)(nil), "umee.leverage.v1.BorrowerSummaryNeat")
}

func init() { proto.RegisterFile("umee/leverage/v1/inspector.proto", fileDescriptor_e28247c0efa3108d) }

var fileDescriptor_e28247c0efa3108d = []byte{
	// 600 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x95, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x6b, 0xd6, 0xad, 0x9d, 0xd7, 0x6d, 0x95, 0xd7, 0x41, 0xd8, 0x21, 0x2d, 0x95, 0x40,
	0xbb, 0x2c, 0x61, 0xc0, 0x89, 0x1b, 0x05, 0x0e, 0x95, 0xba, 0x49, 0x0b, 0x5d, 0x25, 0x90, 0x50,
	0x95, 0x26, 0xa6, 0x35, 0x4b, 0xe2, 0x60, 0x27, 0x1d, 0x15, 0x5f, 0x82, 0x8f, 0xc0, 0x67, 0xe1,
	0xd4, 0xe3, 0x8e, 0x88, 0xc3, 0x04, 0x2d, 0x87, 0x7d, 0x0c, 0x64, 0x3b, 0x69, 0xab, 0x16, 0x09,
	0x91, 0x23, 0xa7, 0xfa, 0xb9, 0xef, 0xfd, 0xfe, 0x7e, 0xcf, 0xff, 0xc8, 0xb0, 0x16, 0xfb, 0x18,
	0x9b, 0x1e, 0x1e, 0x62, 0x66, 0xf7, 0xb1, 0x39, 0x3c, 0x36, 0x49, 0xc0, 0x43, 0xec, 0x44, 0x94,
	0x19, 0x21, 0xa3, 0x11, 0x45, 0x65, 0x91, 0x61, 0xa4, 0x19, 0xc6, 0xf0, 0xf8, 0xa0, 0xd2, 0xa7,
	0x7d, 0x2a, 0xff, 0x34, 0xc5, 0x4a, 0xe5, 0xd5, 0x7f, 0x01, 0x58, 0x3a, 0x8b, 0x31, 0x1b, 0x35,
	0x15, 0x00, 0x21, 0x98, 0xf7, 0xa9, 0x8b, 0x35, 0x50, 0x03, 0x87, 0x9b, 0x96, 0x5c, 0xa3, 0xdb,
	0x70, 0x83, 0x8f, 0xfc, 0x1e, 0xf5, 0xb4, 0x5b, 0x72, 0x37, 0x89, 0x44, 0x2e, 0xa7, 0x2c, 0xd2,
	0xd6, 0x54, 0xae, 0x58, 0xa3, 0x26, 0x2c, 0x8a, 0x9a, 0xae, 0x4f, 0x02, 0x2d, 0x2f, 0xf6, 0x1b,
	0xc6, 0xf8, 0xba, 0x9a, 0xfb, 0x7e, 0x5d, 0x7d, 0xd0, 0x27, 0xd1, 0x20, 0xee, 0x19, 0x0e, 0xf5,
	0x4d, 0x87, 0x72, 0x9f, 0xf2, 0xe4, 0xe7, 0x88, 0xbb, 0x17, 0x66, 0x34, 0x0a, 0x31, 0x37, 0x5e,
	0x60, 0xc7, 0x2a, 0x88, 0xfa, 0x13, 0x12, 0x08, 0x94, 0x40, 0x4a, 0xd4, 0x7a, 0x36, 0x94, 0xa8,
	0x3f, 0x21, 0x41, 0xfd, 0x06, 0xc0, 0xf2, 0x62, 0x9b, 0xa7, 0xd8, 0xfe, 0x5f, 0x5b, 0x7d, 0x0b,
	0x2b, 0x8b, 0x9d, 0x5a, 0x98, 0x87, 0x34, 0xe0, 0x18, 0xbd, 0x84, 0x9b, 0x3d, 0xca, 0x18, 0xbd,
	0xc4, 0x8c, 0x6b, 0xa0, 0xb6, 0x76, 0xb8, 0xf5, 0xe8, 0x9e, 0xb1, 0xec, 0x12, 0xa3, 0x91, 0xa4,
	0xbc, 0x8a, 0x7d, 0xdf, 0x66, 0xa3, 0x46, 0x5e, 0x1c, 0xc3, 0x9a, 0x57, 0xd6, 0x31, 0xd4, 0x96,
	0x07, 0x39, 0x93, 0x68, 0xae, 0x4a, 0xdc, 0xff, 0xab, 0x84, 0x20, 0xac, 0xca, 0x7c, 0x5d, 0x87,
	0xbb, 0x4b, 0x89, 0x48, 0x83, 0x05, 0xdb, 0x75, 0x19, 0xe6, 0x3c, 0xb9, 0xb2, 0x34, 0x44, 0xe7,
	0x70, 0x87, 0xc7, 0x61, 0xe8, 0x11, 0xec, 0x76, 0x87, 0xb6, 0x17, 0x63, 0x75, 0x7b, 0xff, 0x3c,
	0xc4, 0xed, 0x94, 0xd2, 0x11, 0x10, 0xf4, 0x1a, 0x96, 0x1d, 0xea, 0x79, 0x76, 0x84, 0x99, 0xed,
	0x25, 0xe0, 0xb5, 0x4c, 0xe0, 0xdd, 0x39, 0x47, 0xa1, 0xcf, 0xe1, 0x4e, 0xd2, 0x6c, 0x7a, 0xe2,
	0x6c, 0x0e, 0xda, 0x4e, 0x29, 0x0a, 0x7b, 0x06, 0x4b, 0x6a, 0xa3, 0xeb, 0x11, 0x9f, 0x44, 0x19,
	0xbd, 0xb4, 0xa5, 0x18, 0x2d, 0x81, 0x40, 0x0e, 0xdc, 0xf7, 0xc8, 0x87, 0x98, 0xb8, 0x76, 0x44,
	0x68, 0xd0, 0x8d, 0x06, 0x0c, 0xf3, 0x01, 0xf5, 0x5c, 0x6d, 0x23, 0x13, 0xbb, 0xb2, 0x00, 0x6b,
	0xa7, 0x2c, 0xf4, 0x1e, 0xde, 0x15, 0x76, 0x22, 0xef, 0x88, 0xd3, 0x5d, 0x19, 0x79, 0x21, 0x93,
	0xd0, 0x9d, 0x14, 0xf8, 0x7c, 0x69, 0xf4, 0x3d, 0xb8, 0x3f, 0xd3, 0x4a, 0x86, 0xa5, 0x74, 0x8a,
	0x99, 0x74, 0xf6, 0x52, 0x98, 0xb2, 0xab, 0xd4, 0x78, 0x9a, 0xbf, 0xf9, 0x52, 0x05, 0xf5, 0x4f,
	0x70, 0xef, 0x0f, 0x66, 0x17, 0x3e, 0x7e, 0xe6, 0x38, 0x34, 0x0e, 0xa2, 0xd4, 0xc7, 0x49, 0x88,
	0x0e, 0x60, 0x31, 0x29, 0x70, 0xa5, 0x83, 0x81, 0x35, 0x8b, 0x51, 0x09, 0x82, 0x96, 0x74, 0x1f,
	0xb0, 0x40, 0x4b, 0x44, 0x6d, 0x69, 0x19, 0x60, 0x81, 0xb6, 0x88, 0x3a, 0xf2, 0xae, 0x81, 0x05,
	0x3a, 0x4a, 0xbc, 0x71, 0x3a, 0xfe, 0xa9, 0xe7, 0xc6, 0x13, 0x1d, 0x5c, 0x4d, 0x74, 0xf0, 0x63,
	0xa2, 0x83, 0xcf, 0x53, 0x3d, 0x77, 0x35, 0xd5, 0x73, 0xdf, 0xa6, 0x7a, 0xee, 0xcd, 0xc3, 0x85,
	0xee, 0xc4, 0x17, 0x7a, 0x14, 0xe0, 0xe8, 0x92, 0xb2, 0x0b, 0x19, 0x98, 0xc3, 0x27, 0xe6, 0xc7,
	0xf9, 0xf3, 0x22, 0x7b, 0xed, 0x6d, 0xc8, 0x07, 0xe3, 0xf1, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xe0, 0xf8, 0x88, 0xf2, 0x7c, 0x06, 0x00, 0x00,
}

func (this *BorrowerSummary) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BorrowerSummary)
	if !ok {
		that2, ok := that.(BorrowerSummary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.SuppliedValue.Equal(that1.SuppliedValue) {
		return false
	}
	if !this.CollateralValue.Equal(that1.CollateralValue) {
		return false
	}
	if !this.BorrowedValue.Equal(that1.BorrowedValue) {
		return false
	}
	if !this.BorrowLimit.Equal(that1.BorrowLimit) {
		return false
	}
	if !this.LiquidationThreshold.Equal(that1.LiquidationThreshold) {
		return false
	}
	if !this.SpecificCollateralValue.Equal(that1.SpecificCollateralValue) {
		return false
	}
	if !this.SpecificBorrowValue.Equal(that1.SpecificBorrowValue) {
		return false
	}
	return true
}
func (this *BorrowerSummaryNeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BorrowerSummaryNeat)
	if !ok {
		that2, ok := that.(BorrowerSummaryNeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Account != that1.Account {
		return false
	}
	if this.Borrowed != that1.Borrowed {
		return false
	}
	if this.L != that1.L {
		return false
	}
	if this.T != that1.T {
		return false
	}
	if this.V != that1.V {
		return false
	}
	return true
}
func (m *QueryInspect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInspect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInspect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SortMin.Size()
		i -= size
		if _, err := m.SortMin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInspector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.ModeMin.Size()
		i -= size
		if _, err := m.ModeMin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInspector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Sort) > 0 {
		i -= len(m.Sort)
		copy(dAtA[i:], m.Sort)
		i = encodeVarintInspector(dAtA, i, uint64(len(m.Sort)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintInspector(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Mode) > 0 {
		i -= len(m.Mode)
		copy(dAtA[i:], m.Mode)
		i = encodeVarintInspector(dAtA, i, uint64(len(m.Mode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInspectNeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInspectNeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInspectNeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SortMin.Size()
		i -= size
		if _, err := m.SortMin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInspector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.ModeMin.Size()
		i -= size
		if _, err := m.ModeMin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInspector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Sort) > 0 {
		i -= len(m.Sort)
		copy(dAtA[i:], m.Sort)
		i = encodeVarintInspector(dAtA, i, uint64(len(m.Sort)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintInspector(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Mode) > 0 {
		i -= len(m.Mode)
		copy(dAtA[i:], m.Mode)
		i = encodeVarintInspector(dAtA, i, uint64(len(m.Mode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInspectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInspectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInspectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Borrowers) > 0 {
		for iNdEx := len(m.Borrowers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Borrowers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInspector(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryInspectNeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInspectNeatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInspectNeatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Borrowers) > 0 {
		for iNdEx := len(m.Borrowers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Borrowers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInspector(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BorrowerSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BorrowerSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BorrowerSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SpecificBorrowValue.Size()
		i -= size
		if _, err := m.SpecificBorrowValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInspector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.SpecificCollateralValue.Size()
		i -= size
		if _, err := m.SpecificCollateralValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInspector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.LiquidationThreshold.Size()
		i -= size
		if _, err := m.LiquidationThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInspector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.BorrowLimit.Size()
		i -= size
		if _, err := m.BorrowLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInspector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.BorrowedValue.Size()
		i -= size
		if _, err := m.BorrowedValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInspector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.CollateralValue.Size()
		i -= size
		if _, err := m.CollateralValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInspector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.SuppliedValue.Size()
		i -= size
		if _, err := m.SuppliedValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInspector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintInspector(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BorrowerSummaryNeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BorrowerSummaryNeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BorrowerSummaryNeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.V != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.V))))
		i--
		dAtA[i] = 0x29
	}
	if m.T != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.T))))
		i--
		dAtA[i] = 0x21
	}
	if m.L != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.L))))
		i--
		dAtA[i] = 0x19
	}
	if m.Borrowed != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Borrowed))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintInspector(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInspector(dAtA []byte, offset int, v uint64) int {
	offset -= sovInspector(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryInspect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovInspector(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovInspector(uint64(l))
	}
	l = len(m.Sort)
	if l > 0 {
		n += 1 + l + sovInspector(uint64(l))
	}
	l = m.ModeMin.Size()
	n += 1 + l + sovInspector(uint64(l))
	l = m.SortMin.Size()
	n += 1 + l + sovInspector(uint64(l))
	return n
}

func (m *QueryInspectNeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovInspector(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovInspector(uint64(l))
	}
	l = len(m.Sort)
	if l > 0 {
		n += 1 + l + sovInspector(uint64(l))
	}
	l = m.ModeMin.Size()
	n += 1 + l + sovInspector(uint64(l))
	l = m.SortMin.Size()
	n += 1 + l + sovInspector(uint64(l))
	return n
}

func (m *QueryInspectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Borrowers) > 0 {
		for _, e := range m.Borrowers {
			l = e.Size()
			n += 1 + l + sovInspector(uint64(l))
		}
	}
	return n
}

func (m *QueryInspectNeatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Borrowers) > 0 {
		for _, e := range m.Borrowers {
			l = e.Size()
			n += 1 + l + sovInspector(uint64(l))
		}
	}
	return n
}

func (m *BorrowerSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovInspector(uint64(l))
	}
	l = m.SuppliedValue.Size()
	n += 1 + l + sovInspector(uint64(l))
	l = m.CollateralValue.Size()
	n += 1 + l + sovInspector(uint64(l))
	l = m.BorrowedValue.Size()
	n += 1 + l + sovInspector(uint64(l))
	l = m.BorrowLimit.Size()
	n += 1 + l + sovInspector(uint64(l))
	l = m.LiquidationThreshold.Size()
	n += 1 + l + sovInspector(uint64(l))
	l = m.SpecificCollateralValue.Size()
	n += 1 + l + sovInspector(uint64(l))
	l = m.SpecificBorrowValue.Size()
	n += 1 + l + sovInspector(uint64(l))
	return n
}

func (m *BorrowerSummaryNeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovInspector(uint64(l))
	}
	if m.Borrowed != 0 {
		n += 9
	}
	if m.L != 0 {
		n += 9
	}
	if m.T != 0 {
		n += 9
	}
	if m.V != 0 {
		n += 9
	}
	return n
}

func sovInspector(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInspector(x uint64) (n int) {
	return sovInspector(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryInspect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInspector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInspect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInspect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ModeMin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SortMin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInspector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInspector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInspectNeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInspector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInspectNeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInspectNeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ModeMin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SortMin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInspector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInspector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInspectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInspector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInspectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInspectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrowers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Borrowers = append(m.Borrowers, BorrowerSummary{})
			if err := m.Borrowers[len(m.Borrowers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInspector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInspector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInspectNeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInspector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInspectNeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInspectNeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrowers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Borrowers = append(m.Borrowers, BorrowerSummaryNeat{})
			if err := m.Borrowers[len(m.Borrowers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInspector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInspector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BorrowerSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInspector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BorrowerSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BorrowerSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuppliedValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SuppliedValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowedValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowedValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificCollateralValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpecificCollateralValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificBorrowValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpecificBorrowValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInspector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInspector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BorrowerSummaryNeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInspector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BorrowerSummaryNeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BorrowerSummaryNeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrowed", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Borrowed = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field L", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.L = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.T = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.V = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipInspector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInspector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInspector(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInspector
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInspector
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInspector
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInspector
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInspector        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInspector          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInspector = fmt.Errorf("proto: unexpected end of group")
)
