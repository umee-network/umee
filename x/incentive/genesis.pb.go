// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/incentive/v1/genesis.proto

package incentive

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the x/incentive module's genesis state.
type GenesisState struct {
	Params             Params                                   `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	CompletedPrograms  []IncentiveProgram                       `protobuf:"bytes,2,rep,name=completed_programs,json=completedPrograms,proto3" json:"completed_programs"`
	OngoingPrograms    []IncentiveProgram                       `protobuf:"bytes,3,rep,name=ongoing_programs,json=ongoingPrograms,proto3" json:"ongoing_programs"`
	UpcomingPrograms   []IncentiveProgram                       `protobuf:"bytes,4,rep,name=upcoming_programs,json=upcomingPrograms,proto3" json:"upcoming_programs"`
	NextProgramId      uint32                                   `protobuf:"varint,5,opt,name=next_program_id,json=nextProgramId,proto3" json:"next_program_id,omitempty"`
	LastRewardsTime    uint64                                   `protobuf:"varint,6,opt,name=last_rewards_time,json=lastRewardsTime,proto3" json:"last_rewards_time,omitempty"`
	TotalBonded        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=total_bonded,json=totalBonded,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_bonded"`
	Bonds              []Bond                                   `protobuf:"bytes,8,rep,name=bonds,proto3" json:"bonds"`
	PendingRewards     []PendingReward                          `protobuf:"bytes,9,rep,name=pending_rewards,json=pendingRewards,proto3" json:"pending_rewards"`
	RewardBases        []RewardTracker                          `protobuf:"bytes,10,rep,name=reward_bases,json=rewardBases,proto3" json:"reward_bases"`
	RewardAccumulators []RewardAccumulator                      `protobuf:"bytes,11,rep,name=reward_accumulators,json=rewardAccumulators,proto3" json:"reward_accumulators"`
	Unbondings         []Unbonding                              `protobuf:"bytes,12,rep,name=unbondings,proto3" json:"unbondings"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f117566517b8062, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetCompletedPrograms() []IncentiveProgram {
	if m != nil {
		return m.CompletedPrograms
	}
	return nil
}

func (m *GenesisState) GetOngoingPrograms() []IncentiveProgram {
	if m != nil {
		return m.OngoingPrograms
	}
	return nil
}

func (m *GenesisState) GetUpcomingPrograms() []IncentiveProgram {
	if m != nil {
		return m.UpcomingPrograms
	}
	return nil
}

func (m *GenesisState) GetNextProgramId() uint32 {
	if m != nil {
		return m.NextProgramId
	}
	return 0
}

func (m *GenesisState) GetLastRewardsTime() uint64 {
	if m != nil {
		return m.LastRewardsTime
	}
	return 0
}

func (m *GenesisState) GetTotalBonded() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalBonded
	}
	return nil
}

func (m *GenesisState) GetBonds() []Bond {
	if m != nil {
		return m.Bonds
	}
	return nil
}

func (m *GenesisState) GetPendingRewards() []PendingReward {
	if m != nil {
		return m.PendingRewards
	}
	return nil
}

func (m *GenesisState) GetRewardBases() []RewardTracker {
	if m != nil {
		return m.RewardBases
	}
	return nil
}

func (m *GenesisState) GetRewardAccumulators() []RewardAccumulator {
	if m != nil {
		return m.RewardAccumulators
	}
	return nil
}

func (m *GenesisState) GetUnbondings() []Unbonding {
	if m != nil {
		return m.Unbondings
	}
	return nil
}

// Bond tracks the amount of coins of one uToken denomination bonded to a
// given reward tier by a single account.
type Bond struct {
	Account string     `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Tier    uint32     `protobuf:"varint,2,opt,name=tier,proto3" json:"tier,omitempty"`
	Amount  types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *Bond) Reset()         { *m = Bond{} }
func (m *Bond) String() string { return proto.CompactTextString(m) }
func (*Bond) ProtoMessage()    {}
func (*Bond) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f117566517b8062, []int{1}
}
func (m *Bond) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bond.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bond.Merge(m, src)
}
func (m *Bond) XXX_Size() int {
	return m.Size()
}
func (m *Bond) XXX_DiscardUnknown() {
	xxx_messageInfo_Bond.DiscardUnknown(m)
}

var xxx_messageInfo_Bond proto.InternalMessageInfo

func (m *Bond) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Bond) GetTier() uint32 {
	if m != nil {
		return m.Tier
	}
	return 0
}

func (m *Bond) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// PendingReward tracks the amount of rewards that a given account has calculated
// but not yet claimed.
type PendingReward struct {
	Account       string                                   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	PendingReward github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=pending_reward,json=pendingReward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"pending_reward"`
}

func (m *PendingReward) Reset()         { *m = PendingReward{} }
func (m *PendingReward) String() string { return proto.CompactTextString(m) }
func (*PendingReward) ProtoMessage()    {}
func (*PendingReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f117566517b8062, []int{2}
}
func (m *PendingReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingReward.Merge(m, src)
}
func (m *PendingReward) XXX_Size() int {
	return m.Size()
}
func (m *PendingReward) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingReward.DiscardUnknown(m)
}

var xxx_messageInfo_PendingReward proto.InternalMessageInfo

func (m *PendingReward) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *PendingReward) GetPendingReward() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PendingReward
	}
	return nil
}

// RewardTracker tracks the value of a given tier and lock denom's RewardAccumulator
// at the last time a specific account calculated pending rewards for it. When calculating
// available rewards, this value is used to determine the difference between the current
// RewardAccumulator for a tier and the last value at which the user updated bonds or claimed
// tokens. Their pending rewards increase by only the rewards accrued in that time period.
type RewardTracker struct {
	Account       string                                      `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Tier          uint32                                      `protobuf:"varint,2,opt,name=tier,proto3" json:"tier,omitempty"`
	Denom         string                                      `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	RewardTracker github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,4,rep,name=reward_tracker,json=rewardTracker,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"reward_tracker"`
}

func (m *RewardTracker) Reset()         { *m = RewardTracker{} }
func (m *RewardTracker) String() string { return proto.CompactTextString(m) }
func (*RewardTracker) ProtoMessage()    {}
func (*RewardTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f117566517b8062, []int{3}
}
func (m *RewardTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardTracker.Merge(m, src)
}
func (m *RewardTracker) XXX_Size() int {
	return m.Size()
}
func (m *RewardTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardTracker.DiscardUnknown(m)
}

var xxx_messageInfo_RewardTracker proto.InternalMessageInfo

func (m *RewardTracker) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RewardTracker) GetTier() uint32 {
	if m != nil {
		return m.Tier
	}
	return 0
}

func (m *RewardTracker) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *RewardTracker) GetRewardTracker() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.RewardTracker
	}
	return nil
}

// RewardAccumulator is a global reward tracking struct that indicates the amount
// of rewards that a single unit of denom would have acucmulated if it was bonded
// at a given tier since genesis.
type RewardAccumulator struct {
	Tier          uint32                                      `protobuf:"varint,1,opt,name=tier,proto3" json:"tier,omitempty"`
	Denom         string                                      `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	RewardTracker github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,3,rep,name=reward_tracker,json=rewardTracker,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"reward_tracker"`
}

func (m *RewardAccumulator) Reset()         { *m = RewardAccumulator{} }
func (m *RewardAccumulator) String() string { return proto.CompactTextString(m) }
func (*RewardAccumulator) ProtoMessage()    {}
func (*RewardAccumulator) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f117566517b8062, []int{4}
}
func (m *RewardAccumulator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardAccumulator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardAccumulator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardAccumulator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardAccumulator.Merge(m, src)
}
func (m *RewardAccumulator) XXX_Size() int {
	return m.Size()
}
func (m *RewardAccumulator) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardAccumulator.DiscardUnknown(m)
}

var xxx_messageInfo_RewardAccumulator proto.InternalMessageInfo

func (m *RewardAccumulator) GetTier() uint32 {
	if m != nil {
		return m.Tier
	}
	return 0
}

func (m *RewardAccumulator) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *RewardAccumulator) GetRewardTracker() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.RewardTracker
	}
	return nil
}

// Unbonding is a structure that tracks an in-progress token unbonding.
type Unbonding struct {
	Account string     `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Tier    uint32     `protobuf:"varint,2,opt,name=tier,proto3" json:"tier,omitempty"`
	End     uint64     `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	Amount  types.Coin `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount"`
}

func (m *Unbonding) Reset()         { *m = Unbonding{} }
func (m *Unbonding) String() string { return proto.CompactTextString(m) }
func (*Unbonding) ProtoMessage()    {}
func (*Unbonding) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f117566517b8062, []int{5}
}
func (m *Unbonding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Unbonding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Unbonding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Unbonding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Unbonding.Merge(m, src)
}
func (m *Unbonding) XXX_Size() int {
	return m.Size()
}
func (m *Unbonding) XXX_DiscardUnknown() {
	xxx_messageInfo_Unbonding.DiscardUnknown(m)
}

var xxx_messageInfo_Unbonding proto.InternalMessageInfo

func (m *Unbonding) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Unbonding) GetTier() uint32 {
	if m != nil {
		return m.Tier
	}
	return 0
}

func (m *Unbonding) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *Unbonding) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "umeenetwork.umee.incentive.v1.GenesisState")
	proto.RegisterType((*Bond)(nil), "umeenetwork.umee.incentive.v1.Bond")
	proto.RegisterType((*PendingReward)(nil), "umeenetwork.umee.incentive.v1.PendingReward")
	proto.RegisterType((*RewardTracker)(nil), "umeenetwork.umee.incentive.v1.RewardTracker")
	proto.RegisterType((*RewardAccumulator)(nil), "umeenetwork.umee.incentive.v1.RewardAccumulator")
	proto.RegisterType((*Unbonding)(nil), "umeenetwork.umee.incentive.v1.Unbonding")
}

func init() { proto.RegisterFile("umee/incentive/v1/genesis.proto", fileDescriptor_3f117566517b8062) }

var fileDescriptor_3f117566517b8062 = []byte{
	// 734 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0x4d, 0x6e, 0xd3, 0x40,
	0x14, 0xc7, 0xe3, 0x26, 0x4d, 0xc9, 0x4b, 0xd2, 0x34, 0x43, 0x17, 0xa6, 0x02, 0x37, 0x04, 0x81,
	0x22, 0xa0, 0x76, 0x3f, 0x16, 0x2c, 0x11, 0x29, 0x08, 0x75, 0x83, 0x2a, 0xd3, 0x6e, 0x60, 0x11,
	0x1c, 0x7b, 0x64, 0xac, 0xc6, 0x33, 0x96, 0x67, 0x9c, 0x96, 0x3d, 0x07, 0xe0, 0x02, 0x5c, 0x80,
	0x0b, 0x70, 0x85, 0x6e, 0x90, 0xba, 0x64, 0x05, 0xa8, 0x3d, 0x01, 0x37, 0x40, 0xf3, 0x91, 0x2f,
	0x5a, 0x25, 0xad, 0x8a, 0x58, 0x65, 0x66, 0xf2, 0xde, 0xef, 0xff, 0xde, 0xcc, 0x7f, 0xc6, 0xb0,
	0x9a, 0xc5, 0x18, 0x3b, 0x11, 0xf1, 0x31, 0xe1, 0x51, 0x1f, 0x3b, 0xfd, 0x0d, 0x27, 0xc4, 0x04,
	0xb3, 0x88, 0xd9, 0x49, 0x4a, 0x39, 0x45, 0x77, 0x44, 0x00, 0xc1, 0xfc, 0x90, 0xa6, 0x07, 0xb6,
	0x18, 0xdb, 0xc3, 0x60, 0xbb, 0xbf, 0xb1, 0x62, 0xf9, 0x94, 0xc5, 0x94, 0x39, 0x5d, 0x8f, 0x89,
	0xe4, 0x2e, 0xe6, 0xde, 0x86, 0xe3, 0xd3, 0x88, 0xa8, 0xf4, 0x95, 0xe5, 0x90, 0x86, 0x54, 0x0e,
	0x1d, 0x31, 0xd2, 0xab, 0x77, 0xcf, 0xab, 0x8e, 0xa8, 0x32, 0xa4, 0xf9, 0x7b, 0x01, 0x2a, 0x2f,
	0x55, 0x25, 0xaf, 0xb9, 0xc7, 0x31, 0xda, 0x86, 0x62, 0xe2, 0xa5, 0x5e, 0xcc, 0x4c, 0xa3, 0x61,
	0xb4, 0xca, 0x9b, 0xf7, 0xed, 0xa9, 0x95, 0xd9, 0xbb, 0x32, 0xb8, 0x5d, 0x38, 0xfe, 0xb1, 0x9a,
	0x73, 0x75, 0x2a, 0x0a, 0x00, 0xf9, 0x34, 0x4e, 0x7a, 0x98, 0xe3, 0xa0, 0x93, 0xa4, 0x34, 0x94,
	0xc0, 0xb9, 0x46, 0xbe, 0x55, 0xde, 0x74, 0x66, 0x00, 0x77, 0x06, 0x93, 0x5d, 0x95, 0xa7, 0xd1,
	0xf5, 0x21, 0x50, 0xaf, 0x33, 0xf4, 0x0e, 0x96, 0x28, 0x09, 0x69, 0x44, 0xc2, 0x91, 0x46, 0xfe,
	0x3a, 0x1a, 0x35, 0x8d, 0x1b, 0x2a, 0x74, 0xa1, 0x9e, 0x25, 0x3e, 0x8d, 0x27, 0x24, 0x0a, 0xd7,
	0x91, 0x58, 0x1a, 0xf0, 0x86, 0x1a, 0x0f, 0xa0, 0x46, 0xf0, 0x11, 0x1f, 0xf0, 0x3b, 0x51, 0x60,
	0xce, 0x37, 0x8c, 0x56, 0xd5, 0xad, 0x8a, 0x65, 0x1d, 0xb6, 0x13, 0xa0, 0x87, 0x50, 0xef, 0x79,
	0x8c, 0x77, 0x52, 0x7c, 0xe8, 0xa5, 0x01, 0xeb, 0xf0, 0x28, 0xc6, 0x66, 0xb1, 0x61, 0xb4, 0x0a,
	0x6e, 0x4d, 0xfc, 0xe1, 0xaa, 0xf5, 0xbd, 0x28, 0xc6, 0x88, 0x40, 0x85, 0x53, 0xee, 0xf5, 0x3a,
	0x5d, 0x4a, 0x02, 0x1c, 0x98, 0x0b, 0xb2, 0xe4, 0x5b, 0xb6, 0x72, 0x91, 0x2d, 0x5c, 0x64, 0x6b,
	0x17, 0xd9, 0xdb, 0x34, 0x22, 0xed, 0x75, 0x51, 0xdc, 0x97, 0x9f, 0xab, 0xad, 0x30, 0xe2, 0xef,
	0xb3, 0xae, 0xed, 0xd3, 0xd8, 0xd1, 0x96, 0x53, 0x3f, 0x6b, 0x2c, 0x38, 0x70, 0xf8, 0x87, 0x04,
	0x33, 0x99, 0xc0, 0xdc, 0xb2, 0x14, 0x68, 0x4b, 0x3e, 0x7a, 0x0a, 0xf3, 0x42, 0x89, 0x99, 0x37,
	0xa4, 0xd0, 0xbd, 0x19, 0x7b, 0x23, 0xb2, 0xf4, 0x7e, 0xa8, 0x3c, 0xf4, 0x16, 0x6a, 0x09, 0x26,
	0x81, 0xd8, 0x67, 0xdd, 0x9f, 0x59, 0x92, 0xa8, 0xc7, 0xb3, 0xec, 0xa7, 0xb2, 0x54, 0xf3, 0x9a,
	0xb9, 0x98, 0x8c, 0x2f, 0x32, 0xb4, 0x0f, 0x15, 0x05, 0xed, 0x88, 0xc6, 0x99, 0x09, 0x97, 0x22,
	0xab, 0xec, 0xbd, 0xd4, 0xf3, 0x0f, 0x70, 0xaa, 0xc9, 0x65, 0xc5, 0x69, 0x0b, 0x0c, 0x0a, 0xe1,
	0xa6, 0xc6, 0x7a, 0xbe, 0x9f, 0xc5, 0x59, 0xcf, 0xe3, 0x34, 0x65, 0x66, 0x59, 0xd2, 0xd7, 0x2f,
	0x45, 0x7f, 0x36, 0x4a, 0xd4, 0x0a, 0x28, 0xfd, 0xfb, 0x0f, 0x86, 0x5e, 0x01, 0x64, 0x44, 0xec,
	0x53, 0x44, 0x42, 0x66, 0x56, 0x24, 0xbf, 0x35, 0x83, 0xbf, 0x3f, 0x48, 0xd0, 0xdc, 0x31, 0x42,
	0x33, 0x86, 0x82, 0x38, 0x01, 0x64, 0xc2, 0x82, 0xe7, 0xfb, 0x34, 0x23, 0x5c, 0xde, 0xf5, 0x92,
	0x3b, 0x98, 0x22, 0x04, 0x05, 0x1e, 0xe1, 0xd4, 0x9c, 0x93, 0x46, 0x94, 0x63, 0xf4, 0x04, 0x8a,
	0x5e, 0x2c, 0x83, 0xf3, 0xf2, 0x61, 0x98, 0xe2, 0x26, 0xfd, 0x18, 0xa8, 0xf0, 0xe6, 0x67, 0x03,
	0xaa, 0x13, 0xc7, 0x34, 0x45, 0x38, 0x85, 0xc5, 0x49, 0x1f, 0xe8, 0x47, 0xe3, 0x9f, 0x5a, 0xb7,
	0x3a, 0xe1, 0x8f, 0xe6, 0x37, 0x03, 0xaa, 0x13, 0x87, 0x7d, 0xc5, 0x8d, 0x59, 0x86, 0xf9, 0x00,
	0x13, 0x1a, 0xcb, 0x7d, 0x29, 0xb9, 0x6a, 0x82, 0x8e, 0x60, 0x51, 0xbb, 0x83, 0x2b, 0xaa, 0x7e,
	0x37, 0x6e, 0x5f, 0xd8, 0xc9, 0x73, 0xec, 0xcb, 0x66, 0xb6, 0x74, 0x33, 0x8f, 0x2e, 0xd1, 0x8c,
	0xce, 0x61, 0x6e, 0x35, 0x1d, 0xaf, 0xbe, 0xf9, 0xd5, 0x80, 0xfa, 0x39, 0x7b, 0x0d, 0x2b, 0x37,
	0x2e, 0xaa, 0x7c, 0x6e, 0x7a, 0xe5, 0xf9, 0xff, 0x54, 0xf9, 0x47, 0x03, 0x4a, 0x43, 0xe3, 0x5e,
	0xf1, 0x14, 0x96, 0x20, 0x8f, 0x49, 0x20, 0xcf, 0xa0, 0xe0, 0x8a, 0xe1, 0x98, 0x61, 0x0b, 0x57,
	0x32, 0x6c, 0xfb, 0xc5, 0xf1, 0xa9, 0x65, 0x9c, 0x9c, 0x5a, 0xc6, 0xaf, 0x53, 0xcb, 0xf8, 0x74,
	0x66, 0xe5, 0x4e, 0xce, 0xac, 0xdc, 0xf7, 0x33, 0x2b, 0xf7, 0x66, 0xbc, 0x39, 0x71, 0xe7, 0xd6,
	0xf4, 0x05, 0x94, 0x13, 0xa7, 0xbf, 0xe5, 0x1c, 0x8d, 0x3e, 0xb0, 0xdd, 0xa2, 0xfc, 0xc2, 0x6e,
	0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x0c, 0x31, 0x6e, 0xfc, 0x07, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Unbondings) > 0 {
		for iNdEx := len(m.Unbondings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Unbondings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.RewardAccumulators) > 0 {
		for iNdEx := len(m.RewardAccumulators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardAccumulators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.RewardBases) > 0 {
		for iNdEx := len(m.RewardBases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardBases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.PendingRewards) > 0 {
		for iNdEx := len(m.PendingRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Bonds) > 0 {
		for iNdEx := len(m.Bonds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bonds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.TotalBonded) > 0 {
		for iNdEx := len(m.TotalBonded) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalBonded[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.LastRewardsTime != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastRewardsTime))
		i--
		dAtA[i] = 0x30
	}
	if m.NextProgramId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.NextProgramId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.UpcomingPrograms) > 0 {
		for iNdEx := len(m.UpcomingPrograms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpcomingPrograms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.OngoingPrograms) > 0 {
		for iNdEx := len(m.OngoingPrograms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OngoingPrograms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CompletedPrograms) > 0 {
		for iNdEx := len(m.CompletedPrograms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CompletedPrograms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Bond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bond) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bond) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Tier != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Tier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingReward) > 0 {
		for iNdEx := len(m.PendingReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardTracker) > 0 {
		for iNdEx := len(m.RewardTracker) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardTracker[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Tier != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Tier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardAccumulator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardAccumulator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardAccumulator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardTracker) > 0 {
		for iNdEx := len(m.RewardTracker) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardTracker[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Tier != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Tier))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Unbonding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Unbonding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Unbonding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.End != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x18
	}
	if m.Tier != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Tier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.CompletedPrograms) > 0 {
		for _, e := range m.CompletedPrograms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.OngoingPrograms) > 0 {
		for _, e := range m.OngoingPrograms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UpcomingPrograms) > 0 {
		for _, e := range m.UpcomingPrograms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.NextProgramId != 0 {
		n += 1 + sovGenesis(uint64(m.NextProgramId))
	}
	if m.LastRewardsTime != 0 {
		n += 1 + sovGenesis(uint64(m.LastRewardsTime))
	}
	if len(m.TotalBonded) > 0 {
		for _, e := range m.TotalBonded {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Bonds) > 0 {
		for _, e := range m.Bonds {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PendingRewards) > 0 {
		for _, e := range m.PendingRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RewardBases) > 0 {
		for _, e := range m.RewardBases {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RewardAccumulators) > 0 {
		for _, e := range m.RewardAccumulators {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Unbondings) > 0 {
		for _, e := range m.Unbondings {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *Bond) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Tier != 0 {
		n += 1 + sovGenesis(uint64(m.Tier))
	}
	l = m.Amount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *PendingReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.PendingReward) > 0 {
		for _, e := range m.PendingReward {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *RewardTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Tier != 0 {
		n += 1 + sovGenesis(uint64(m.Tier))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.RewardTracker) > 0 {
		for _, e := range m.RewardTracker {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *RewardAccumulator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tier != 0 {
		n += 1 + sovGenesis(uint64(m.Tier))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.RewardTracker) > 0 {
		for _, e := range m.RewardTracker {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *Unbonding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Tier != 0 {
		n += 1 + sovGenesis(uint64(m.Tier))
	}
	if m.End != 0 {
		n += 1 + sovGenesis(uint64(m.End))
	}
	l = m.Amount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedPrograms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedPrograms = append(m.CompletedPrograms, IncentiveProgram{})
			if err := m.CompletedPrograms[len(m.CompletedPrograms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OngoingPrograms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OngoingPrograms = append(m.OngoingPrograms, IncentiveProgram{})
			if err := m.OngoingPrograms[len(m.OngoingPrograms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpcomingPrograms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpcomingPrograms = append(m.UpcomingPrograms, IncentiveProgram{})
			if err := m.UpcomingPrograms[len(m.UpcomingPrograms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextProgramId", wireType)
			}
			m.NextProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextProgramId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRewardsTime", wireType)
			}
			m.LastRewardsTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRewardsTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBonded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalBonded = append(m.TotalBonded, types.Coin{})
			if err := m.TotalBonded[len(m.TotalBonded)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bonds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bonds = append(m.Bonds, Bond{})
			if err := m.Bonds[len(m.Bonds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingRewards = append(m.PendingRewards, PendingReward{})
			if err := m.PendingRewards[len(m.PendingRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardBases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardBases = append(m.RewardBases, RewardTracker{})
			if err := m.RewardBases[len(m.RewardBases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAccumulators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAccumulators = append(m.RewardAccumulators, RewardAccumulator{})
			if err := m.RewardAccumulators[len(m.RewardAccumulators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unbondings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unbondings = append(m.Unbondings, Unbonding{})
			if err := m.Unbondings[len(m.Unbondings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tier", wireType)
			}
			m.Tier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tier |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingReward = append(m.PendingReward, types.Coin{})
			if err := m.PendingReward[len(m.PendingReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tier", wireType)
			}
			m.Tier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tier |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardTracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardTracker = append(m.RewardTracker, types.DecCoin{})
			if err := m.RewardTracker[len(m.RewardTracker)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardAccumulator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardAccumulator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardAccumulator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tier", wireType)
			}
			m.Tier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tier |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardTracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardTracker = append(m.RewardTracker, types.DecCoin{})
			if err := m.RewardTracker[len(m.RewardTracker)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Unbonding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Unbonding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Unbonding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tier", wireType)
			}
			m.Tier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tier |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
