// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/incentive/v1/query.proto

package incentive

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParams defines the request structure for the Params gRPC service
// handler.
type QueryParams struct {
}

func (m *QueryParams) Reset()         { *m = QueryParams{} }
func (m *QueryParams) String() string { return proto.CompactTextString(m) }
func (*QueryParams) ProtoMessage()    {}
func (*QueryParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{0}
}
func (m *QueryParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParams.Merge(m, src)
}
func (m *QueryParams) XXX_Size() int {
	return m.Size()
}
func (m *QueryParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParams proto.InternalMessageInfo

// QueryParamsResponse defines the response structure for the Params gRPC
// service handler.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryUpcomingIncentivePrograms defines the request structure for the
// OngoingIncentivePrograms and UpcomingIncentivePrograms gRPC service handlers.
type QueryUpcomingIncentivePrograms struct {
}

func (m *QueryUpcomingIncentivePrograms) Reset()         { *m = QueryUpcomingIncentivePrograms{} }
func (m *QueryUpcomingIncentivePrograms) String() string { return proto.CompactTextString(m) }
func (*QueryUpcomingIncentivePrograms) ProtoMessage()    {}
func (*QueryUpcomingIncentivePrograms) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{2}
}
func (m *QueryUpcomingIncentivePrograms) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUpcomingIncentivePrograms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUpcomingIncentivePrograms.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUpcomingIncentivePrograms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUpcomingIncentivePrograms.Merge(m, src)
}
func (m *QueryUpcomingIncentivePrograms) XXX_Size() int {
	return m.Size()
}
func (m *QueryUpcomingIncentivePrograms) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUpcomingIncentivePrograms.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUpcomingIncentivePrograms proto.InternalMessageInfo

// QueryUpcomingIncentiveProgramsResponse defines the response structure for the
// OngoingIncentivePrograms and UpcomingIncentivePrograms gRPC service handlers.
type QueryUpcomingIncentiveProgramsResponse struct {
	Programs []IncentiveProgram `protobuf:"bytes,1,rep,name=programs,proto3" json:"programs"`
}

func (m *QueryUpcomingIncentiveProgramsResponse) Reset() {
	*m = QueryUpcomingIncentiveProgramsResponse{}
}
func (m *QueryUpcomingIncentiveProgramsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUpcomingIncentiveProgramsResponse) ProtoMessage()    {}
func (*QueryUpcomingIncentiveProgramsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{3}
}
func (m *QueryUpcomingIncentiveProgramsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUpcomingIncentiveProgramsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUpcomingIncentiveProgramsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUpcomingIncentiveProgramsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUpcomingIncentiveProgramsResponse.Merge(m, src)
}
func (m *QueryUpcomingIncentiveProgramsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUpcomingIncentiveProgramsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUpcomingIncentiveProgramsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUpcomingIncentiveProgramsResponse proto.InternalMessageInfo

func (m *QueryUpcomingIncentiveProgramsResponse) GetPrograms() []IncentiveProgram {
	if m != nil {
		return m.Programs
	}
	return nil
}

// QueryOngoingIncentivePrograms defines the request structure for the
// OngoingIncentivePrograms and UpcomingIncentivePrograms gRPC service handlers.
type QueryOngoingIncentivePrograms struct {
}

func (m *QueryOngoingIncentivePrograms) Reset()         { *m = QueryOngoingIncentivePrograms{} }
func (m *QueryOngoingIncentivePrograms) String() string { return proto.CompactTextString(m) }
func (*QueryOngoingIncentivePrograms) ProtoMessage()    {}
func (*QueryOngoingIncentivePrograms) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{4}
}
func (m *QueryOngoingIncentivePrograms) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOngoingIncentivePrograms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOngoingIncentivePrograms.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOngoingIncentivePrograms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOngoingIncentivePrograms.Merge(m, src)
}
func (m *QueryOngoingIncentivePrograms) XXX_Size() int {
	return m.Size()
}
func (m *QueryOngoingIncentivePrograms) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOngoingIncentivePrograms.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOngoingIncentivePrograms proto.InternalMessageInfo

// QueryOngoingIncentiveProgramsResponse defines the response structure for the
// OngoingIncentivePrograms and UpcomingIncentivePrograms gRPC service handlers.
type QueryOngoingIncentiveProgramsResponse struct {
	Programs []IncentiveProgram `protobuf:"bytes,1,rep,name=programs,proto3" json:"programs"`
}

func (m *QueryOngoingIncentiveProgramsResponse) Reset()         { *m = QueryOngoingIncentiveProgramsResponse{} }
func (m *QueryOngoingIncentiveProgramsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOngoingIncentiveProgramsResponse) ProtoMessage()    {}
func (*QueryOngoingIncentiveProgramsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{5}
}
func (m *QueryOngoingIncentiveProgramsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOngoingIncentiveProgramsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOngoingIncentiveProgramsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOngoingIncentiveProgramsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOngoingIncentiveProgramsResponse.Merge(m, src)
}
func (m *QueryOngoingIncentiveProgramsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOngoingIncentiveProgramsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOngoingIncentiveProgramsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOngoingIncentiveProgramsResponse proto.InternalMessageInfo

func (m *QueryOngoingIncentiveProgramsResponse) GetPrograms() []IncentiveProgram {
	if m != nil {
		return m.Programs
	}
	return nil
}

// QueryCompletedIncentivePrograms defines the request structure for the
// CompletedIncentivePrograms gRPC service handler.
type QueryCompletedIncentivePrograms struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCompletedIncentivePrograms) Reset()         { *m = QueryCompletedIncentivePrograms{} }
func (m *QueryCompletedIncentivePrograms) String() string { return proto.CompactTextString(m) }
func (*QueryCompletedIncentivePrograms) ProtoMessage()    {}
func (*QueryCompletedIncentivePrograms) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{6}
}
func (m *QueryCompletedIncentivePrograms) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCompletedIncentivePrograms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCompletedIncentivePrograms.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCompletedIncentivePrograms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCompletedIncentivePrograms.Merge(m, src)
}
func (m *QueryCompletedIncentivePrograms) XXX_Size() int {
	return m.Size()
}
func (m *QueryCompletedIncentivePrograms) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCompletedIncentivePrograms.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCompletedIncentivePrograms proto.InternalMessageInfo

func (m *QueryCompletedIncentivePrograms) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryCompletedIncentiveProgramsResponse defines the response structure for the
// CompletedIncentivePrograms gRPC service handler.
type QueryCompletedIncentiveProgramsResponse struct {
	Programs []IncentiveProgram `protobuf:"bytes,1,rep,name=programs,proto3" json:"programs"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCompletedIncentiveProgramsResponse) Reset() {
	*m = QueryCompletedIncentiveProgramsResponse{}
}
func (m *QueryCompletedIncentiveProgramsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCompletedIncentiveProgramsResponse) ProtoMessage()    {}
func (*QueryCompletedIncentiveProgramsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{7}
}
func (m *QueryCompletedIncentiveProgramsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCompletedIncentiveProgramsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCompletedIncentiveProgramsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCompletedIncentiveProgramsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCompletedIncentiveProgramsResponse.Merge(m, src)
}
func (m *QueryCompletedIncentiveProgramsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCompletedIncentiveProgramsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCompletedIncentiveProgramsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCompletedIncentiveProgramsResponse proto.InternalMessageInfo

func (m *QueryCompletedIncentiveProgramsResponse) GetPrograms() []IncentiveProgram {
	if m != nil {
		return m.Programs
	}
	return nil
}

func (m *QueryCompletedIncentiveProgramsResponse) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryIncentiveProgram defines the request structure for the IncentiveProgram
// gRPC service handler.
type QueryIncentiveProgram struct {
	// ID specifies which program to query for
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryIncentiveProgram) Reset()         { *m = QueryIncentiveProgram{} }
func (m *QueryIncentiveProgram) String() string { return proto.CompactTextString(m) }
func (*QueryIncentiveProgram) ProtoMessage()    {}
func (*QueryIncentiveProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{8}
}
func (m *QueryIncentiveProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentiveProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentiveProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentiveProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentiveProgram.Merge(m, src)
}
func (m *QueryIncentiveProgram) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentiveProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentiveProgram.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentiveProgram proto.InternalMessageInfo

func (m *QueryIncentiveProgram) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryIncentivePrograResponse defines the response structure for the
// IncentiveProgram gRPC service handler.
type QueryIncentiveProgramResponse struct {
	Program IncentiveProgram `protobuf:"bytes,1,opt,name=program,proto3" json:"program"`
}

func (m *QueryIncentiveProgramResponse) Reset()         { *m = QueryIncentiveProgramResponse{} }
func (m *QueryIncentiveProgramResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIncentiveProgramResponse) ProtoMessage()    {}
func (*QueryIncentiveProgramResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{9}
}
func (m *QueryIncentiveProgramResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentiveProgramResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentiveProgramResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentiveProgramResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentiveProgramResponse.Merge(m, src)
}
func (m *QueryIncentiveProgramResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentiveProgramResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentiveProgramResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentiveProgramResponse proto.InternalMessageInfo

func (m *QueryIncentiveProgramResponse) GetProgram() IncentiveProgram {
	if m != nil {
		return m.Program
	}
	return IncentiveProgram{}
}

func init() {
	proto.RegisterType((*QueryParams)(nil), "umeenetwork.umee.incentive.v1.QueryParams")
	proto.RegisterType((*QueryParamsResponse)(nil), "umeenetwork.umee.incentive.v1.QueryParamsResponse")
	proto.RegisterType((*QueryUpcomingIncentivePrograms)(nil), "umeenetwork.umee.incentive.v1.QueryUpcomingIncentivePrograms")
	proto.RegisterType((*QueryUpcomingIncentiveProgramsResponse)(nil), "umeenetwork.umee.incentive.v1.QueryUpcomingIncentiveProgramsResponse")
	proto.RegisterType((*QueryOngoingIncentivePrograms)(nil), "umeenetwork.umee.incentive.v1.QueryOngoingIncentivePrograms")
	proto.RegisterType((*QueryOngoingIncentiveProgramsResponse)(nil), "umeenetwork.umee.incentive.v1.QueryOngoingIncentiveProgramsResponse")
	proto.RegisterType((*QueryCompletedIncentivePrograms)(nil), "umeenetwork.umee.incentive.v1.QueryCompletedIncentivePrograms")
	proto.RegisterType((*QueryCompletedIncentiveProgramsResponse)(nil), "umeenetwork.umee.incentive.v1.QueryCompletedIncentiveProgramsResponse")
	proto.RegisterType((*QueryIncentiveProgram)(nil), "umeenetwork.umee.incentive.v1.QueryIncentiveProgram")
	proto.RegisterType((*QueryIncentiveProgramResponse)(nil), "umeenetwork.umee.incentive.v1.QueryIncentiveProgramResponse")
}

func init() { proto.RegisterFile("umee/incentive/v1/query.proto", fileDescriptor_98af6650734ce845) }

var fileDescriptor_98af6650734ce845 = []byte{
	// 619 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xcd, 0x6f, 0x12, 0x4f,
	0x18, 0xc7, 0x19, 0x7e, 0x3f, 0xa9, 0x79, 0x48, 0x8d, 0x19, 0x35, 0xa1, 0xab, 0x5d, 0xe8, 0x26,
	0x7d, 0xb1, 0x4d, 0x67, 0x5c, 0xea, 0xcb, 0xa5, 0x7a, 0x68, 0x6d, 0x13, 0x4f, 0xa5, 0x24, 0x5e,
	0x7a, 0x31, 0x0b, 0x4c, 0xd6, 0x89, 0xdd, 0x99, 0x2d, 0xbb, 0xe0, 0x4b, 0xe3, 0xc5, 0xab, 0x17,
	0x13, 0xff, 0x1a, 0xef, 0x1e, 0x7a, 0x6c, 0x62, 0x4c, 0xf4, 0xa0, 0x31, 0xa0, 0xff, 0x87, 0x61,
	0x76, 0x58, 0x08, 0x08, 0x6c, 0x20, 0xbd, 0x2d, 0x33, 0xcf, 0xf7, 0xfb, 0x7c, 0x3f, 0xbb, 0xcf,
	0x0c, 0xb0, 0xd8, 0xf0, 0x18, 0xa3, 0x5c, 0x54, 0x99, 0x08, 0x79, 0x93, 0xd1, 0xa6, 0x4d, 0x4f,
	0x1a, 0xac, 0xfe, 0x9a, 0xf8, 0x75, 0x19, 0x4a, 0xac, 0xb6, 0x05, 0x0b, 0x5f, 0xca, 0xfa, 0x0b,
	0xd2, 0x79, 0x26, 0x71, 0x29, 0x69, 0xda, 0xc6, 0x7a, 0x55, 0x06, 0x9e, 0x0c, 0x68, 0xc5, 0x09,
	0x58, 0xa4, 0xa3, 0x4d, 0xbb, 0xc2, 0x42, 0xc7, 0xa6, 0xbe, 0xe3, 0x72, 0xe1, 0x84, 0x5c, 0x8a,
	0xc8, 0xca, 0xb8, 0xe5, 0x4a, 0xe9, 0x1e, 0x33, 0xea, 0xf8, 0x9c, 0x3a, 0x42, 0xc8, 0x50, 0x6d,
	0x06, 0x7a, 0xf7, 0xba, 0x2b, 0x5d, 0xa9, 0x1e, 0x69, 0xe7, 0x49, 0xaf, 0x2e, 0x0d, 0xa7, 0xeb,
	0xf5, 0x57, 0x25, 0xd6, 0x3c, 0x64, 0x0f, 0x3b, 0x8d, 0x4b, 0x4e, 0xdd, 0xf1, 0x02, 0xeb, 0x08,
	0xae, 0xf5, 0xfd, 0x2c, 0xb3, 0xc0, 0x97, 0x22, 0x60, 0x78, 0x17, 0x32, 0xbe, 0x5a, 0xc9, 0xa1,
	0x02, 0x5a, 0xcb, 0x16, 0x97, 0xc9, 0x58, 0x30, 0x12, 0xc9, 0x77, 0xfe, 0x3f, 0xfb, 0x99, 0x4f,
	0x95, 0xb5, 0xd4, 0x2a, 0x80, 0xa9, 0xbc, 0x9f, 0xfa, 0x55, 0xe9, 0x71, 0xe1, 0x3e, 0xe9, 0x2a,
	0x4a, 0x75, 0xe9, 0xaa, 0x8a, 0x53, 0x58, 0x19, 0x5f, 0x11, 0x07, 0x3a, 0x84, 0xcb, 0xbe, 0x5e,
	0xcb, 0xa1, 0xc2, 0x7f, 0x6b, 0xd9, 0x22, 0x9d, 0x10, 0x69, 0xd0, 0x4b, 0x87, 0x8b, 0x6d, 0xac,
	0x3c, 0x2c, 0xaa, 0xe6, 0x07, 0xc2, 0x95, 0xff, 0x4c, 0xf7, 0x06, 0x96, 0xc7, 0x16, 0x5c, 0x64,
	0x38, 0x0e, 0x79, 0xd5, 0x7b, 0x57, 0x7a, 0xfe, 0x31, 0x0b, 0x59, 0x6d, 0xa8, 0x3b, 0xde, 0x07,
	0xe8, 0x0d, 0x8d, 0xfe, 0x4e, 0x2b, 0x24, 0x9a, 0x30, 0xd2, 0x99, 0x30, 0x12, 0x4d, 0xa6, 0x9e,
	0x30, 0x52, 0x72, 0x5c, 0x56, 0x66, 0x27, 0x0d, 0x16, 0x84, 0xe5, 0x3e, 0xa5, 0xf5, 0x19, 0xc1,
	0xea, 0x84, 0x5e, 0x17, 0x48, 0x3a, 0x80, 0x91, 0x9e, 0x1a, 0x63, 0x15, 0x6e, 0x28, 0x8a, 0xc1,
	0x86, 0xf8, 0x0a, 0xa4, 0x79, 0x4d, 0xbd, 0x9f, 0xf9, 0x72, 0x9a, 0xd7, 0x2c, 0x5f, 0x7f, 0xf7,
	0xc1, 0xc2, 0x18, 0xf2, 0x00, 0xe6, 0x74, 0x3a, 0xfd, 0x56, 0xa7, 0x64, 0xec, 0xba, 0x14, 0xff,
	0xcc, 0xc1, 0x25, 0xd5, 0x12, 0xbf, 0x47, 0x90, 0x89, 0xce, 0x0a, 0x5e, 0x9f, 0x60, 0xda, 0x77,
	0x2c, 0x8d, 0x62, 0xf2, 0xda, 0x2e, 0x85, 0xb5, 0xf4, 0xee, 0xcb, 0xef, 0x8f, 0xe9, 0x9b, 0x78,
	0x81, 0x0e, 0x5f, 0x0a, 0xd1, 0x01, 0xc5, 0x3f, 0x10, 0x18, 0x63, 0x06, 0xec, 0x51, 0x92, 0xae,
	0xa3, 0xf5, 0xc6, 0xfe, 0x6c, 0xfa, 0x98, 0xe4, 0x81, 0x22, 0xb1, 0x31, 0xa5, 0x63, 0xae, 0xb7,
	0x67, 0xdd, 0x81, 0xa2, 0xd5, 0xae, 0x23, 0xfe, 0x8a, 0x20, 0x37, 0xea, 0xf0, 0xe2, 0xed, 0x24,
	0xe9, 0x46, 0xa9, 0x8d, 0xc7, 0xb3, 0xa8, 0x63, 0xb2, 0x7b, 0x8a, 0x8c, 0xe2, 0xcd, 0x64, 0x64,
	0x32, 0xf2, 0xc3, 0xdf, 0x11, 0x2c, 0x8c, 0xbc, 0x32, 0xf1, 0xc3, 0x24, 0xd1, 0x46, 0xca, 0x8d,
	0xbd, 0x99, 0xe4, 0x31, 0xda, 0x7d, 0x85, 0x76, 0x07, 0x93, 0x64, 0x68, 0x0d, 0x6d, 0x88, 0x3f,
	0x21, 0xb8, 0x3a, 0x74, 0x84, 0xef, 0x26, 0xc9, 0x34, 0xa8, 0x32, 0xb6, 0xa7, 0x51, 0xc5, 0x00,
	0xb6, 0x02, 0xd8, 0xc0, 0xb7, 0x93, 0x00, 0xd0, 0x53, 0x5e, 0x7b, 0xbb, 0xb3, 0x77, 0xd6, 0x32,
	0xd1, 0x79, 0xcb, 0x44, 0xbf, 0x5a, 0x26, 0xfa, 0xd0, 0x36, 0x53, 0xe7, 0x6d, 0x33, 0xf5, 0xad,
	0x6d, 0xa6, 0x8e, 0x36, 0x5c, 0x1e, 0x3e, 0x6f, 0x54, 0x48, 0x55, 0x7a, 0xca, 0x6e, 0x53, 0xa7,
	0x8a, 0xbc, 0x9b, 0x5b, 0xf4, 0x55, 0xcf, 0xb3, 0x92, 0x51, 0xff, 0xd4, 0x5b, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xbd, 0xeb, 0x06, 0x44, 0x6c, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the x/incentive module.
	Params(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// CompletedIncentivePrograms queries for all incentives programs that have been passed
	// by governance, and either run to completion or expired immediately due to not being funded.
	CompletedIncentivePrograms(ctx context.Context, in *QueryCompletedIncentivePrograms, opts ...grpc.CallOption) (*QueryCompletedIncentiveProgramsResponse, error)
	// OngoingIncentivePrograms queries for all incentives programs that have been passed
	// by governance, funded, and started but not yet completed.
	OngoingIncentivePrograms(ctx context.Context, in *QueryOngoingIncentivePrograms, opts ...grpc.CallOption) (*QueryOngoingIncentiveProgramsResponse, error)
	// UpcomingIncentivePrograms queries for all incentives programs that have been passed
	// by governance, but not yet started. They may or may not have been funded.
	UpcomingIncentivePrograms(ctx context.Context, in *QueryUpcomingIncentivePrograms, opts ...grpc.CallOption) (*QueryUpcomingIncentiveProgramsResponse, error)
	// IncentiveProgram queries a single incentive program by ID.
	IncentiveProgram(ctx context.Context, in *QueryIncentiveProgram, opts ...grpc.CallOption) (*QueryIncentiveProgramResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.incentive.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CompletedIncentivePrograms(ctx context.Context, in *QueryCompletedIncentivePrograms, opts ...grpc.CallOption) (*QueryCompletedIncentiveProgramsResponse, error) {
	out := new(QueryCompletedIncentiveProgramsResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.incentive.v1.Query/CompletedIncentivePrograms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OngoingIncentivePrograms(ctx context.Context, in *QueryOngoingIncentivePrograms, opts ...grpc.CallOption) (*QueryOngoingIncentiveProgramsResponse, error) {
	out := new(QueryOngoingIncentiveProgramsResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.incentive.v1.Query/OngoingIncentivePrograms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UpcomingIncentivePrograms(ctx context.Context, in *QueryUpcomingIncentivePrograms, opts ...grpc.CallOption) (*QueryUpcomingIncentiveProgramsResponse, error) {
	out := new(QueryUpcomingIncentiveProgramsResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.incentive.v1.Query/UpcomingIncentivePrograms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IncentiveProgram(ctx context.Context, in *QueryIncentiveProgram, opts ...grpc.CallOption) (*QueryIncentiveProgramResponse, error) {
	out := new(QueryIncentiveProgramResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.incentive.v1.Query/IncentiveProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the x/incentive module.
	Params(context.Context, *QueryParams) (*QueryParamsResponse, error)
	// CompletedIncentivePrograms queries for all incentives programs that have been passed
	// by governance, and either run to completion or expired immediately due to not being funded.
	CompletedIncentivePrograms(context.Context, *QueryCompletedIncentivePrograms) (*QueryCompletedIncentiveProgramsResponse, error)
	// OngoingIncentivePrograms queries for all incentives programs that have been passed
	// by governance, funded, and started but not yet completed.
	OngoingIncentivePrograms(context.Context, *QueryOngoingIncentivePrograms) (*QueryOngoingIncentiveProgramsResponse, error)
	// UpcomingIncentivePrograms queries for all incentives programs that have been passed
	// by governance, but not yet started. They may or may not have been funded.
	UpcomingIncentivePrograms(context.Context, *QueryUpcomingIncentivePrograms) (*QueryUpcomingIncentiveProgramsResponse, error)
	// IncentiveProgram queries a single incentive program by ID.
	IncentiveProgram(context.Context, *QueryIncentiveProgram) (*QueryIncentiveProgramResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParams) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CompletedIncentivePrograms(ctx context.Context, req *QueryCompletedIncentivePrograms) (*QueryCompletedIncentiveProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletedIncentivePrograms not implemented")
}
func (*UnimplementedQueryServer) OngoingIncentivePrograms(ctx context.Context, req *QueryOngoingIncentivePrograms) (*QueryOngoingIncentiveProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OngoingIncentivePrograms not implemented")
}
func (*UnimplementedQueryServer) UpcomingIncentivePrograms(ctx context.Context, req *QueryUpcomingIncentivePrograms) (*QueryUpcomingIncentiveProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpcomingIncentivePrograms not implemented")
}
func (*UnimplementedQueryServer) IncentiveProgram(ctx context.Context, req *QueryIncentiveProgram) (*QueryIncentiveProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncentiveProgram not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.incentive.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CompletedIncentivePrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCompletedIncentivePrograms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CompletedIncentivePrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.incentive.v1.Query/CompletedIncentivePrograms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CompletedIncentivePrograms(ctx, req.(*QueryCompletedIncentivePrograms))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OngoingIncentivePrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOngoingIncentivePrograms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OngoingIncentivePrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.incentive.v1.Query/OngoingIncentivePrograms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OngoingIncentivePrograms(ctx, req.(*QueryOngoingIncentivePrograms))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UpcomingIncentivePrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUpcomingIncentivePrograms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UpcomingIncentivePrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.incentive.v1.Query/UpcomingIncentivePrograms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UpcomingIncentivePrograms(ctx, req.(*QueryUpcomingIncentivePrograms))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IncentiveProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIncentiveProgram)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IncentiveProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.incentive.v1.Query/IncentiveProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IncentiveProgram(ctx, req.(*QueryIncentiveProgram))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "umeenetwork.umee.incentive.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CompletedIncentivePrograms",
			Handler:    _Query_CompletedIncentivePrograms_Handler,
		},
		{
			MethodName: "OngoingIncentivePrograms",
			Handler:    _Query_OngoingIncentivePrograms_Handler,
		},
		{
			MethodName: "UpcomingIncentivePrograms",
			Handler:    _Query_UpcomingIncentivePrograms_Handler,
		},
		{
			MethodName: "IncentiveProgram",
			Handler:    _Query_IncentiveProgram_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "umee/incentive/v1/query.proto",
}

func (m *QueryParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUpcomingIncentivePrograms) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUpcomingIncentivePrograms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUpcomingIncentivePrograms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryUpcomingIncentiveProgramsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUpcomingIncentiveProgramsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUpcomingIncentiveProgramsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Programs) > 0 {
		for iNdEx := len(m.Programs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Programs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOngoingIncentivePrograms) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOngoingIncentivePrograms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOngoingIncentivePrograms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOngoingIncentiveProgramsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOngoingIncentiveProgramsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOngoingIncentiveProgramsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Programs) > 0 {
		for iNdEx := len(m.Programs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Programs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCompletedIncentivePrograms) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCompletedIncentivePrograms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCompletedIncentivePrograms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCompletedIncentiveProgramsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCompletedIncentiveProgramsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCompletedIncentiveProgramsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Programs) > 0 {
		for iNdEx := len(m.Programs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Programs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIncentiveProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentiveProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentiveProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIncentiveProgramResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentiveProgramResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentiveProgramResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Program.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUpcomingIncentivePrograms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryUpcomingIncentiveProgramsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Programs) > 0 {
		for _, e := range m.Programs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOngoingIncentivePrograms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOngoingIncentiveProgramsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Programs) > 0 {
		for _, e := range m.Programs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCompletedIncentivePrograms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCompletedIncentiveProgramsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Programs) > 0 {
		for _, e := range m.Programs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIncentiveProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryIncentiveProgramResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Program.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUpcomingIncentivePrograms) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUpcomingIncentivePrograms: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUpcomingIncentivePrograms: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUpcomingIncentiveProgramsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUpcomingIncentiveProgramsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUpcomingIncentiveProgramsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Programs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Programs = append(m.Programs, IncentiveProgram{})
			if err := m.Programs[len(m.Programs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOngoingIncentivePrograms) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOngoingIncentivePrograms: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOngoingIncentivePrograms: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOngoingIncentiveProgramsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOngoingIncentiveProgramsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOngoingIncentiveProgramsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Programs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Programs = append(m.Programs, IncentiveProgram{})
			if err := m.Programs[len(m.Programs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCompletedIncentivePrograms) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCompletedIncentivePrograms: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCompletedIncentivePrograms: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCompletedIncentiveProgramsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCompletedIncentiveProgramsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCompletedIncentiveProgramsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Programs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Programs = append(m.Programs, IncentiveProgram{})
			if err := m.Programs[len(m.Programs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentiveProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentiveProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentiveProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentiveProgramResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentiveProgramResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentiveProgramResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Program.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
