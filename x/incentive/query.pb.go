// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/incentive/v1/query.proto

package incentive

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParams defines the request structure for the Params gRPC service
// handler.
type QueryParams struct {
}

func (m *QueryParams) Reset()         { *m = QueryParams{} }
func (m *QueryParams) String() string { return proto.CompactTextString(m) }
func (*QueryParams) ProtoMessage()    {}
func (*QueryParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{0}
}
func (m *QueryParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParams.Merge(m, src)
}
func (m *QueryParams) XXX_Size() int {
	return m.Size()
}
func (m *QueryParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParams proto.InternalMessageInfo

// QueryParamsResponse defines the response structure for the Params gRPC
// service handler.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryPendingRewards defines the request structure for the PendingRewards gRPC service handler.
type QueryPendingRewards struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryPendingRewards) Reset()         { *m = QueryPendingRewards{} }
func (m *QueryPendingRewards) String() string { return proto.CompactTextString(m) }
func (*QueryPendingRewards) ProtoMessage()    {}
func (*QueryPendingRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{2}
}
func (m *QueryPendingRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingRewards.Merge(m, src)
}
func (m *QueryPendingRewards) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingRewards.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingRewards proto.InternalMessageInfo

func (m *QueryPendingRewards) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryPendingRewardsResponse defines the response structure for the PendingRewards gRPC service handler.
type QueryPendingRewardsResponse struct {
	Rewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewards"`
}

func (m *QueryPendingRewardsResponse) Reset()         { *m = QueryPendingRewardsResponse{} }
func (m *QueryPendingRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingRewardsResponse) ProtoMessage()    {}
func (*QueryPendingRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{3}
}
func (m *QueryPendingRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingRewardsResponse.Merge(m, src)
}
func (m *QueryPendingRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingRewardsResponse proto.InternalMessageInfo

func (m *QueryPendingRewardsResponse) GetRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// QueryBonded defines the request structure for the Bonded gRPC service handler.
type QueryBonded struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// denom is an optional field which causes the query to return the totals of only one uToken
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryBonded) Reset()         { *m = QueryBonded{} }
func (m *QueryBonded) String() string { return proto.CompactTextString(m) }
func (*QueryBonded) ProtoMessage()    {}
func (*QueryBonded) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{4}
}
func (m *QueryBonded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBonded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBonded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBonded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBonded.Merge(m, src)
}
func (m *QueryBonded) XXX_Size() int {
	return m.Size()
}
func (m *QueryBonded) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBonded.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBonded proto.InternalMessageInfo

func (m *QueryBonded) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryBonded) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryBondedResponse defines the response structure for the Bonded gRPC service handler.
type QueryBondedResponse struct {
	Bonded []TotalBond `protobuf:"bytes,1,rep,name=bonded,proto3" json:"bonded"`
}

func (m *QueryBondedResponse) Reset()         { *m = QueryBondedResponse{} }
func (m *QueryBondedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBondedResponse) ProtoMessage()    {}
func (*QueryBondedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{5}
}
func (m *QueryBondedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBondedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBondedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBondedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBondedResponse.Merge(m, src)
}
func (m *QueryBondedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBondedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBondedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBondedResponse proto.InternalMessageInfo

func (m *QueryBondedResponse) GetBonded() []TotalBond {
	if m != nil {
		return m.Bonded
	}
	return nil
}

// QueryUnbondings defines the request structure for the Unbondings gRPC service handler.
type QueryUnbondings struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryUnbondings) Reset()         { *m = QueryUnbondings{} }
func (m *QueryUnbondings) String() string { return proto.CompactTextString(m) }
func (*QueryUnbondings) ProtoMessage()    {}
func (*QueryUnbondings) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{6}
}
func (m *QueryUnbondings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnbondings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnbondings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnbondings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnbondings.Merge(m, src)
}
func (m *QueryUnbondings) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnbondings) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnbondings.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnbondings proto.InternalMessageInfo

func (m *QueryUnbondings) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryUnbondingsResponse defines the response structure for the Unbondings gRPC service handler.
type QueryUnbondingsResponse struct {
	Unbondings []Unbonding `protobuf:"bytes,1,rep,name=unbondings,proto3" json:"unbondings"`
}

func (m *QueryUnbondingsResponse) Reset()         { *m = QueryUnbondingsResponse{} }
func (m *QueryUnbondingsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUnbondingsResponse) ProtoMessage()    {}
func (*QueryUnbondingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{7}
}
func (m *QueryUnbondingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnbondingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnbondingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnbondingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnbondingsResponse.Merge(m, src)
}
func (m *QueryUnbondingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnbondingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnbondingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnbondingsResponse proto.InternalMessageInfo

func (m *QueryUnbondingsResponse) GetUnbondings() []Unbonding {
	if m != nil {
		return m.Unbondings
	}
	return nil
}

// QueryTotalBonded defines the request structure for the TotalBonded gRPC service handler.
type QueryTotalBonded struct {
	// denom is an optional field which causes the query to return the totals of only one uToken
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryTotalBonded) Reset()         { *m = QueryTotalBonded{} }
func (m *QueryTotalBonded) String() string { return proto.CompactTextString(m) }
func (*QueryTotalBonded) ProtoMessage()    {}
func (*QueryTotalBonded) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{8}
}
func (m *QueryTotalBonded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalBonded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalBonded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalBonded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalBonded.Merge(m, src)
}
func (m *QueryTotalBonded) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalBonded) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalBonded.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalBonded proto.InternalMessageInfo

func (m *QueryTotalBonded) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryTotalBondedResponse defines the response structure for the TotalBonded gRPC service handler.
type QueryTotalBondedResponse struct {
	Bonded []TotalBond `protobuf:"bytes,1,rep,name=bonded,proto3" json:"bonded"`
}

func (m *QueryTotalBondedResponse) Reset()         { *m = QueryTotalBondedResponse{} }
func (m *QueryTotalBondedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalBondedResponse) ProtoMessage()    {}
func (*QueryTotalBondedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{9}
}
func (m *QueryTotalBondedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalBondedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalBondedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalBondedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalBondedResponse.Merge(m, src)
}
func (m *QueryTotalBondedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalBondedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalBondedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalBondedResponse proto.InternalMessageInfo

func (m *QueryTotalBondedResponse) GetBonded() []TotalBond {
	if m != nil {
		return m.Bonded
	}
	return nil
}

// QueryTotalUnbonding defines the request structure for the TotalUnbonding gRPC service handler.
type QueryTotalUnbonding struct {
	// denom is an optional field which causes the query to return the totals of only one uToken
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryTotalUnbonding) Reset()         { *m = QueryTotalUnbonding{} }
func (m *QueryTotalUnbonding) String() string { return proto.CompactTextString(m) }
func (*QueryTotalUnbonding) ProtoMessage()    {}
func (*QueryTotalUnbonding) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{10}
}
func (m *QueryTotalUnbonding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalUnbonding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalUnbonding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalUnbonding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalUnbonding.Merge(m, src)
}
func (m *QueryTotalUnbonding) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalUnbonding) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalUnbonding.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalUnbonding proto.InternalMessageInfo

func (m *QueryTotalUnbonding) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryTotalUnbondingResponse defines the response structure for the TotalUnbonding gRPC service handler.
type QueryTotalUnbondingResponse struct {
	Unbonding []TotalBond `protobuf:"bytes,1,rep,name=unbonding,proto3" json:"unbonding"`
}

func (m *QueryTotalUnbondingResponse) Reset()         { *m = QueryTotalUnbondingResponse{} }
func (m *QueryTotalUnbondingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalUnbondingResponse) ProtoMessage()    {}
func (*QueryTotalUnbondingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{11}
}
func (m *QueryTotalUnbondingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalUnbondingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalUnbondingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalUnbondingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalUnbondingResponse.Merge(m, src)
}
func (m *QueryTotalUnbondingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalUnbondingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalUnbondingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalUnbondingResponse proto.InternalMessageInfo

func (m *QueryTotalUnbondingResponse) GetUnbonding() []TotalBond {
	if m != nil {
		return m.Unbonding
	}
	return nil
}

// QueryUpcomingIncentivePrograms defines the request structure for the
// OngoingIncentivePrograms and UpcomingIncentivePrograms gRPC service handlers.
type QueryUpcomingIncentivePrograms struct {
}

func (m *QueryUpcomingIncentivePrograms) Reset()         { *m = QueryUpcomingIncentivePrograms{} }
func (m *QueryUpcomingIncentivePrograms) String() string { return proto.CompactTextString(m) }
func (*QueryUpcomingIncentivePrograms) ProtoMessage()    {}
func (*QueryUpcomingIncentivePrograms) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{12}
}
func (m *QueryUpcomingIncentivePrograms) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUpcomingIncentivePrograms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUpcomingIncentivePrograms.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUpcomingIncentivePrograms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUpcomingIncentivePrograms.Merge(m, src)
}
func (m *QueryUpcomingIncentivePrograms) XXX_Size() int {
	return m.Size()
}
func (m *QueryUpcomingIncentivePrograms) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUpcomingIncentivePrograms.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUpcomingIncentivePrograms proto.InternalMessageInfo

// QueryUpcomingIncentiveProgramsResponse defines the response structure for the
// OngoingIncentivePrograms and UpcomingIncentivePrograms gRPC service handlers.
type QueryUpcomingIncentiveProgramsResponse struct {
	Programs []IncentiveProgram `protobuf:"bytes,1,rep,name=programs,proto3" json:"programs"`
}

func (m *QueryUpcomingIncentiveProgramsResponse) Reset() {
	*m = QueryUpcomingIncentiveProgramsResponse{}
}
func (m *QueryUpcomingIncentiveProgramsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUpcomingIncentiveProgramsResponse) ProtoMessage()    {}
func (*QueryUpcomingIncentiveProgramsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{13}
}
func (m *QueryUpcomingIncentiveProgramsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUpcomingIncentiveProgramsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUpcomingIncentiveProgramsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUpcomingIncentiveProgramsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUpcomingIncentiveProgramsResponse.Merge(m, src)
}
func (m *QueryUpcomingIncentiveProgramsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUpcomingIncentiveProgramsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUpcomingIncentiveProgramsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUpcomingIncentiveProgramsResponse proto.InternalMessageInfo

func (m *QueryUpcomingIncentiveProgramsResponse) GetPrograms() []IncentiveProgram {
	if m != nil {
		return m.Programs
	}
	return nil
}

// QueryOngoingIncentivePrograms defines the request structure for the
// OngoingIncentivePrograms and UpcomingIncentivePrograms gRPC service handlers.
type QueryOngoingIncentivePrograms struct {
}

func (m *QueryOngoingIncentivePrograms) Reset()         { *m = QueryOngoingIncentivePrograms{} }
func (m *QueryOngoingIncentivePrograms) String() string { return proto.CompactTextString(m) }
func (*QueryOngoingIncentivePrograms) ProtoMessage()    {}
func (*QueryOngoingIncentivePrograms) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{14}
}
func (m *QueryOngoingIncentivePrograms) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOngoingIncentivePrograms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOngoingIncentivePrograms.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOngoingIncentivePrograms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOngoingIncentivePrograms.Merge(m, src)
}
func (m *QueryOngoingIncentivePrograms) XXX_Size() int {
	return m.Size()
}
func (m *QueryOngoingIncentivePrograms) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOngoingIncentivePrograms.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOngoingIncentivePrograms proto.InternalMessageInfo

// QueryOngoingIncentiveProgramsResponse defines the response structure for the
// OngoingIncentivePrograms and UpcomingIncentivePrograms gRPC service handlers.
type QueryOngoingIncentiveProgramsResponse struct {
	Programs []IncentiveProgram `protobuf:"bytes,1,rep,name=programs,proto3" json:"programs"`
}

func (m *QueryOngoingIncentiveProgramsResponse) Reset()         { *m = QueryOngoingIncentiveProgramsResponse{} }
func (m *QueryOngoingIncentiveProgramsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOngoingIncentiveProgramsResponse) ProtoMessage()    {}
func (*QueryOngoingIncentiveProgramsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{15}
}
func (m *QueryOngoingIncentiveProgramsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOngoingIncentiveProgramsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOngoingIncentiveProgramsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOngoingIncentiveProgramsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOngoingIncentiveProgramsResponse.Merge(m, src)
}
func (m *QueryOngoingIncentiveProgramsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOngoingIncentiveProgramsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOngoingIncentiveProgramsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOngoingIncentiveProgramsResponse proto.InternalMessageInfo

func (m *QueryOngoingIncentiveProgramsResponse) GetPrograms() []IncentiveProgram {
	if m != nil {
		return m.Programs
	}
	return nil
}

// QueryCompletedIncentivePrograms defines the request structure for the
// CompletedIncentivePrograms gRPC service handler.
type QueryCompletedIncentivePrograms struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCompletedIncentivePrograms) Reset()         { *m = QueryCompletedIncentivePrograms{} }
func (m *QueryCompletedIncentivePrograms) String() string { return proto.CompactTextString(m) }
func (*QueryCompletedIncentivePrograms) ProtoMessage()    {}
func (*QueryCompletedIncentivePrograms) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{16}
}
func (m *QueryCompletedIncentivePrograms) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCompletedIncentivePrograms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCompletedIncentivePrograms.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCompletedIncentivePrograms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCompletedIncentivePrograms.Merge(m, src)
}
func (m *QueryCompletedIncentivePrograms) XXX_Size() int {
	return m.Size()
}
func (m *QueryCompletedIncentivePrograms) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCompletedIncentivePrograms.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCompletedIncentivePrograms proto.InternalMessageInfo

func (m *QueryCompletedIncentivePrograms) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryCompletedIncentiveProgramsResponse defines the response structure for the
// CompletedIncentivePrograms gRPC service handler.
type QueryCompletedIncentiveProgramsResponse struct {
	Programs []IncentiveProgram `protobuf:"bytes,1,rep,name=programs,proto3" json:"programs"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCompletedIncentiveProgramsResponse) Reset() {
	*m = QueryCompletedIncentiveProgramsResponse{}
}
func (m *QueryCompletedIncentiveProgramsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCompletedIncentiveProgramsResponse) ProtoMessage()    {}
func (*QueryCompletedIncentiveProgramsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{17}
}
func (m *QueryCompletedIncentiveProgramsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCompletedIncentiveProgramsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCompletedIncentiveProgramsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCompletedIncentiveProgramsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCompletedIncentiveProgramsResponse.Merge(m, src)
}
func (m *QueryCompletedIncentiveProgramsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCompletedIncentiveProgramsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCompletedIncentiveProgramsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCompletedIncentiveProgramsResponse proto.InternalMessageInfo

func (m *QueryCompletedIncentiveProgramsResponse) GetPrograms() []IncentiveProgram {
	if m != nil {
		return m.Programs
	}
	return nil
}

func (m *QueryCompletedIncentiveProgramsResponse) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryIncentiveProgram defines the request structure for the IncentiveProgram
// gRPC service handler.
type QueryIncentiveProgram struct {
	// ID specifies which program to query for
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryIncentiveProgram) Reset()         { *m = QueryIncentiveProgram{} }
func (m *QueryIncentiveProgram) String() string { return proto.CompactTextString(m) }
func (*QueryIncentiveProgram) ProtoMessage()    {}
func (*QueryIncentiveProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{18}
}
func (m *QueryIncentiveProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentiveProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentiveProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentiveProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentiveProgram.Merge(m, src)
}
func (m *QueryIncentiveProgram) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentiveProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentiveProgram.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentiveProgram proto.InternalMessageInfo

func (m *QueryIncentiveProgram) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryIncentivePrograResponse defines the response structure for the
// IncentiveProgram gRPC service handler.
type QueryIncentiveProgramResponse struct {
	Program IncentiveProgram `protobuf:"bytes,1,opt,name=program,proto3" json:"program"`
}

func (m *QueryIncentiveProgramResponse) Reset()         { *m = QueryIncentiveProgramResponse{} }
func (m *QueryIncentiveProgramResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIncentiveProgramResponse) ProtoMessage()    {}
func (*QueryIncentiveProgramResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98af6650734ce845, []int{19}
}
func (m *QueryIncentiveProgramResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentiveProgramResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentiveProgramResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentiveProgramResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentiveProgramResponse.Merge(m, src)
}
func (m *QueryIncentiveProgramResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentiveProgramResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentiveProgramResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentiveProgramResponse proto.InternalMessageInfo

func (m *QueryIncentiveProgramResponse) GetProgram() IncentiveProgram {
	if m != nil {
		return m.Program
	}
	return IncentiveProgram{}
}

func init() {
	proto.RegisterType((*QueryParams)(nil), "umeenetwork.umee.incentive.v1.QueryParams")
	proto.RegisterType((*QueryParamsResponse)(nil), "umeenetwork.umee.incentive.v1.QueryParamsResponse")
	proto.RegisterType((*QueryPendingRewards)(nil), "umeenetwork.umee.incentive.v1.QueryPendingRewards")
	proto.RegisterType((*QueryPendingRewardsResponse)(nil), "umeenetwork.umee.incentive.v1.QueryPendingRewardsResponse")
	proto.RegisterType((*QueryBonded)(nil), "umeenetwork.umee.incentive.v1.QueryBonded")
	proto.RegisterType((*QueryBondedResponse)(nil), "umeenetwork.umee.incentive.v1.QueryBondedResponse")
	proto.RegisterType((*QueryUnbondings)(nil), "umeenetwork.umee.incentive.v1.QueryUnbondings")
	proto.RegisterType((*QueryUnbondingsResponse)(nil), "umeenetwork.umee.incentive.v1.QueryUnbondingsResponse")
	proto.RegisterType((*QueryTotalBonded)(nil), "umeenetwork.umee.incentive.v1.QueryTotalBonded")
	proto.RegisterType((*QueryTotalBondedResponse)(nil), "umeenetwork.umee.incentive.v1.QueryTotalBondedResponse")
	proto.RegisterType((*QueryTotalUnbonding)(nil), "umeenetwork.umee.incentive.v1.QueryTotalUnbonding")
	proto.RegisterType((*QueryTotalUnbondingResponse)(nil), "umeenetwork.umee.incentive.v1.QueryTotalUnbondingResponse")
	proto.RegisterType((*QueryUpcomingIncentivePrograms)(nil), "umeenetwork.umee.incentive.v1.QueryUpcomingIncentivePrograms")
	proto.RegisterType((*QueryUpcomingIncentiveProgramsResponse)(nil), "umeenetwork.umee.incentive.v1.QueryUpcomingIncentiveProgramsResponse")
	proto.RegisterType((*QueryOngoingIncentivePrograms)(nil), "umeenetwork.umee.incentive.v1.QueryOngoingIncentivePrograms")
	proto.RegisterType((*QueryOngoingIncentiveProgramsResponse)(nil), "umeenetwork.umee.incentive.v1.QueryOngoingIncentiveProgramsResponse")
	proto.RegisterType((*QueryCompletedIncentivePrograms)(nil), "umeenetwork.umee.incentive.v1.QueryCompletedIncentivePrograms")
	proto.RegisterType((*QueryCompletedIncentiveProgramsResponse)(nil), "umeenetwork.umee.incentive.v1.QueryCompletedIncentiveProgramsResponse")
	proto.RegisterType((*QueryIncentiveProgram)(nil), "umeenetwork.umee.incentive.v1.QueryIncentiveProgram")
	proto.RegisterType((*QueryIncentiveProgramResponse)(nil), "umeenetwork.umee.incentive.v1.QueryIncentiveProgramResponse")
}

func init() { proto.RegisterFile("umee/incentive/v1/query.proto", fileDescriptor_98af6650734ce845) }

var fileDescriptor_98af6650734ce845 = []byte{
	// 1006 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x97, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0x33, 0x0b, 0xdd, 0xd0, 0x17, 0x35, 0x54, 0xd3, 0x22, 0x36, 0x2e, 0xdd, 0x4d, 0x2d,
	0xb5, 0xd9, 0x26, 0x8d, 0xa7, 0xbb, 0x0d, 0xad, 0x84, 0x5a, 0x0e, 0x09, 0x8d, 0x84, 0x84, 0x68,
	0xba, 0x82, 0x4b, 0x25, 0x14, 0x79, 0xd7, 0x23, 0x63, 0x25, 0x3b, 0xe3, 0xae, 0xbd, 0x5b, 0x4a,
	0x94, 0x0b, 0xe2, 0xc6, 0x05, 0x89, 0x33, 0x47, 0x24, 0xc4, 0x19, 0x21, 0x71, 0xe7, 0x90, 0x63,
	0x24, 0x84, 0x04, 0x07, 0x7e, 0x28, 0xe1, 0x0f, 0xa9, 0x3c, 0x33, 0x1e, 0x3b, 0xde, 0x1f, 0x99,
	0x24, 0xca, 0x29, 0xf6, 0xf8, 0x7d, 0xdf, 0xfb, 0x7c, 0x9f, 0xe3, 0x37, 0xb3, 0x70, 0xbd, 0xdf,
	0xa5, 0x94, 0x04, 0xac, 0x43, 0x59, 0x1c, 0x0c, 0x28, 0x19, 0x34, 0xc8, 0xf3, 0x3e, 0xed, 0xbd,
	0x74, 0xc2, 0x1e, 0x8f, 0x39, 0x16, 0x8f, 0x19, 0x8d, 0x5f, 0xf0, 0xde, 0x96, 0x93, 0x5c, 0x3b,
	0x3a, 0xd4, 0x19, 0x34, 0xac, 0xc5, 0x0e, 0x8f, 0xba, 0x3c, 0x22, 0x6d, 0x37, 0xa2, 0x52, 0x47,
	0x06, 0x8d, 0x36, 0x8d, 0xdd, 0x06, 0x09, 0x5d, 0x3f, 0x60, 0x6e, 0x1c, 0x70, 0x26, 0x53, 0x59,
	0xef, 0xf8, 0x9c, 0xfb, 0xdb, 0x94, 0xb8, 0x61, 0x40, 0x5c, 0xc6, 0x78, 0x2c, 0x1e, 0x46, 0xea,
	0xe9, 0x55, 0x9f, 0xfb, 0x5c, 0x5c, 0x92, 0xe4, 0x4a, 0xad, 0xde, 0x18, 0xa6, 0xcb, 0xea, 0xcb,
	0x90, 0xda, 0x70, 0x88, 0x4f, 0x19, 0x8d, 0x82, 0x34, 0x73, 0x35, 0xcf, 0x98, 0xd2, 0x75, 0x78,
	0xa0, 0xb8, 0xec, 0x4b, 0x30, 0xf3, 0x34, 0x21, 0xdf, 0x70, 0x7b, 0x6e, 0x37, 0xb2, 0x9f, 0xc1,
	0x95, 0xdc, 0x6d, 0x8b, 0x46, 0x21, 0x67, 0x11, 0xc5, 0x6b, 0x50, 0x0e, 0xc5, 0x4a, 0x05, 0xcd,
	0xa3, 0xfa, 0x4c, 0xf3, 0xa6, 0x33, 0xb1, 0x33, 0x8e, 0x94, 0xaf, 0xbe, 0xbe, 0xf7, 0x4f, 0x6d,
	0xaa, 0xa5, 0xa4, 0x36, 0x49, 0x73, 0x53, 0xe6, 0x05, 0xcc, 0x6f, 0xd1, 0x17, 0x6e, 0xcf, 0x8b,
	0x70, 0x05, 0xa6, 0x5d, 0xcf, 0xeb, 0xd1, 0x48, 0x26, 0xbf, 0xd8, 0x4a, 0x6f, 0xed, 0xaf, 0x11,
	0x5c, 0x1b, 0xa1, 0xd0, 0x54, 0x14, 0xa6, 0x7b, 0x72, 0xa9, 0x82, 0xe6, 0x5f, 0xab, 0xcf, 0x34,
	0xe7, 0x1c, 0xe9, 0xd6, 0x49, 0xdc, 0x3a, 0xca, 0xad, 0xb3, 0xc6, 0x03, 0xb6, 0x7a, 0x37, 0x41,
	0xf9, 0xe9, 0xdf, 0x5a, 0xdd, 0x0f, 0xe2, 0xcf, 0xfb, 0x6d, 0xa7, 0xc3, 0xbb, 0x44, 0xb5, 0x46,
	0xfe, 0x59, 0x8e, 0xbc, 0x2d, 0x12, 0xbf, 0x0c, 0x69, 0x24, 0x04, 0x51, 0x2b, 0xcd, 0x6d, 0x3f,
	0x52, 0x2d, 0x5a, 0xe5, 0xcc, 0xa3, 0xde, 0x78, 0x5e, 0x7c, 0x15, 0x2e, 0x78, 0x94, 0xf1, 0x6e,
	0xa5, 0x24, 0xd6, 0xe5, 0x8d, 0xfd, 0x99, 0xb2, 0x2d, 0xe5, 0x1a, 0x7e, 0x1d, 0xca, 0x6d, 0xb1,
	0xa2, 0xd8, 0xeb, 0xc7, 0xb4, 0xf4, 0x13, 0x1e, 0xbb, 0xdb, 0x49, 0x8e, 0xb4, 0xab, 0x52, 0x6d,
	0x2f, 0xc1, 0x9b, 0x22, 0xfd, 0xa7, 0x2c, 0x59, 0x08, 0x98, 0x3f, 0xa9, 0xa3, 0x01, 0xbc, 0x5d,
	0x08, 0xd6, 0x3c, 0x1f, 0x03, 0xf4, 0xf5, 0xaa, 0x21, 0x93, 0x4e, 0xa3, 0x98, 0x72, 0x19, 0xec,
	0x3a, 0x5c, 0x16, 0xa5, 0x34, 0x37, 0xf5, 0xb2, 0x06, 0xa1, 0x7c, 0x83, 0xda, 0x50, 0x29, 0x46,
	0x9e, 0x43, 0x97, 0xae, 0x64, 0x35, 0x34, 0xf6, 0x18, 0xa0, 0x2d, 0xf5, 0x6f, 0x77, 0x34, 0x58,
	0x33, 0x7d, 0x04, 0x17, 0xb5, 0xcf, 0x53, 0x62, 0x65, 0x09, 0xec, 0x79, 0xa8, 0xca, 0x57, 0x12,
	0x76, 0x78, 0x37, 0x60, 0xfe, 0x87, 0xa9, 0x6e, 0xa3, 0xc7, 0x7d, 0xf1, 0xdd, 0xec, 0xc0, 0xad,
	0xc9, 0x11, 0x9a, 0xec, 0x29, 0xbc, 0x11, 0xaa, 0x35, 0x05, 0x46, 0x8e, 0x01, 0x2b, 0xe6, 0x52,
	0x7c, 0x3a, 0x8d, 0x5d, 0x83, 0xeb, 0xa2, 0xf8, 0x13, 0xe6, 0xf3, 0x91, 0x74, 0x5f, 0xc2, 0xcd,
	0x89, 0x01, 0xe7, 0x09, 0x17, 0x40, 0x4d, 0xd4, 0x5e, 0xe3, 0xdd, 0x70, 0x9b, 0xc6, 0xd4, 0x1b,
	0xaa, 0x8e, 0xd7, 0x01, 0xb2, 0x59, 0xac, 0xa6, 0xd7, 0xad, 0x23, 0x63, 0x42, 0x0e, 0xfc, 0x74,
	0x58, 0x6c, 0xb8, 0x3e, 0x6d, 0xd1, 0xe7, 0x7d, 0x1a, 0xc5, 0xad, 0x9c, 0xd2, 0xfe, 0x0d, 0xc1,
	0xc2, 0x31, 0xb5, 0xce, 0xd1, 0x69, 0xc1, 0x46, 0xe9, 0xd4, 0x36, 0x16, 0xe0, 0x2d, 0xe1, 0xa2,
	0x58, 0x10, 0xcf, 0x42, 0x29, 0xf0, 0x44, 0x7f, 0x2e, 0xb5, 0x4a, 0x81, 0x67, 0x87, 0xea, 0xbd,
	0x17, 0x03, 0xb5, 0xc9, 0x27, 0x30, 0xad, 0xe8, 0x54, 0x57, 0x4f, 0xe9, 0x31, 0xcd, 0xd2, 0xdc,
	0x9b, 0x85, 0x0b, 0xa2, 0x24, 0xfe, 0x06, 0x41, 0x59, 0xee, 0x20, 0x78, 0xf1, 0x98, 0xa4, 0xb9,
	0xcd, 0xca, 0x6a, 0x9a, 0xc7, 0xa6, 0x2e, 0xec, 0x1b, 0x5f, 0xfd, 0xfe, 0xff, 0x77, 0xa5, 0x6b,
	0x78, 0x8e, 0x0c, 0x6f, 0xa4, 0x72, 0xdb, 0xc2, 0x3f, 0x22, 0x98, 0xc9, 0x0f, 0x31, 0x62, 0x52,
	0x26, 0x27, 0xb0, 0x1e, 0x9c, 0x50, 0xa0, 0xe1, 0x88, 0x80, 0xbb, 0x8d, 0x17, 0x46, 0xc0, 0xc5,
	0x49, 0xfc, 0xa6, 0x9c, 0x6e, 0x64, 0x47, 0xcc, 0xad, 0x5d, 0xfc, 0x33, 0x82, 0xd9, 0xc2, 0x84,
	0x6b, 0x1a, 0x17, 0xd7, 0x1a, 0xeb, 0xbd, 0x93, 0x6b, 0x34, 0x73, 0x53, 0x30, 0xdf, 0xc1, 0x8b,
	0x63, 0x99, 0xf5, 0xe8, 0xd3, 0xd8, 0xdf, 0x23, 0x28, 0xab, 0xe6, 0x1a, 0xbd, 0x6f, 0xd5, 0xd7,
	0xa6, 0x79, 0xac, 0xc6, 0xbb, 0x27, 0xf0, 0x96, 0xf1, 0xd2, 0x08, 0xbc, 0xb4, 0x99, 0x6a, 0xb3,
	0xdc, 0xd5, 0x7c, 0x3f, 0x20, 0x80, 0xdc, 0xf6, 0xea, 0x98, 0xd4, 0xcd, 0xe2, 0xad, 0xfb, 0x27,
	0x8b, 0x37, 0x7a, 0xfd, 0xd9, 0x46, 0x9b, 0xf1, 0xe2, 0x5f, 0x10, 0xcc, 0x16, 0x0e, 0x57, 0x66,
	0xdf, 0xc4, 0x11, 0x8d, 0xd9, 0xeb, 0x1f, 0x7d, 0x24, 0xb3, 0x57, 0x04, 0xb3, 0x83, 0xef, 0x8c,
	0xfa, 0x9e, 0xa4, 0x64, 0x53, 0x9d, 0xab, 0x72, 0xe0, 0x7f, 0x23, 0xb0, 0x26, 0xcc, 0xf0, 0xf7,
	0x4d, 0x80, 0xc6, 0xeb, 0xad, 0xf5, 0xb3, 0xe9, 0xb5, 0xb9, 0x07, 0xc2, 0x5c, 0x03, 0x13, 0x32,
	0xe1, 0x60, 0xbe, 0x99, 0xce, 0x6c, 0xd2, 0x49, 0x33, 0xe2, 0x3f, 0x10, 0x54, 0xc6, 0xed, 0x8f,
	0xf8, 0xa1, 0x09, 0xdd, 0x38, 0xb5, 0xf5, 0xc1, 0x59, 0xd4, 0xda, 0xd9, 0xbb, 0xc2, 0x19, 0xc1,
	0xcb, 0x66, 0xce, 0xb8, 0xcc, 0x87, 0xff, 0x42, 0x30, 0x37, 0xf6, 0x54, 0x82, 0x1f, 0x19, 0xfd,
	0xdf, 0x8f, 0x93, 0x5b, 0x8f, 0xcf, 0x24, 0xd7, 0xd6, 0xee, 0x0b, 0x6b, 0x77, 0xb1, 0x63, 0x66,
	0xad, 0xaf, 0x12, 0xe2, 0x5f, 0x11, 0x5c, 0x1e, 0xda, 0x25, 0x57, 0x4c, 0x98, 0x8a, 0x2a, 0xeb,
	0xe1, 0x69, 0x54, 0xda, 0x40, 0x43, 0x18, 0x58, 0xc2, 0xb7, 0x4d, 0x0c, 0x90, 0x9d, 0xc0, 0xdb,
	0x5d, 0x7d, 0xbc, 0x77, 0x50, 0x45, 0xfb, 0x07, 0x55, 0xf4, 0xdf, 0x41, 0x15, 0x7d, 0x7b, 0x58,
	0x9d, 0xda, 0x3f, 0xac, 0x4e, 0xfd, 0x79, 0x58, 0x9d, 0x7a, 0xb6, 0x94, 0xfb, 0xf9, 0x93, 0xa4,
	0x5b, 0x56, 0x54, 0x32, 0xf7, 0x60, 0x85, 0x7c, 0x91, 0xe5, 0x6c, 0x97, 0xc5, 0x4f, 0xc4, 0x7b,
	0xaf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x07, 0xae, 0x4f, 0xff, 0x26, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the x/incentive module.
	Params(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// TotalBonded queries the sum of all bonded collateral uTokens, separated by tier.
	TotalBonded(ctx context.Context, in *QueryTotalBonded, opts ...grpc.CallOption) (*QueryTotalBondedResponse, error)
	// TotalUnbonding queries the sum of all unbonding collateral uTokens, separated by tier.
	TotalUnbonding(ctx context.Context, in *QueryTotalUnbonding, opts ...grpc.CallOption) (*QueryTotalUnbondingResponse, error)
	// Bonded queries all bonded collateral uTokens associated with an account.
	Bonded(ctx context.Context, in *QueryBonded, opts ...grpc.CallOption) (*QueryBondedResponse, error)
	// Unbondings queries all current uToken unbondings associated with an account.
	Unbondings(ctx context.Context, in *QueryUnbondings, opts ...grpc.CallOption) (*QueryUnbondingsResponse, error)
	// PendingRewards queries unclaimed incentive rewards associated with an account.
	PendingRewards(ctx context.Context, in *QueryPendingRewards, opts ...grpc.CallOption) (*QueryPendingRewardsResponse, error)
	// CompletedIncentivePrograms queries for all incentives programs that have been passed
	// by governance, and either run to completion or expired immediately due to not being funded.
	CompletedIncentivePrograms(ctx context.Context, in *QueryCompletedIncentivePrograms, opts ...grpc.CallOption) (*QueryCompletedIncentiveProgramsResponse, error)
	// OngoingIncentivePrograms queries for all incentives programs that have been passed
	// by governance, funded, and started but not yet completed.
	OngoingIncentivePrograms(ctx context.Context, in *QueryOngoingIncentivePrograms, opts ...grpc.CallOption) (*QueryOngoingIncentiveProgramsResponse, error)
	// UpcomingIncentivePrograms queries for all incentives programs that have been passed
	// by governance, but not yet started. They may or may not have been funded.
	UpcomingIncentivePrograms(ctx context.Context, in *QueryUpcomingIncentivePrograms, opts ...grpc.CallOption) (*QueryUpcomingIncentiveProgramsResponse, error)
	// IncentiveProgram queries a single incentive program by ID.
	IncentiveProgram(ctx context.Context, in *QueryIncentiveProgram, opts ...grpc.CallOption) (*QueryIncentiveProgramResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.incentive.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalBonded(ctx context.Context, in *QueryTotalBonded, opts ...grpc.CallOption) (*QueryTotalBondedResponse, error) {
	out := new(QueryTotalBondedResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.incentive.v1.Query/TotalBonded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalUnbonding(ctx context.Context, in *QueryTotalUnbonding, opts ...grpc.CallOption) (*QueryTotalUnbondingResponse, error) {
	out := new(QueryTotalUnbondingResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.incentive.v1.Query/TotalUnbonding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Bonded(ctx context.Context, in *QueryBonded, opts ...grpc.CallOption) (*QueryBondedResponse, error) {
	out := new(QueryBondedResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.incentive.v1.Query/Bonded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Unbondings(ctx context.Context, in *QueryUnbondings, opts ...grpc.CallOption) (*QueryUnbondingsResponse, error) {
	out := new(QueryUnbondingsResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.incentive.v1.Query/Unbondings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingRewards(ctx context.Context, in *QueryPendingRewards, opts ...grpc.CallOption) (*QueryPendingRewardsResponse, error) {
	out := new(QueryPendingRewardsResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.incentive.v1.Query/PendingRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CompletedIncentivePrograms(ctx context.Context, in *QueryCompletedIncentivePrograms, opts ...grpc.CallOption) (*QueryCompletedIncentiveProgramsResponse, error) {
	out := new(QueryCompletedIncentiveProgramsResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.incentive.v1.Query/CompletedIncentivePrograms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OngoingIncentivePrograms(ctx context.Context, in *QueryOngoingIncentivePrograms, opts ...grpc.CallOption) (*QueryOngoingIncentiveProgramsResponse, error) {
	out := new(QueryOngoingIncentiveProgramsResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.incentive.v1.Query/OngoingIncentivePrograms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UpcomingIncentivePrograms(ctx context.Context, in *QueryUpcomingIncentivePrograms, opts ...grpc.CallOption) (*QueryUpcomingIncentiveProgramsResponse, error) {
	out := new(QueryUpcomingIncentiveProgramsResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.incentive.v1.Query/UpcomingIncentivePrograms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IncentiveProgram(ctx context.Context, in *QueryIncentiveProgram, opts ...grpc.CallOption) (*QueryIncentiveProgramResponse, error) {
	out := new(QueryIncentiveProgramResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.incentive.v1.Query/IncentiveProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the x/incentive module.
	Params(context.Context, *QueryParams) (*QueryParamsResponse, error)
	// TotalBonded queries the sum of all bonded collateral uTokens, separated by tier.
	TotalBonded(context.Context, *QueryTotalBonded) (*QueryTotalBondedResponse, error)
	// TotalUnbonding queries the sum of all unbonding collateral uTokens, separated by tier.
	TotalUnbonding(context.Context, *QueryTotalUnbonding) (*QueryTotalUnbondingResponse, error)
	// Bonded queries all bonded collateral uTokens associated with an account.
	Bonded(context.Context, *QueryBonded) (*QueryBondedResponse, error)
	// Unbondings queries all current uToken unbondings associated with an account.
	Unbondings(context.Context, *QueryUnbondings) (*QueryUnbondingsResponse, error)
	// PendingRewards queries unclaimed incentive rewards associated with an account.
	PendingRewards(context.Context, *QueryPendingRewards) (*QueryPendingRewardsResponse, error)
	// CompletedIncentivePrograms queries for all incentives programs that have been passed
	// by governance, and either run to completion or expired immediately due to not being funded.
	CompletedIncentivePrograms(context.Context, *QueryCompletedIncentivePrograms) (*QueryCompletedIncentiveProgramsResponse, error)
	// OngoingIncentivePrograms queries for all incentives programs that have been passed
	// by governance, funded, and started but not yet completed.
	OngoingIncentivePrograms(context.Context, *QueryOngoingIncentivePrograms) (*QueryOngoingIncentiveProgramsResponse, error)
	// UpcomingIncentivePrograms queries for all incentives programs that have been passed
	// by governance, but not yet started. They may or may not have been funded.
	UpcomingIncentivePrograms(context.Context, *QueryUpcomingIncentivePrograms) (*QueryUpcomingIncentiveProgramsResponse, error)
	// IncentiveProgram queries a single incentive program by ID.
	IncentiveProgram(context.Context, *QueryIncentiveProgram) (*QueryIncentiveProgramResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParams) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) TotalBonded(ctx context.Context, req *QueryTotalBonded) (*QueryTotalBondedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalBonded not implemented")
}
func (*UnimplementedQueryServer) TotalUnbonding(ctx context.Context, req *QueryTotalUnbonding) (*QueryTotalUnbondingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalUnbonding not implemented")
}
func (*UnimplementedQueryServer) Bonded(ctx context.Context, req *QueryBonded) (*QueryBondedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bonded not implemented")
}
func (*UnimplementedQueryServer) Unbondings(ctx context.Context, req *QueryUnbondings) (*QueryUnbondingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unbondings not implemented")
}
func (*UnimplementedQueryServer) PendingRewards(ctx context.Context, req *QueryPendingRewards) (*QueryPendingRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingRewards not implemented")
}
func (*UnimplementedQueryServer) CompletedIncentivePrograms(ctx context.Context, req *QueryCompletedIncentivePrograms) (*QueryCompletedIncentiveProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletedIncentivePrograms not implemented")
}
func (*UnimplementedQueryServer) OngoingIncentivePrograms(ctx context.Context, req *QueryOngoingIncentivePrograms) (*QueryOngoingIncentiveProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OngoingIncentivePrograms not implemented")
}
func (*UnimplementedQueryServer) UpcomingIncentivePrograms(ctx context.Context, req *QueryUpcomingIncentivePrograms) (*QueryUpcomingIncentiveProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpcomingIncentivePrograms not implemented")
}
func (*UnimplementedQueryServer) IncentiveProgram(ctx context.Context, req *QueryIncentiveProgram) (*QueryIncentiveProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncentiveProgram not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.incentive.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalBonded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalBonded)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalBonded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.incentive.v1.Query/TotalBonded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalBonded(ctx, req.(*QueryTotalBonded))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalUnbonding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalUnbonding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalUnbonding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.incentive.v1.Query/TotalUnbonding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalUnbonding(ctx, req.(*QueryTotalUnbonding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Bonded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBonded)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Bonded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.incentive.v1.Query/Bonded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Bonded(ctx, req.(*QueryBonded))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Unbondings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnbondings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Unbondings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.incentive.v1.Query/Unbondings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Unbondings(ctx, req.(*QueryUnbondings))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.incentive.v1.Query/PendingRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingRewards(ctx, req.(*QueryPendingRewards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CompletedIncentivePrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCompletedIncentivePrograms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CompletedIncentivePrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.incentive.v1.Query/CompletedIncentivePrograms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CompletedIncentivePrograms(ctx, req.(*QueryCompletedIncentivePrograms))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OngoingIncentivePrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOngoingIncentivePrograms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OngoingIncentivePrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.incentive.v1.Query/OngoingIncentivePrograms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OngoingIncentivePrograms(ctx, req.(*QueryOngoingIncentivePrograms))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UpcomingIncentivePrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUpcomingIncentivePrograms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UpcomingIncentivePrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.incentive.v1.Query/UpcomingIncentivePrograms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UpcomingIncentivePrograms(ctx, req.(*QueryUpcomingIncentivePrograms))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IncentiveProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIncentiveProgram)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IncentiveProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.incentive.v1.Query/IncentiveProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IncentiveProgram(ctx, req.(*QueryIncentiveProgram))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "umeenetwork.umee.incentive.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "TotalBonded",
			Handler:    _Query_TotalBonded_Handler,
		},
		{
			MethodName: "TotalUnbonding",
			Handler:    _Query_TotalUnbonding_Handler,
		},
		{
			MethodName: "Bonded",
			Handler:    _Query_Bonded_Handler,
		},
		{
			MethodName: "Unbondings",
			Handler:    _Query_Unbondings_Handler,
		},
		{
			MethodName: "PendingRewards",
			Handler:    _Query_PendingRewards_Handler,
		},
		{
			MethodName: "CompletedIncentivePrograms",
			Handler:    _Query_CompletedIncentivePrograms_Handler,
		},
		{
			MethodName: "OngoingIncentivePrograms",
			Handler:    _Query_OngoingIncentivePrograms_Handler,
		},
		{
			MethodName: "UpcomingIncentivePrograms",
			Handler:    _Query_UpcomingIncentivePrograms_Handler,
		},
		{
			MethodName: "IncentiveProgram",
			Handler:    _Query_IncentiveProgram_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "umee/incentive/v1/query.proto",
}

func (m *QueryParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPendingRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBonded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBonded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBonded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBondedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBondedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBondedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bonded) > 0 {
		for iNdEx := len(m.Bonded) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bonded[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnbondings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnbondings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnbondings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnbondingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnbondingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnbondingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Unbondings) > 0 {
		for iNdEx := len(m.Unbondings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Unbondings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalBonded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalBonded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalBonded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalBondedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalBondedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalBondedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bonded) > 0 {
		for iNdEx := len(m.Bonded) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bonded[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalUnbonding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalUnbonding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalUnbonding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalUnbondingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalUnbondingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalUnbondingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Unbonding) > 0 {
		for iNdEx := len(m.Unbonding) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Unbonding[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUpcomingIncentivePrograms) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUpcomingIncentivePrograms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUpcomingIncentivePrograms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryUpcomingIncentiveProgramsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUpcomingIncentiveProgramsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUpcomingIncentiveProgramsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Programs) > 0 {
		for iNdEx := len(m.Programs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Programs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOngoingIncentivePrograms) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOngoingIncentivePrograms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOngoingIncentivePrograms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOngoingIncentiveProgramsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOngoingIncentiveProgramsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOngoingIncentiveProgramsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Programs) > 0 {
		for iNdEx := len(m.Programs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Programs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCompletedIncentivePrograms) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCompletedIncentivePrograms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCompletedIncentivePrograms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCompletedIncentiveProgramsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCompletedIncentiveProgramsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCompletedIncentiveProgramsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Programs) > 0 {
		for iNdEx := len(m.Programs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Programs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIncentiveProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentiveProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentiveProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIncentiveProgramResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentiveProgramResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentiveProgramResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Program.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPendingRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBonded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBondedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bonded) > 0 {
		for _, e := range m.Bonded {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryUnbondings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUnbondingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Unbondings) > 0 {
		for _, e := range m.Unbondings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTotalBonded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalBondedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bonded) > 0 {
		for _, e := range m.Bonded {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTotalUnbonding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalUnbondingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Unbonding) > 0 {
		for _, e := range m.Unbonding {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryUpcomingIncentivePrograms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryUpcomingIncentiveProgramsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Programs) > 0 {
		for _, e := range m.Programs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOngoingIncentivePrograms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOngoingIncentiveProgramsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Programs) > 0 {
		for _, e := range m.Programs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCompletedIncentivePrograms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCompletedIncentiveProgramsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Programs) > 0 {
		for _, e := range m.Programs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIncentiveProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryIncentiveProgramResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Program.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBonded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBonded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBonded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBondedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBondedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBondedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bonded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bonded = append(m.Bonded, TotalBond{})
			if err := m.Bonded[len(m.Bonded)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnbondings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnbondings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnbondings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnbondingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnbondingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnbondingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unbondings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unbondings = append(m.Unbondings, Unbonding{})
			if err := m.Unbondings[len(m.Unbondings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalBonded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalBonded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalBonded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalBondedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalBondedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalBondedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bonded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bonded = append(m.Bonded, TotalBond{})
			if err := m.Bonded[len(m.Bonded)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalUnbonding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalUnbonding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalUnbonding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalUnbondingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalUnbondingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalUnbondingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unbonding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unbonding = append(m.Unbonding, TotalBond{})
			if err := m.Unbonding[len(m.Unbonding)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUpcomingIncentivePrograms) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUpcomingIncentivePrograms: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUpcomingIncentivePrograms: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUpcomingIncentiveProgramsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUpcomingIncentiveProgramsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUpcomingIncentiveProgramsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Programs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Programs = append(m.Programs, IncentiveProgram{})
			if err := m.Programs[len(m.Programs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOngoingIncentivePrograms) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOngoingIncentivePrograms: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOngoingIncentivePrograms: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOngoingIncentiveProgramsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOngoingIncentiveProgramsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOngoingIncentiveProgramsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Programs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Programs = append(m.Programs, IncentiveProgram{})
			if err := m.Programs[len(m.Programs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCompletedIncentivePrograms) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCompletedIncentivePrograms: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCompletedIncentivePrograms: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCompletedIncentiveProgramsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCompletedIncentiveProgramsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCompletedIncentiveProgramsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Programs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Programs = append(m.Programs, IncentiveProgram{})
			if err := m.Programs[len(m.Programs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentiveProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentiveProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentiveProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentiveProgramResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentiveProgramResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentiveProgramResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Program.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
